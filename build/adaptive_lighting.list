
build/adaptive_lighting.elf:     file format elf32-littlearm


Disassembly of section .text:

08001800 <Reset_Handler>:
 8001800:	b672      	cpsid	i
 8001802:	4834      	ldr	r0, [pc, #208]	; (80018d4 <endfiniloop+0x6>)
 8001804:	f380 8809 	msr	PSP, r0
 8001808:	f240 0000 	movw	r0, #0
 800180c:	f2cc 0000 	movt	r0, #49152	; 0xc000
 8001810:	f64e 7134 	movw	r1, #61236	; 0xef34
 8001814:	f2ce 0100 	movt	r1, #57344	; 0xe000
 8001818:	6008      	str	r0, [r1, #0]
 800181a:	f3bf 8f4f 	dsb	sy
 800181e:	f3bf 8f6f 	isb	sy
 8001822:	f240 0000 	movw	r0, #0
 8001826:	f2c0 00f0 	movt	r0, #240	; 0xf0
 800182a:	f64e 5188 	movw	r1, #60808	; 0xed88
 800182e:	f2ce 0100 	movt	r1, #57344	; 0xe000
 8001832:	6008      	str	r0, [r1, #0]
 8001834:	f3bf 8f4f 	dsb	sy
 8001838:	f3bf 8f6f 	isb	sy
 800183c:	f04f 0000 	mov.w	r0, #0
 8001840:	eee1 0a10 	vmsr	fpscr, r0
 8001844:	f64e 713c 	movw	r1, #61244	; 0xef3c
 8001848:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800184c:	6008      	str	r0, [r1, #0]
 800184e:	2006      	movs	r0, #6
 8001850:	f380 8814 	msr	CONTROL, r0
 8001854:	f3bf 8f6f 	isb	sy
 8001858:	f001 f832 	bl	80028c0 <__core_init>
 800185c:	f001 fd68 	bl	8003330 <__early_init>
 8001860:	481d      	ldr	r0, [pc, #116]	; (80018d8 <endfiniloop+0xa>)
 8001862:	491e      	ldr	r1, [pc, #120]	; (80018dc <endfiniloop+0xe>)
 8001864:	4a1e      	ldr	r2, [pc, #120]	; (80018e0 <endfiniloop+0x12>)

08001866 <msloop>:
 8001866:	4291      	cmp	r1, r2
 8001868:	bf3c      	itt	cc
 800186a:	f841 0b04 	strcc.w	r0, [r1], #4
 800186e:	e7fa      	bcc.n	8001866 <msloop>
 8001870:	491c      	ldr	r1, [pc, #112]	; (80018e4 <endfiniloop+0x16>)
 8001872:	4a18      	ldr	r2, [pc, #96]	; (80018d4 <endfiniloop+0x6>)

08001874 <psloop>:
 8001874:	4291      	cmp	r1, r2
 8001876:	bf3c      	itt	cc
 8001878:	f841 0b04 	strcc.w	r0, [r1], #4
 800187c:	e7fa      	bcc.n	8001874 <psloop>
 800187e:	491a      	ldr	r1, [pc, #104]	; (80018e8 <endfiniloop+0x1a>)
 8001880:	4a1a      	ldr	r2, [pc, #104]	; (80018ec <endfiniloop+0x1e>)
 8001882:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <endfiniloop+0x22>)

08001884 <dloop>:
 8001884:	429a      	cmp	r2, r3
 8001886:	bf3e      	ittt	cc
 8001888:	f851 0b04 	ldrcc.w	r0, [r1], #4
 800188c:	f842 0b04 	strcc.w	r0, [r2], #4
 8001890:	e7f8      	bcc.n	8001884 <dloop>
 8001892:	2000      	movs	r0, #0
 8001894:	4917      	ldr	r1, [pc, #92]	; (80018f4 <endfiniloop+0x26>)
 8001896:	4a18      	ldr	r2, [pc, #96]	; (80018f8 <endfiniloop+0x2a>)

08001898 <bloop>:
 8001898:	4291      	cmp	r1, r2
 800189a:	bf3c      	itt	cc
 800189c:	f841 0b04 	strcc.w	r0, [r1], #4
 80018a0:	e7fa      	bcc.n	8001898 <bloop>
 80018a2:	f000 ffd5 	bl	8002850 <__init_ram_areas>
 80018a6:	f001 f803 	bl	80028b0 <__late_init>
 80018aa:	4c14      	ldr	r4, [pc, #80]	; (80018fc <endfiniloop+0x2e>)
 80018ac:	4d14      	ldr	r5, [pc, #80]	; (8001900 <endfiniloop+0x32>)

080018ae <initloop>:
 80018ae:	42ac      	cmp	r4, r5
 80018b0:	da03      	bge.n	80018ba <endinitloop>
 80018b2:	f854 1b04 	ldr.w	r1, [r4], #4
 80018b6:	4788      	blx	r1
 80018b8:	e7f9      	b.n	80018ae <initloop>

080018ba <endinitloop>:
 80018ba:	f001 f999 	bl	8002bf0 <main>
 80018be:	4c11      	ldr	r4, [pc, #68]	; (8001904 <endfiniloop+0x36>)
 80018c0:	4d11      	ldr	r5, [pc, #68]	; (8001908 <endfiniloop+0x3a>)

080018c2 <finiloop>:
 80018c2:	42ac      	cmp	r4, r5
 80018c4:	da03      	bge.n	80018ce <endfiniloop>
 80018c6:	f854 1b04 	ldr.w	r1, [r4], #4
 80018ca:	4788      	blx	r1
 80018cc:	e7f9      	b.n	80018c2 <finiloop>

080018ce <endfiniloop>:
 80018ce:	f000 bfe7 	b.w	80028a0 <__default_exit>
 80018d2:	0000      	.short	0x0000
 80018d4:	20000800 	.word	0x20000800
 80018d8:	55555555 	.word	0x55555555
 80018dc:	20000000 	.word	0x20000000
 80018e0:	20000400 	.word	0x20000400
 80018e4:	20000400 	.word	0x20000400
 80018e8:	080041a8 	.word	0x080041a8
 80018ec:	20000800 	.word	0x20000800
 80018f0:	20000800 	.word	0x20000800
 80018f4:	20000800 	.word	0x20000800
 80018f8:	20000d2c 	.word	0x20000d2c
 80018fc:	08001800 	.word	0x08001800
 8001900:	08001800 	.word	0x08001800
 8001904:	08001800 	.word	0x08001800
 8001908:	08001800 	.word	0x08001800
 800190c:	00000000 	.word	0x00000000

08001910 <_port_switch>:
 8001910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001914:	ed2d 8a10 	vpush	{s16-s31}
 8001918:	f8c1 d00c 	str.w	sp, [r1, #12]
 800191c:	68c3      	ldr	r3, [r0, #12]
 800191e:	469d      	mov	sp, r3
 8001920:	ecbd 8a10 	vpop	{s16-s31}
 8001924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001928 <_port_thread_start>:
 8001928:	2300      	movs	r3, #0
 800192a:	f383 8811 	msr	BASEPRI, r3
 800192e:	4628      	mov	r0, r5
 8001930:	47a0      	blx	r4
 8001932:	2000      	movs	r0, #0
 8001934:	f000 ff5c 	bl	80027f0 <chThdExit>

08001938 <_port_switch_from_isr>:
 8001938:	f000 fe52 	bl	80025e0 <chSchDoReschedule>

0800193c <_port_exit_from_isr>:
 800193c:	df00      	svc	0
 800193e:	e7fe      	b.n	800193e <_port_exit_from_isr+0x2>

08001940 <set_address>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 8001940:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8001944:	6842      	ldr	r2, [r0, #4]
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 8001946:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {

  STM32_USB->DADDR = (uint32_t)(usbp->address) | DADDR_EF;
 800194a:	4906      	ldr	r1, [pc, #24]	; (8001964 <set_address+0x24>)
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 800194c:	6812      	ldr	r2, [r2, #0]
 800194e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
/**
 * @brief  SET ADDRESS transaction callback.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {
 8001952:	b510      	push	{r4, lr}
 8001954:	4604      	mov	r4, r0
 8001956:	64cb      	str	r3, [r1, #76]	; 0x4c

  usbp->address = usbp->setup[2];
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8001958:	b10a      	cbz	r2, 800195e <set_address+0x1e>
 800195a:	2101      	movs	r1, #1
 800195c:	4790      	blx	r2
  usbp->state = USB_SELECTED;
 800195e:	2303      	movs	r3, #3
 8001960:	7023      	strb	r3, [r4, #0]
 8001962:	bd10      	pop	{r4, pc}
 8001964:	40005c00 	.word	0x40005c00
	...

08001970 <SVC_Handler>:
/*lint -restore*/
  struct port_extctx *ctxp;

#if CORTEX_USE_FPU
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 8001970:	4a06      	ldr	r2, [pc, #24]	; (800198c <SVC_Handler+0x1c>)
 8001972:	6853      	ldr	r3, [r2, #4]
 8001974:	f023 0301 	bic.w	r3, r3, #1
 8001978:	6053      	str	r3, [r2, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800197a:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 800197e:	3368      	adds	r3, #104	; 0x68

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8001980:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001984:	2300      	movs	r3, #0
 8001986:	f383 8811 	msr	BASEPRI, r3
 800198a:	4770      	bx	lr
 800198c:	e000ef30 	.word	0xe000ef30

08001990 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8001990:	b410      	push	{r4}
 8001992:	2320      	movs	r3, #32
 8001994:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8001998:	4c09      	ldr	r4, [pc, #36]	; (80019c0 <chCoreAlloc+0x30>)
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <chCoreAlloc+0x34>)
 800199c:	6822      	ldr	r2, [r4, #0]
 800199e:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 80019a0:	1dc3      	adds	r3, r0, #7
 80019a2:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 80019a6:	1a89      	subs	r1, r1, r2
 80019a8:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 80019aa:	bf9d      	ittte	ls
 80019ac:	189b      	addls	r3, r3, r2
 80019ae:	6023      	strls	r3, [r4, #0]

  return p;
 80019b0:	4610      	movls	r0, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 80019b2:	2000      	movhi	r0, #0
 80019b4:	2300      	movs	r3, #0
 80019b6:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 80019ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	20000ccc 	.word	0x20000ccc
 80019c4:	20000a18 	.word	0x20000a18
	...

080019d0 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 80019d0:	b410      	push	{r4}
 80019d2:	2320      	movs	r3, #32
 80019d4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 80019d8:	7f03      	ldrb	r3, [r0, #28]
 80019da:	2b07      	cmp	r3, #7
 80019dc:	d80e      	bhi.n	80019fc <wakeup+0x2c>
 80019de:	e8df f003 	tbb	[pc, r3]
 80019e2:	0d27      	.short	0x0d27
 80019e4:	0408230d 	.word	0x0408230d
 80019e8:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 80019ea:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 80019ec:	6893      	ldr	r3, [r2, #8]
 80019ee:	3301      	adds	r3, #1
 80019f0:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80019f2:	e890 000c 	ldmia.w	r0, {r2, r3}
 80019f6:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 80019f8:	6802      	ldr	r2, [r0, #0]
 80019fa:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 80019fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001a00:	2200      	movs	r2, #0
 8001a02:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8001a04:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <wakeup+0x6c>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8001a06:	6244      	str	r4, [r0, #36]	; 0x24
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001a08:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8001a0a:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	428a      	cmp	r2, r1
 8001a10:	d2fb      	bcs.n	8001a0a <wakeup+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	6042      	str	r2, [r0, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001a16:	6003      	str	r3, [r0, #0]
 8001a18:	2100      	movs	r1, #0
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8001a1a:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 8001a1c:	6058      	str	r0, [r3, #4]
 8001a1e:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8001a22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a26:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 8001a28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	e7e5      	b.n	80019fc <wakeup+0x2c>
 8001a30:	2300      	movs	r3, #0
 8001a32:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8001a36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	20000830 	.word	0x20000830

08001a40 <_idle_thread.lto_priv.45>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8001a40:	e7fe      	b.n	8001a40 <_idle_thread.lto_priv.45>
 8001a42:	bf00      	nop
	...

08001a50 <_usb_ep0out>:
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {

  (void)ep;
  switch (usbp->ep0state) {
 8001a50:	f890 2064 	ldrb.w	r2, [r0, #100]	; 0x64
 8001a54:	2a06      	cmp	r2, #6
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8001a56:	b538      	push	{r3, r4, r5, lr}
 8001a58:	d80a      	bhi.n	8001a70 <_usb_ep0out+0x20>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	4093      	lsls	r3, r2
 8001a5e:	f013 0f67 	tst.w	r3, #103	; 0x67
 8001a62:	4604      	mov	r4, r0
 8001a64:	d111      	bne.n	8001a8a <_usb_ep0out+0x3a>
 8001a66:	f013 0508 	ands.w	r5, r3, #8
 8001a6a:	d102      	bne.n	8001a72 <_usb_ep0out+0x22>
 8001a6c:	06db      	lsls	r3, r3, #27
 8001a6e:	d42e      	bmi.n	8001ace <_usb_ep0out+0x7e>
 8001a70:	bd38      	pop	{r3, r4, r5, pc}
    return;
  case USB_EP0_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
 8001a72:	68c3      	ldr	r3, [r0, #12]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1f9      	bne.n	8001a70 <_usb_ep0out+0x20>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 8001a7c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8001a7e:	b103      	cbz	r3, 8001a82 <_usb_ep0out+0x32>
      usbp->ep0endcb(usbp);
 8001a80:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 8001a82:	2300      	movs	r3, #0
 8001a84:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8001a88:	bd38      	pop	{r3, r4, r5, pc}
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8001a8a:	4a17      	ldr	r2, [pc, #92]	; (8001ae8 <_usb_ep0out+0x98>)
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
    usb_lld_stall_out(usbp, 0);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8001a8c:	6841      	ldr	r1, [r0, #4]
 8001a8e:	6813      	ldr	r3, [r2, #0]
 8001a90:	680d      	ldr	r5, [r1, #0]
 8001a92:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8001a96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a9a:	f083 0310 	eor.w	r3, r3, #16
 8001a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aa6:	6013      	str	r3, [r2, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8001aa8:	6813      	ldr	r3, [r2, #0]
 8001aaa:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ab2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	b10d      	cbz	r5, 8001ac6 <_usb_ep0out+0x76>
 8001ac2:	2105      	movs	r1, #5
 8001ac4:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 8001ac6:	2306      	movs	r3, #6
 8001ac8:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8001acc:	bd38      	pop	{r3, r4, r5, pc}

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 8001ace:	2305      	movs	r3, #5
 8001ad0:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
 8001ad4:	2320      	movs	r3, #32
 8001ad6:	f383 8811 	msr	BASEPRI, r3
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    osalSysLockFromISR();
    usbStartTransmitI(usbp, 0, NULL, 0);
 8001ada:	4629      	mov	r1, r5
 8001adc:	462a      	mov	r2, r5
 8001ade:	f002 fa0f 	bl	8003f00 <usbStartTransmitI.constprop.17>
 8001ae2:	f385 8811 	msr	BASEPRI, r5
 8001ae6:	bd38      	pop	{r3, r4, r5, pc}
 8001ae8:	40005c00 	.word	0x40005c00
 8001aec:	00000000 	.word	0x00000000

08001af0 <_usb_ep0in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8001af0:	b538      	push	{r3, r4, r5, lr}
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 8001af2:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8001af6:	4604      	mov	r4, r0
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 8001af8:	2b06      	cmp	r3, #6
 8001afa:	d826      	bhi.n	8001b4a <_usb_ep0in+0x5a>
 8001afc:	e8df f003 	tbb	[pc, r3]
 8001b00:	04362604 	.word	0x04362604
 8001b04:	4504      	.short	0x4504
 8001b06:	04          	.byte	0x04
 8001b07:	00          	.byte	0x00
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8001b08:	4a2a      	ldr	r2, [pc, #168]	; (8001bb4 <_usb_ep0in+0xc4>)
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
    usb_lld_stall_out(usbp, 0);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8001b0a:	6841      	ldr	r1, [r0, #4]
 8001b0c:	6813      	ldr	r3, [r2, #0]
 8001b0e:	680d      	ldr	r5, [r1, #0]
 8001b10:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8001b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b18:	f083 0310 	eor.w	r3, r3, #16
 8001b1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b24:	6013      	str	r3, [r2, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8001b26:	6813      	ldr	r3, [r2, #0]
 8001b28:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b30:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001b34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	b10d      	cbz	r5, 8001b44 <_usb_ep0in+0x54>
 8001b40:	2105      	movs	r1, #5
 8001b42:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 8001b44:	2306      	movs	r3, #6
 8001b46:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8001b4a:	bd38      	pop	{r3, r4, r5, pc}

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 8001b4c:	f890 107b 	ldrb.w	r1, [r0, #123]	; 0x7b
 8001b50:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8001b54:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
 8001b56:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d906      	bls.n	8001b6c <_usb_ep0in+0x7c>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 8001b5e:	68c3      	ldr	r3, [r0, #12]
 8001b60:	8a1d      	ldrh	r5, [r3, #16]
 8001b62:	fbb2 f3f5 	udiv	r3, r2, r5
 8001b66:	fb05 2513 	mls	r5, r5, r3, r2
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8001b6a:	b1ad      	cbz	r5, 8001b98 <_usb_ep0in+0xa8>
      return;
    }
    /* Falls into, it is intentional.*/
  case USB_EP0_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8001b72:	2320      	movs	r3, #32
 8001b74:	f383 8811 	msr	BASEPRI, r3
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    osalSysLockFromISR();
    usbStartReceiveI(usbp, 0, NULL, 0);
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	460a      	mov	r2, r1
 8001b7e:	f002 f997 	bl	8003eb0 <usbStartReceiveI.constprop.19>
 8001b82:	2300      	movs	r3, #0
 8001b84:	f383 8811 	msr	BASEPRI, r3
 8001b88:	bd38      	pop	{r3, r4, r5, pc}
    usb_lld_end_setup(usbp, ep);
#endif
    return;
  case USB_EP0_SENDING_STS:
    /* Status packet sent, invoking the callback if defined.*/
    if (usbp->ep0endcb != NULL) {
 8001b8a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8001b8c:	b103      	cbz	r3, 8001b90 <_usb_ep0in+0xa0>
      usbp->ep0endcb(usbp);
 8001b8e:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8001b96:	bd38      	pop	{r3, r4, r5, pc}
 8001b98:	2320      	movs	r3, #32
 8001b9a:	f383 8811 	msr	BASEPRI, r3
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
      osalSysLockFromISR();
      usbStartTransmitI(usbp, 0, NULL, 0);
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	462a      	mov	r2, r5
 8001ba2:	f002 f9ad 	bl	8003f00 <usbStartTransmitI.constprop.17>
 8001ba6:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlockFromISR();
      usbp->ep0state = USB_EP0_WAITING_TX0;
 8001baa:	2302      	movs	r3, #2
 8001bac:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8001bb0:	bd38      	pop	{r3, r4, r5, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40005c00 	.word	0x40005c00
	...

08001bc0 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8001bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  stm32_usb_pma_t *pmap;
  stm32_usb_descriptor_t *udp;
  uint32_t n;

  (void)usbp;
  udp = USB_GET_DESCRIPTOR(ep);
 8001bc2:	4bbd      	ldr	r3, [pc, #756]	; (8001eb8 <_usb_ep0setup+0x2f8>)
 8001bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bc6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001bca:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8001bce:	eb03 1101 	add.w	r1, r3, r1, lsl #4
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8001bd2:	2200      	movs	r2, #0
  pmap = USB_ADDR2PTR(udp->RXADDR0);
 8001bd4:	688b      	ldr	r3, [r1, #8]
 8001bd6:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
 8001bda:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001bde:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8001be2:	4604      	mov	r4, r0
 8001be4:	005b      	lsls	r3, r3, #1
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
  usbReadSetup(usbp, ep, usbp->setup);
 8001be6:	f100 0274 	add.w	r2, r0, #116	; 0x74
 8001bea:	f100 067c 	add.w	r6, r0, #124	; 0x7c
  for (n = 0; n < 4; n++) {
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8001bee:	f853 1b04 	ldr.w	r1, [r3], #4
 8001bf2:	f822 1b02 	strh.w	r1, [r2], #2
  uint32_t n;

  (void)usbp;
  udp = USB_GET_DESCRIPTOR(ep);
  pmap = USB_ADDR2PTR(udp->RXADDR0);
  for (n = 0; n < 4; n++) {
 8001bf6:	42b2      	cmp	r2, r6
 8001bf8:	d1f9      	bne.n	8001bee <_usb_ep0setup+0x2e>

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 8001bfa:	6863      	ldr	r3, [r4, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	b31b      	cbz	r3, 8001c48 <_usb_ep0setup+0x88>
      !(usbp->config->requests_hook_cb(usbp))) {
 8001c00:	4620      	mov	r0, r4
 8001c02:	4798      	blx	r3
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 8001c04:	b300      	cbz	r0, 8001c48 <_usb_ep0setup+0x88>
 8001c06:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8001c08:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 8001c0c:	f894 107b 	ldrb.w	r1, [r4, #123]	; 0x7b
 8001c10:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = (size_t)get_hword(&usbp->setup[6]);
 8001c14:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
 8001c18:	42aa      	cmp	r2, r5
    usbp->ep0n = max;
 8001c1a:	bf3c      	itt	cc
 8001c1c:	66e2      	strcc	r2, [r4, #108]	; 0x6c
 8001c1e:	4615      	movcc	r5, r2
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8001c20:	061b      	lsls	r3, r3, #24
 8001c22:	f100 809e 	bmi.w	8001d62 <_usb_ep0setup+0x1a2>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
 8001c26:	2d00      	cmp	r5, #0
 8001c28:	f040 808c 	bne.w	8001d44 <_usb_ep0setup+0x184>
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 8001c2c:	2305      	movs	r3, #5
 8001c2e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8001c32:	2320      	movs	r3, #32
 8001c34:	f383 8811 	msr	BASEPRI, r3
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      osalSysLockFromISR();
      usbStartTransmitI(usbp, 0, NULL, 0);
 8001c38:	4620      	mov	r0, r4
 8001c3a:	4629      	mov	r1, r5
 8001c3c:	462a      	mov	r2, r5
 8001c3e:	f002 f95f 	bl	8003f00 <usbStartTransmitI.constprop.17>
 8001c42:	f385 8811 	msr	BASEPRI, r5
 8001c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      !(usbp->config->requests_hook_cb(usbp))) {
  /*lint -restore*/
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 8001c48:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8001c4c:	f013 0760 	ands.w	r7, r3, #96	; 0x60
 8001c50:	d022      	beq.n	8001c98 <_usb_ep0setup+0xd8>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8001c52:	4a99      	ldr	r2, [pc, #612]	; (8001eb8 <_usb_ep0setup+0x2f8>)
      /* Error response, the state machine goes into an error state, the low
         level layer will have to reset it to USB_EP0_WAITING_SETUP after
         receiving a SETUP packet.*/
      usb_lld_stall_in(usbp, 0);
      usb_lld_stall_out(usbp, 0);
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8001c54:	6861      	ldr	r1, [r4, #4]
 8001c56:	6813      	ldr	r3, [r2, #0]
 8001c58:	680d      	ldr	r5, [r1, #0]
 8001c5a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8001c5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c62:	f083 0310 	eor.w	r3, r3, #16
 8001c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c6e:	6013      	str	r3, [r2, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8001c70:	6813      	ldr	r3, [r2, #0]
 8001c72:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c7a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	b115      	cbz	r5, 8001c90 <_usb_ep0setup+0xd0>
 8001c8a:	4620      	mov	r0, r4
 8001c8c:	2105      	movs	r1, #5
 8001c8e:	47a8      	blx	r5
      usbp->ep0state = USB_EP0_ERROR;
 8001c90:	2306      	movs	r3, #6
 8001c92:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8001c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
 8001c98:	f894 5075 	ldrb.w	r5, [r4, #117]	; 0x75
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001c9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 8001ca0:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001ca4:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 8001ca8:	f000 80f5 	beq.w	8001e96 <_usb_ep0setup+0x2d6>
 8001cac:	d916      	bls.n	8001cdc <_usb_ep0setup+0x11c>
 8001cae:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 8001cb2:	f000 80d7 	beq.w	8001e64 <_usb_ep0setup+0x2a4>
 8001cb6:	d972      	bls.n	8001d9e <_usb_ep0setup+0x1de>
 8001cb8:	f5b5 6f10 	cmp.w	r5, #2304	; 0x900
 8001cbc:	d07d      	beq.n	8001dba <_usb_ep0setup+0x1fa>
 8001cbe:	f640 4202 	movw	r2, #3074	; 0xc02
 8001cc2:	4295      	cmp	r5, r2
 8001cc4:	f000 80c7 	beq.w	8001e56 <_usb_ep0setup+0x296>
 8001cc8:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8001ccc:	d1c1      	bne.n	8001c52 <_usb_ep0setup+0x92>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_CONFIGURATION << 8):
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8001cce:	f104 027f 	add.w	r2, r4, #127	; 0x7f
 8001cd2:	2501      	movs	r5, #1
 8001cd4:	6727      	str	r7, [r4, #112]	; 0x70
 8001cd6:	66a2      	str	r2, [r4, #104]	; 0x68
 8001cd8:	66e5      	str	r5, [r4, #108]	; 0x6c
 8001cda:	e797      	b.n	8001c0c <_usb_ep0setup+0x4c>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001cdc:	2d02      	cmp	r5, #2
 8001cde:	f000 80f1 	beq.w	8001ec4 <_usb_ep0setup+0x304>
 8001ce2:	f240 80ae 	bls.w	8001e42 <_usb_ep0setup+0x282>
 8001ce6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8001cea:	d079      	beq.n	8001de0 <_usb_ep0setup+0x220>
 8001cec:	f5b5 7f81 	cmp.w	r5, #258	; 0x102
 8001cf0:	d1af      	bne.n	8001c52 <_usb_ep0setup+0x92>
        return false;
      }
    }
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8001cf2:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8001cf6:	2a00      	cmp	r2, #0
 8001cf8:	d1ab      	bne.n	8001c52 <_usb_ep0setup+0x92>
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8001cfa:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 8001cfe:	f011 020f 	ands.w	r2, r1, #15
 8001d02:	d01a      	beq.n	8001d3a <_usb_ep0setup+0x17a>
 8001d04:	0092      	lsls	r2, r2, #2
 8001d06:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001d0a:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8001d0e:	f011 0f80 	tst.w	r1, #128	; 0x80

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 8001d12:	6811      	ldr	r1, [r2, #0]
 8001d14:	f040 80fa 	bne.w	8001f0c <_usb_ep0setup+0x34c>

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) != EPR_STAT_RX_VALID)
 8001d18:	f401 5140 	and.w	r1, r1, #12288	; 0x3000
 8001d1c:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 8001d20:	d00b      	beq.n	8001d3a <_usb_ep0setup+0x17a>
    EPR_SET_STAT_TX(ep, EPR_STAT_RX_NAK);
 8001d22:	6813      	ldr	r3, [r2, #0]
 8001d24:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8001d28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d2c:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8001d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8001d3a:	2500      	movs	r5, #0
 8001d3c:	66a5      	str	r5, [r4, #104]	; 0x68
 8001d3e:	66e5      	str	r5, [r4, #108]	; 0x6c
 8001d40:	6725      	str	r5, [r4, #112]	; 0x70
 8001d42:	e763      	b.n	8001c0c <_usb_ep0setup+0x4c>
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
 8001d44:	2304      	movs	r3, #4
 8001d46:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8001d4a:	2320      	movs	r3, #32
 8001d4c:	f383 8811 	msr	BASEPRI, r3
      osalSysLockFromISR();
      usbStartReceiveI(usbp, 0, usbp->ep0next, usbp->ep0n);
 8001d50:	4620      	mov	r0, r4
 8001d52:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001d54:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001d56:	f002 f8ab 	bl	8003eb0 <usbStartReceiveI.constprop.19>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f383 8811 	msr	BASEPRI, r3
 8001d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
 8001d62:	b175      	cbz	r5, 8001d82 <_usb_ep0setup+0x1c2>
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
 8001d64:	2301      	movs	r3, #1
 8001d66:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8001d6a:	2320      	movs	r3, #32
 8001d6c:	f383 8811 	msr	BASEPRI, r3
      osalSysLockFromISR();
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 8001d70:	4620      	mov	r0, r4
 8001d72:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001d74:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001d76:	f002 f8c3 	bl	8003f00 <usbStartTransmitI.constprop.17>
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f383 8811 	msr	BASEPRI, r3
 8001d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      osalSysUnlockFromISR();
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
 8001d82:	2303      	movs	r3, #3
 8001d84:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8001d88:	2320      	movs	r3, #32
 8001d8a:	f383 8811 	msr	BASEPRI, r3
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      osalSysLockFromISR();
      usbStartReceiveI(usbp, 0, NULL, 0);
 8001d8e:	4620      	mov	r0, r4
 8001d90:	4629      	mov	r1, r5
 8001d92:	462a      	mov	r2, r5
 8001d94:	f002 f88c 	bl	8003eb0 <usbStartReceiveI.constprop.19>
 8001d98:	f385 8811 	msr	BASEPRI, r5
 8001d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001d9e:	f240 3202 	movw	r2, #770	; 0x302
 8001da2:	4295      	cmp	r5, r2
 8001da4:	d02c      	beq.n	8001e00 <_usb_ep0setup+0x240>
 8001da6:	f5b5 6fa0 	cmp.w	r5, #1280	; 0x500
 8001daa:	f47f af52 	bne.w	8001c52 <_usb_ep0setup+0x92>
        (usbp->setup[1] == USB_REQ_SET_ADDRESS)) {
      set_address(usbp);
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
#else
    usbSetupTransfer(usbp, NULL, 0, set_address);
 8001dae:	4a43      	ldr	r2, [pc, #268]	; (8001ebc <_usb_ep0setup+0x2fc>)
 8001db0:	66a7      	str	r7, [r4, #104]	; 0x68
 8001db2:	66e7      	str	r7, [r4, #108]	; 0x6c
 8001db4:	463d      	mov	r5, r7
 8001db6:	6722      	str	r2, [r4, #112]	; 0x70
 8001db8:	e728      	b.n	8001c0c <_usb_ep0setup+0x4c>
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_CONFIGURATION << 8):
    /* Handling configuration selection from the host.*/
    usbp->configuration = usbp->setup[2];
 8001dba:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8001dbe:	f884 207f 	strb.w	r2, [r4, #127]	; 0x7f
    if (usbp->configuration == 0U) {
 8001dc2:	2a00      	cmp	r2, #0
 8001dc4:	f040 8094 	bne.w	8001ef0 <_usb_ep0setup+0x330>
      usbp->state = USB_SELECTED;
 8001dc8:	2203      	movs	r2, #3
 8001dca:	7022      	strb	r2, [r4, #0]
    }
    else {
      usbp->state = USB_ACTIVE;
    }
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8001dcc:	6862      	ldr	r2, [r4, #4]
 8001dce:	6812      	ldr	r2, [r2, #0]
 8001dd0:	2a00      	cmp	r2, #0
 8001dd2:	d0b2      	beq.n	8001d3a <_usb_ep0setup+0x17a>
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	2102      	movs	r1, #2
 8001dd8:	4790      	blx	r2
 8001dda:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8001dde:	e7ac      	b.n	8001d3a <_usb_ep0setup+0x17a>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8001de0:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8001de4:	2a01      	cmp	r2, #1
 8001de6:	f47f af34 	bne.w	8001c52 <_usb_ep0setup+0x92>
      usbp->status &= ~2U;
 8001dea:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001dee:	66a7      	str	r7, [r4, #104]	; 0x68
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 8001df0:	f022 0202 	bic.w	r2, r2, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001df4:	66e7      	str	r7, [r4, #108]	; 0x6c
 8001df6:	6727      	str	r7, [r4, #112]	; 0x70
 8001df8:	463d      	mov	r5, r7
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 8001dfa:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
 8001dfe:	e705      	b.n	8001c0c <_usb_ep0setup+0x4c>
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8001e00:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8001e04:	2a00      	cmp	r2, #0
 8001e06:	f47f af24 	bne.w	8001c52 <_usb_ep0setup+0x92>
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8001e0a:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 8001e0e:	f011 020f 	ands.w	r2, r1, #15
 8001e12:	d092      	beq.n	8001d3a <_usb_ep0setup+0x17a>
 8001e14:	0093      	lsls	r3, r2, #2
 8001e16:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001e1a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8001e1e:	0609      	lsls	r1, r1, #24
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	f100 8087 	bmi.w	8001f34 <_usb_ep0setup+0x374>
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8001e26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e2a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001e2e:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 8001e32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8001e40:	e77b      	b.n	8001d3a <_usb_ep0setup+0x17a>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001e42:	b92d      	cbnz	r5, 8001e50 <_usb_ep0setup+0x290>
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Just returns the current status word.*/
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 8001e44:	2202      	movs	r2, #2
 8001e46:	6725      	str	r5, [r4, #112]	; 0x70
 8001e48:	66a6      	str	r6, [r4, #104]	; 0x68
 8001e4a:	66e2      	str	r2, [r4, #108]	; 0x6c
 8001e4c:	4615      	mov	r5, r2
 8001e4e:	e6dd      	b.n	8001c0c <_usb_ep0setup+0x4c>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001e50:	2d01      	cmp	r5, #1
 8001e52:	f47f aefe 	bne.w	8001c52 <_usb_ep0setup+0x92>
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_STATUS << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SYNCH_FRAME << 8):
    /* Just sending two zero bytes, the application can change the behavior
       using a hook..*/
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 8001e56:	4a1a      	ldr	r2, [pc, #104]	; (8001ec0 <_usb_ep0setup+0x300>)
 8001e58:	66a2      	str	r2, [r4, #104]	; 0x68
 8001e5a:	2502      	movs	r5, #2
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	66e5      	str	r5, [r4, #108]	; 0x6c
 8001e60:	6722      	str	r2, [r4, #112]	; 0x70
 8001e62:	e6d3      	b.n	8001c0c <_usb_ep0setup+0x4c>
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8001e64:	6862      	ldr	r2, [r4, #4]

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 8001e66:	f894 0079 	ldrb.w	r0, [r4, #121]	; 0x79
 8001e6a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8001e6e:	6855      	ldr	r5, [r2, #4]
 8001e70:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
 8001e74:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8001e78:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	47a8      	blx	r5
                                         usbp->setup[2],
                                         get_hword(&usbp->setup[4]));
    if (dp == NULL) {
 8001e80:	2800      	cmp	r0, #0
 8001e82:	f43f aee6 	beq.w	8001c52 <_usb_ep0setup+0x92>
      return false;
    }
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 8001e86:	6843      	ldr	r3, [r0, #4]
 8001e88:	6805      	ldr	r5, [r0, #0]
 8001e8a:	66e5      	str	r5, [r4, #108]	; 0x6c
 8001e8c:	66a3      	str	r3, [r4, #104]	; 0x68
 8001e8e:	6727      	str	r7, [r4, #112]	; 0x70
 8001e90:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8001e94:	e6ba      	b.n	8001c0c <_usb_ep0setup+0x4c>
    }
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8001e96:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8001e9a:	2a01      	cmp	r2, #1
 8001e9c:	f47f aed9 	bne.w	8001c52 <_usb_ep0setup+0x92>
      usbp->status |= 2U;
 8001ea0:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001ea4:	66a7      	str	r7, [r4, #104]	; 0x68
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 8001ea6:	f042 0202 	orr.w	r2, r2, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001eaa:	66e7      	str	r7, [r4, #108]	; 0x6c
 8001eac:	6727      	str	r7, [r4, #112]	; 0x70
 8001eae:	463d      	mov	r5, r7
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 8001eb0:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
 8001eb4:	e6aa      	b.n	8001c0c <_usb_ep0setup+0x4c>
 8001eb6:	bf00      	nop
 8001eb8:	40005c00 	.word	0x40005c00
 8001ebc:	08001941 	.word	0x08001941
 8001ec0:	08003fa0 	.word	0x08003fa0
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 8001ec4:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 * @notapi
 */
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 8001ec8:	4921      	ldr	r1, [pc, #132]	; (8001f50 <_usb_ep0setup+0x390>)
 8001eca:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001ece:	f002 020f 	and.w	r2, r2, #15
 8001ed2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001ed6:	d10e      	bne.n	8001ef6 <_usb_ep0setup+0x336>
 * @notapi
 */
usbepstatus_t usb_lld_get_status_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) {
 8001ed8:	f412 5240 	ands.w	r2, r2, #12288	; 0x3000
 8001edc:	f43f aeb9 	beq.w	8001c52 <_usb_ep0setup+0x92>
 8001ee0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001ee4:	d10d      	bne.n	8001f02 <_usb_ep0setup+0x342>
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
      case EP_STATUS_STALLED:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 8001ee6:	4a1b      	ldr	r2, [pc, #108]	; (8001f54 <_usb_ep0setup+0x394>)
 8001ee8:	66e5      	str	r5, [r4, #108]	; 0x6c
 8001eea:	6727      	str	r7, [r4, #112]	; 0x70
 8001eec:	66a2      	str	r2, [r4, #104]	; 0x68
 8001eee:	e68d      	b.n	8001c0c <_usb_ep0setup+0x4c>
    usbp->configuration = usbp->setup[2];
    if (usbp->configuration == 0U) {
      usbp->state = USB_SELECTED;
    }
    else {
      usbp->state = USB_ACTIVE;
 8001ef0:	2204      	movs	r2, #4
 8001ef2:	7022      	strb	r2, [r4, #0]
 8001ef4:	e76a      	b.n	8001dcc <_usb_ep0setup+0x20c>
 * @notapi
 */
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 8001ef6:	f012 0230 	ands.w	r2, r2, #48	; 0x30
 8001efa:	f43f aeaa 	beq.w	8001c52 <_usb_ep0setup+0x92>
 8001efe:	2a10      	cmp	r2, #16
 8001f00:	d0f1      	beq.n	8001ee6 <_usb_ep0setup+0x326>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
        /*lint -restore*/
        return true;
      case EP_STATUS_ACTIVE:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8001f02:	4a15      	ldr	r2, [pc, #84]	; (8001f58 <_usb_ep0setup+0x398>)
 8001f04:	66e5      	str	r5, [r4, #108]	; 0x6c
 8001f06:	6727      	str	r7, [r4, #112]	; 0x70
 8001f08:	66a2      	str	r2, [r4, #104]	; 0x68
 8001f0a:	e67f      	b.n	8001c0c <_usb_ep0setup+0x4c>

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 8001f0c:	f001 0130 	and.w	r1, r1, #48	; 0x30
 8001f10:	2930      	cmp	r1, #48	; 0x30
 8001f12:	f43f af12 	beq.w	8001d3a <_usb_ep0setup+0x17a>
    EPR_SET_STAT_TX(ep, EPR_STAT_TX_NAK);
 8001f16:	6813      	ldr	r3, [r2, #0]
 8001f18:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8001f1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f20:	f083 0320 	eor.w	r3, r3, #32
 8001f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8001f32:	e702      	b.n	8001d3a <_usb_ep0setup+0x17a>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8001f34:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8001f38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f3c:	f082 0210 	eor.w	r2, r2, #16
 8001f40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8001f4e:	e6f4      	b.n	8001d3a <_usb_ep0setup+0x17a>
 8001f50:	40005c00 	.word	0x40005c00
 8001f54:	08004040 	.word	0x08004040
 8001f58:	08003fb0 	.word	0x08003fb0
 8001f5c:	00000000 	.word	0x00000000

08001f60 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8001f60:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <chSchGoSleepS+0x20>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8001f62:	b430      	push	{r4, r5}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001f64:	681a      	ldr	r2, [r3, #0]
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8001f66:	6999      	ldr	r1, [r3, #24]

  tqp->p_next = tp->p_next;
 8001f68:	6814      	ldr	r4, [r2, #0]
  otp->p_state = newstate;
 8001f6a:	7708      	strb	r0, [r1, #28]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001f6c:	2501      	movs	r5, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001f6e:	6063      	str	r3, [r4, #4]
 8001f70:	7715      	strb	r5, [r2, #28]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001f72:	601c      	str	r4, [r3, #0]
  chSysSwitch(currp, otp);
 8001f74:	4610      	mov	r0, r2
}
 8001f76:	bc30      	pop	{r4, r5}
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001f78:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 8001f7a:	f7ff bcc9 	b.w	8001910 <_port_switch>
 8001f7e:	bf00      	nop
 8001f80:	20000830 	.word	0x20000830
	...

08001f90 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 8001f90:	2900      	cmp	r1, #0
 8001f92:	d03e      	beq.n	8002012 <chThdEnqueueTimeoutS+0x82>
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8001f94:	b570      	push	{r4, r5, r6, lr}

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8001f96:	4d20      	ldr	r5, [pc, #128]	; (8002018 <chThdEnqueueTimeoutS+0x88>)
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8001f98:	6843      	ldr	r3, [r0, #4]
 8001f9a:	69ac      	ldr	r4, [r5, #24]
 8001f9c:	e884 0009 	stmia.w	r4, {r0, r3}
  tp->p_prev->p_next = tp;
 8001fa0:	601c      	str	r4, [r3, #0]
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8001fa2:	1c4b      	adds	r3, r1, #1
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8001fa4:	b086      	sub	sp, #24
  tqp->p_prev = tp;
 8001fa6:	6044      	str	r4, [r0, #4]
 8001fa8:	d02c      	beq.n	8002004 <chThdEnqueueTimeoutS+0x74>
  delta = delay;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
 8001faa:	69eb      	ldr	r3, [r5, #28]

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 8001fac:	481b      	ldr	r0, [pc, #108]	; (800201c <chThdEnqueueTimeoutS+0x8c>)
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8001fae:	689a      	ldr	r2, [r3, #8]
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 8001fb0:	9405      	str	r4, [sp, #20]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8001fb2:	4291      	cmp	r1, r2

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 8001fb4:	9004      	str	r0, [sp, #16]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8001fb6:	d904      	bls.n	8001fc2 <chThdEnqueueTimeoutS+0x32>
    delta -= p->vt_delta;
    p = p->vt_next;
 8001fb8:	681b      	ldr	r3, [r3, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 8001fba:	1a89      	subs	r1, r1, r2
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	428a      	cmp	r2, r1
 8001fc0:	d3fa      	bcc.n	8001fb8 <chThdEnqueueTimeoutS+0x28>
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8001fc2:	6858      	ldr	r0, [r3, #4]
 8001fc4:	9002      	str	r0, [sp, #8]
  vtp->vt_prev->vt_next = vtp;
 8001fc6:	aa01      	add	r2, sp, #4
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 8001fc8:	9301      	str	r3, [sp, #4]
  vtp->vt_prev = vtp->vt_next->vt_prev;
  vtp->vt_prev->vt_next = vtp;
 8001fca:	6002      	str	r2, [r0, #0]
  p->vt_prev = vtp;
 8001fcc:	605a      	str	r2, [r3, #4]
  vtp->vt_delta = delta
 8001fce:	9103      	str	r1, [sp, #12]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8001fd0:	689a      	ldr	r2, [r3, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8001fd2:	4c11      	ldr	r4, [pc, #68]	; (8002018 <chThdEnqueueTimeoutS+0x88>)
  p->vt_prev = vtp;
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8001fd4:	1a51      	subs	r1, r2, r1
 8001fd6:	6099      	str	r1, [r3, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8001fd8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
    chSchGoSleepS(newstate);
 8001fdc:	2004      	movs	r0, #4
 8001fde:	626e      	str	r6, [r5, #36]	; 0x24
 8001fe0:	f7ff ffbe 	bl	8001f60 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8001fe4:	9b04      	ldr	r3, [sp, #16]
 8001fe6:	b14b      	cbz	r3, 8001ffc <chThdEnqueueTimeoutS+0x6c>
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 8001fe8:	9b01      	ldr	r3, [sp, #4]
 8001fea:	9a03      	ldr	r2, [sp, #12]
 8001fec:	6898      	ldr	r0, [r3, #8]

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
 8001fee:	9902      	ldr	r1, [sp, #8]
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 8001ff0:	4402      	add	r2, r0
 8001ff2:	609a      	str	r2, [r3, #8]

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
 8001ff4:	600b      	str	r3, [r1, #0]
  vtp->vt_next->vt_prev = vtp->vt_prev;
 8001ff6:	9b01      	ldr	r3, [sp, #4]
 8001ff8:	6059      	str	r1, [r3, #4]
  vtp->vt_func = NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 8001ffa:	6266      	str	r6, [r4, #36]	; 0x24
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 8001ffc:	69ab      	ldr	r3, [r5, #24]
 8001ffe:	6a58      	ldr	r0, [r3, #36]	; 0x24
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
}
 8002000:	b006      	add	sp, #24
 8002002:	bd70      	pop	{r4, r5, r6, pc}
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 8002004:	2004      	movs	r0, #4
 8002006:	f7ff ffab 	bl	8001f60 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
 800200a:	69ab      	ldr	r3, [r5, #24]
 800200c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800200e:	b006      	add	sp, #24
 8002010:	bd70      	pop	{r4, r5, r6, pc}
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
 8002012:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002016:	4770      	bx	lr
 8002018:	20000830 	.word	0x20000830
 800201c:	080019d1 	.word	0x080019d1

08002020 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 8002020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002024:	b083      	sub	sp, #12
 8002026:	4604      	mov	r4, r0
 8002028:	468b      	mov	fp, r1
 800202a:	4615      	mov	r5, r2
 800202c:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 800202e:	69c7      	ldr	r7, [r0, #28]
 8002030:	f04f 0820 	mov.w	r8, #32
 8002034:	f388 8811 	msr	BASEPRI, r8
  size_t w = 0;
 8002038:	2600      	movs	r6, #0
 800203a:	46b1      	mov	r9, r6
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 800203c:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800203e:	f10b 0a01 	add.w	sl, fp, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 8002042:	4620      	mov	r0, r4

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8002044:	b1fb      	cbz	r3, 8002086 <chOQWriteTimeout+0x66>
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8002046:	6962      	ldr	r2, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8002048:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 800204a:	1c51      	adds	r1, r2, #1
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 800204c:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 800204e:	6161      	str	r1, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8002050:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8002052:	f89b 3000 	ldrb.w	r3, [fp]
 8002056:	7013      	strb	r3, [r2, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8002058:	6923      	ldr	r3, [r4, #16]
 800205a:	6962      	ldr	r2, [r4, #20]
 800205c:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 800205e:	bf24      	itt	cs
 8002060:	68e3      	ldrcs	r3, [r4, #12]
 8002062:	6163      	strcs	r3, [r4, #20]
    }

    if (nfy != NULL) {
 8002064:	b107      	cbz	r7, 8002068 <chOQWriteTimeout+0x48>
      nfy(oqp);
 8002066:	47b8      	blx	r7
 8002068:	f389 8811 	msr	BASEPRI, r9
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 800206c:	3d01      	subs	r5, #1
    if (nfy != NULL) {
      nfy(oqp);
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
 800206e:	f106 0601 	add.w	r6, r6, #1
    if (--n == 0U) {
 8002072:	d012      	beq.n	800209a <chOQWriteTimeout+0x7a>
 8002074:	f388 8811 	msr	BASEPRI, r8
 8002078:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800207a:	46d3      	mov	fp, sl
 800207c:	f10b 0a01 	add.w	sl, fp, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 8002080:	4620      	mov	r0, r4

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1df      	bne.n	8002046 <chOQWriteTimeout+0x26>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 8002086:	4620      	mov	r0, r4
 8002088:	9901      	ldr	r1, [sp, #4]
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	f7ff ff80 	bl	8001f90 <chThdEnqueueTimeoutS>
 8002090:	9b00      	ldr	r3, [sp, #0]
 8002092:	2800      	cmp	r0, #0
 8002094:	d0d2      	beq.n	800203c <chOQWriteTimeout+0x1c>
 8002096:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
      return w;
    }
    chSysLock();
  }
}
 800209a:	4630      	mov	r0, r6
 800209c:	b003      	add	sp, #12
 800209e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020a2:	bf00      	nop
	...

080020b0 <writet.lto_priv.53>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 80020b0:	3030      	adds	r0, #48	; 0x30
 80020b2:	f7ff bfb5 	b.w	8002020 <chOQWriteTimeout>
 80020b6:	bf00      	nop
	...

080020c0 <write.lto_priv.47>:
 * queue-level function or macro.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 80020c0:	3030      	adds	r0, #48	; 0x30
 80020c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020c6:	f7ff bfab 	b.w	8002020 <chOQWriteTimeout>
 80020ca:	bf00      	nop
 80020cc:	0000      	movs	r0, r0
	...

080020d0 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 80020d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020d2:	4604      	mov	r4, r0
 80020d4:	460f      	mov	r7, r1
 80020d6:	4616      	mov	r6, r2
 80020d8:	2320      	movs	r3, #32
 80020da:	f383 8811 	msr	BASEPRI, r3
 80020de:	e003      	b.n	80020e8 <chOQPutTimeout+0x18>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 80020e0:	f7ff ff56 	bl	8001f90 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 80020e4:	2800      	cmp	r0, #0
 80020e6:	db19      	blt.n	800211c <chOQPutTimeout+0x4c>
 80020e8:	68a5      	ldr	r5, [r4, #8]
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 80020ea:	4620      	mov	r0, r4
 80020ec:	4631      	mov	r1, r6
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 80020ee:	2d00      	cmp	r5, #0
 80020f0:	d0f6      	beq.n	80020e0 <chOQPutTimeout+0x10>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 80020f2:	6962      	ldr	r2, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 80020f4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80020f6:	1c51      	adds	r1, r2, #1
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 80020f8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 80020fa:	6161      	str	r1, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 80020fc:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80020fe:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8002100:	6923      	ldr	r3, [r4, #16]
 8002102:	6962      	ldr	r2, [r4, #20]
 8002104:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8002106:	bf24      	itt	cs
 8002108:	68e3      	ldrcs	r3, [r4, #12]
 800210a:	6163      	strcs	r3, [r4, #20]
  }

  if (oqp->q_notify != NULL) {
 800210c:	69e3      	ldr	r3, [r4, #28]
 800210e:	b10b      	cbz	r3, 8002114 <chOQPutTimeout+0x44>
    oqp->q_notify(oqp);
 8002110:	4620      	mov	r0, r4
 8002112:	4798      	blx	r3
 8002114:	2000      	movs	r0, #0
 8002116:	f380 8811 	msr	BASEPRI, r0
  }
  chSysUnlock();

  return Q_OK;
}
 800211a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800211c:	f385 8811 	msr	BASEPRI, r5
 8002120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002122:	bf00      	nop
	...

08002130 <putt.lto_priv.51>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8002130:	3030      	adds	r0, #48	; 0x30
 8002132:	f7ff bfcd 	b.w	80020d0 <chOQPutTimeout>
 8002136:	bf00      	nop
	...

08002140 <put.lto_priv.49>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8002140:	3030      	adds	r0, #48	; 0x30
 8002142:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002146:	f7ff bfc3 	b.w	80020d0 <chOQPutTimeout>
 800214a:	bf00      	nop
 800214c:	0000      	movs	r0, r0
	...

08002150 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 8002150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002154:	4604      	mov	r4, r0
 8002156:	b083      	sub	sp, #12
 8002158:	4689      	mov	r9, r1
 800215a:	4693      	mov	fp, r2
 800215c:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 800215e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8002162:	2720      	movs	r7, #32
 8002164:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 8002168:	2600      	movs	r6, #0
 800216a:	9701      	str	r7, [sp, #4]
 800216c:	46b2      	mov	sl, r6

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    if (nfy != NULL) {
 800216e:	f1b8 0f00 	cmp.w	r8, #0
 8002172:	d005      	beq.n	8002180 <chIQReadTimeout+0x30>
      nfy(iqp);
 8002174:	4620      	mov	r0, r4
 8002176:	47c0      	blx	r8
 8002178:	e002      	b.n	8002180 <chIQReadTimeout+0x30>
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 800217a:	f7ff ff09 	bl	8001f90 <chThdEnqueueTimeoutS>
 800217e:	b9e0      	cbnz	r0, 80021ba <chIQReadTimeout+0x6a>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 8002180:	68a7      	ldr	r7, [r4, #8]
 8002182:	4620      	mov	r0, r4
 8002184:	4629      	mov	r1, r5
  while (true) {
    if (nfy != NULL) {
      nfy(iqp);
    }

    while (chIQIsEmptyI(iqp)) {
 8002186:	2f00      	cmp	r7, #0
 8002188:	d0f7      	beq.n	800217a <chIQReadTimeout+0x2a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 800218a:	69a2      	ldr	r2, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 800218c:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 800218e:	1c51      	adds	r1, r2, #1
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8002190:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 8002192:	61a1      	str	r1, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8002194:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8002196:	7813      	ldrb	r3, [r2, #0]
 8002198:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 800219c:	6923      	ldr	r3, [r4, #16]
 800219e:	69a2      	ldr	r2, [r4, #24]
 80021a0:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 80021a2:	bf24      	itt	cs
 80021a4:	68e3      	ldrcs	r3, [r4, #12]
 80021a6:	61a3      	strcs	r3, [r4, #24]
 80021a8:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
 80021ac:	3601      	adds	r6, #1
    if (--n == 0U) {
 80021ae:	45b3      	cmp	fp, r6
 80021b0:	d005      	beq.n	80021be <chIQReadTimeout+0x6e>
 80021b2:	9b01      	ldr	r3, [sp, #4]
 80021b4:	f383 8811 	msr	BASEPRI, r3
 80021b8:	e7d9      	b.n	800216e <chIQReadTimeout+0x1e>
 80021ba:	f387 8811 	msr	BASEPRI, r7
      return r;
    }

    chSysLock();
  }
}
 80021be:	4630      	mov	r0, r6
 80021c0:	b003      	add	sp, #12
 80021c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021c6:	bf00      	nop
	...

080021d0 <readt.lto_priv.54>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 80021d0:	300c      	adds	r0, #12
 80021d2:	f7ff bfbd 	b.w	8002150 <chIQReadTimeout>
 80021d6:	bf00      	nop
	...

080021e0 <read.lto_priv.48>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 80021e0:	300c      	adds	r0, #12
 80021e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021e6:	f7ff bfb3 	b.w	8002150 <chIQReadTimeout>
 80021ea:	bf00      	nop
 80021ec:	0000      	movs	r0, r0
	...

080021f0 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 80021f0:	b570      	push	{r4, r5, r6, lr}
 80021f2:	2320      	movs	r3, #32
 80021f4:	460e      	mov	r6, r1
 80021f6:	4604      	mov	r4, r0
 80021f8:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify != NULL) {
 80021fc:	69c3      	ldr	r3, [r0, #28]
 80021fe:	b12b      	cbz	r3, 800220c <chIQGetTimeout+0x1c>
    iqp->q_notify(iqp);
 8002200:	4798      	blx	r3
 8002202:	e003      	b.n	800220c <chIQGetTimeout+0x1c>
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8002204:	f7ff fec4 	bl	8001f90 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8002208:	2800      	cmp	r0, #0
 800220a:	db15      	blt.n	8002238 <chIQGetTimeout+0x48>
 800220c:	68a5      	ldr	r5, [r4, #8]
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800220e:	4620      	mov	r0, r4
 8002210:	4631      	mov	r1, r6
  chSysLock();
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
 8002212:	2d00      	cmp	r5, #0
 8002214:	d0f6      	beq.n	8002204 <chIQGetTimeout+0x14>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8002216:	69a1      	ldr	r1, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8002218:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 800221a:	6925      	ldr	r5, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800221c:	1c4a      	adds	r2, r1, #1
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 800221e:	3b01      	subs	r3, #1
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 8002220:	42aa      	cmp	r2, r5
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8002222:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8002224:	61a2      	str	r2, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8002226:	bf28      	it	cs
 8002228:	68e3      	ldrcs	r3, [r4, #12]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800222a:	7808      	ldrb	r0, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 800222c:	bf28      	it	cs
 800222e:	61a3      	strcs	r3, [r4, #24]
 8002230:	2300      	movs	r3, #0
 8002232:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return (msg_t)b;
}
 8002236:	bd70      	pop	{r4, r5, r6, pc}
 8002238:	f385 8811 	msr	BASEPRI, r5
 800223c:	bd70      	pop	{r4, r5, r6, pc}
 800223e:	bf00      	nop

08002240 <gett.lto_priv.52>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8002240:	300c      	adds	r0, #12
 8002242:	f7ff bfd5 	b.w	80021f0 <chIQGetTimeout>
 8002246:	bf00      	nop
	...

08002250 <get.lto_priv.50>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8002250:	300c      	adds	r0, #12
 8002252:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002256:	f7ff bfcb 	b.w	80021f0 <chIQGetTimeout>
 800225a:	bf00      	nop
 800225c:	0000      	movs	r0, r0
	...

08002260 <adcObjectInit>:
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
  adcp->config   = NULL;
 8002260:	2300      	movs	r3, #0
 */
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
 8002262:	f100 0218 	add.w	r2, r0, #24
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
 8002266:	2101      	movs	r1, #1
 8002268:	7001      	strb	r1, [r0, #0]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800226a:	6182      	str	r2, [r0, #24]
  tqp->p_prev = (thread_t *)tqp;
 800226c:	61c2      	str	r2, [r0, #28]
  adcp->config   = NULL;
 800226e:	6043      	str	r3, [r0, #4]
  adcp->samples  = NULL;
 8002270:	6083      	str	r3, [r0, #8]
  adcp->depth    = 0;
 8002272:	60c3      	str	r3, [r0, #12]
  adcp->grpp     = NULL;
 8002274:	6103      	str	r3, [r0, #16]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 8002276:	6143      	str	r3, [r0, #20]
  mp->m_owner = NULL;
 8002278:	6203      	str	r3, [r0, #32]
 800227a:	4770      	bx	lr
 800227c:	0000      	movs	r0, r0
	...

08002280 <_port_irq_epilogue>:
 8002280:	2320      	movs	r3, #32
 8002282:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002286:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <_port_irq_epilogue+0x50>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800228e:	d102      	bne.n	8002296 <_port_irq_epilogue+0x16>
 8002290:	f383 8811 	msr	BASEPRI, r3
 8002294:	4770      	bx	lr
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  uint32_t result;

  /* Empty asm statement works as a scheduling barrier */
  __ASM volatile ("");
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 8002296:	eef1 3a10 	vmrs	r3, fpscr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800229a:	f3ef 8309 	mrs	r3, PSP
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 800229e:	4a0d      	ldr	r2, [pc, #52]	; (80022d4 <_port_irq_epilogue+0x54>)
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 80022a0:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 80022a4:	68d2      	ldr	r2, [r2, #12]
 80022a6:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 80022aa:	f843 1c4c 	str.w	r1, [r3, #-76]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 80022ae:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80022b2:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 80022b6:	4a08      	ldr	r2, [pc, #32]	; (80022d8 <_port_irq_epilogue+0x58>)
 80022b8:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 80022ba:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 80022bc:	6889      	ldr	r1, [r1, #8]
 80022be:	6892      	ldr	r2, [r2, #8]
 80022c0:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 80022c2:	bf8c      	ite	hi
 80022c4:	4a05      	ldrhi	r2, [pc, #20]	; (80022dc <_port_irq_epilogue+0x5c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 80022c6:	4a06      	ldrls	r2, [pc, #24]	; (80022e0 <_port_irq_epilogue+0x60>)
 80022c8:	f843 2c50 	str.w	r2, [r3, #-80]
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	e000ed00 	.word	0xe000ed00
 80022d4:	e000ef30 	.word	0xe000ef30
 80022d8:	20000830 	.word	0x20000830
 80022dc:	08001939 	.word	0x08001939
 80022e0:	0800193c 	.word	0x0800193c
	...

080022f0 <SysTick_Handler>:
 * @brief   System Timer vector.
 * @details This interrupt is used for system tick in periodic mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(SysTick_Handler) {
 80022f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80022f2:	2720      	movs	r7, #32
 80022f4:	f387 8811 	msr	BASEPRI, r7
    /* Decrement remaining quantum.*/
    currp->p_preempt--;
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->p_time++;
 80022f8:	4d13      	ldr	r5, [pc, #76]	; (8002348 <SysTick_Handler+0x58>)
 80022fa:	69aa      	ldr	r2, [r5, #24]
 80022fc:	6a13      	ldr	r3, [r2, #32]

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80022fe:	462e      	mov	r6, r5
 8002300:	3301      	adds	r3, #1
 8002302:	6213      	str	r3, [r2, #32]
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
 8002304:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8002306:	f856 3f1c 	ldr.w	r3, [r6, #28]!
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
 800230a:	3201      	adds	r2, #1
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800230c:	42b3      	cmp	r3, r6
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
 800230e:	62aa      	str	r2, [r5, #40]	; 0x28
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8002310:	d012      	beq.n	8002338 <SysTick_Handler+0x48>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.vt_next->vt_delta;
 8002312:	689c      	ldr	r4, [r3, #8]
 8002314:	3c01      	subs	r4, #1
 8002316:	609c      	str	r4, [r3, #8]
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
 8002318:	b974      	cbnz	r4, 8002338 <SysTick_Handler+0x48>
      vtfunc_t fn;

      vtp = ch.vtlist.vt_next;
      fn = vtp->vt_func;
      vtp->vt_func = NULL;
      vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800231a:	681a      	ldr	r2, [r3, #0]
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
      virtual_timer_t *vtp;
      vtfunc_t fn;

      vtp = ch.vtlist.vt_next;
      fn = vtp->vt_func;
 800231c:	68d9      	ldr	r1, [r3, #12]
      vtp->vt_func = NULL;
 800231e:	60dc      	str	r4, [r3, #12]
      vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8002320:	6056      	str	r6, [r2, #4]
      ch.vtlist.vt_next = vtp->vt_next;
 8002322:	61ea      	str	r2, [r5, #28]
 8002324:	f384 8811 	msr	BASEPRI, r4
      chSysUnlockFromISR();
      fn(vtp->vt_par);
 8002328:	6918      	ldr	r0, [r3, #16]
 800232a:	4788      	blx	r1
 800232c:	f387 8811 	msr	BASEPRI, r7
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.vt_next->vt_delta;
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
 8002330:	69eb      	ldr	r3, [r5, #28]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	2a00      	cmp	r2, #0
 8002336:	d0f0      	beq.n	800231a <SysTick_Handler+0x2a>
 8002338:	2300      	movs	r3, #0
 800233a:	f383 8811 	msr	BASEPRI, r3
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
 800233e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
 8002342:	f7ff bf9d 	b.w	8002280 <_port_irq_epilogue>
 8002346:	bf00      	nop
 8002348:	20000830 	.word	0x20000830
 800234c:	00000000 	.word	0x00000000

08002350 <Vector130>:
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM5);
 8002350:	4b09      	ldr	r3, [pc, #36]	; (8002378 <Vector130+0x28>)
 8002352:	6819      	ldr	r1, [r3, #0]
 8002354:	f3c1 4103 	ubfx	r1, r1, #16, #4
 8002358:	b159      	cbz	r1, 8002372 <Vector130+0x22>
 800235a:	4808      	ldr	r0, [pc, #32]	; (800237c <Vector130+0x2c>)
 800235c:	6d82      	ldr	r2, [r0, #88]	; 0x58
/**
 * @brief   DMA2 stream 5 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 800235e:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM5);
 8002360:	040c      	lsls	r4, r1, #16
 8002362:	605c      	str	r4, [r3, #4]
 8002364:	b10a      	cbz	r2, 800236a <Vector130+0x1a>
 8002366:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8002368:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800236a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM5);

  OSAL_IRQ_EPILOGUE();
 800236e:	f7ff bf87 	b.w	8002280 <_port_irq_epilogue>
 8002372:	f7ff bf85 	b.w	8002280 <_port_irq_epilogue>
 8002376:	bf00      	nop
 8002378:	40020400 	.word	0x40020400
 800237c:	20000b54 	.word	0x20000b54

08002380 <Vector12C>:
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM4);
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <Vector12C+0x28>)
 8002382:	6819      	ldr	r1, [r3, #0]
 8002384:	f3c1 3103 	ubfx	r1, r1, #12, #4
 8002388:	b159      	cbz	r1, 80023a2 <Vector12C+0x22>
 800238a:	4808      	ldr	r0, [pc, #32]	; (80023ac <Vector12C+0x2c>)
 800238c:	6d02      	ldr	r2, [r0, #80]	; 0x50
/**
 * @brief   DMA2 stream 4 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 800238e:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM4);
 8002390:	030c      	lsls	r4, r1, #12
 8002392:	605c      	str	r4, [r3, #4]
 8002394:	b10a      	cbz	r2, 800239a <Vector12C+0x1a>
 8002396:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8002398:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800239a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM4);

  OSAL_IRQ_EPILOGUE();
 800239e:	f7ff bf6f 	b.w	8002280 <_port_irq_epilogue>
 80023a2:	f7ff bf6d 	b.w	8002280 <_port_irq_epilogue>
 80023a6:	bf00      	nop
 80023a8:	40020400 	.word	0x40020400
 80023ac:	20000b54 	.word	0x20000b54

080023b0 <Vector128>:
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM3);
 80023b0:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <Vector128+0x28>)
 80023b2:	6819      	ldr	r1, [r3, #0]
 80023b4:	f3c1 2103 	ubfx	r1, r1, #8, #4
 80023b8:	b159      	cbz	r1, 80023d2 <Vector128+0x22>
 80023ba:	4808      	ldr	r0, [pc, #32]	; (80023dc <Vector128+0x2c>)
 80023bc:	6c82      	ldr	r2, [r0, #72]	; 0x48
/**
 * @brief   DMA2 stream 3 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 80023be:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM3);
 80023c0:	020c      	lsls	r4, r1, #8
 80023c2:	605c      	str	r4, [r3, #4]
 80023c4:	b10a      	cbz	r2, 80023ca <Vector128+0x1a>
 80023c6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80023c8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80023ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM3);

  OSAL_IRQ_EPILOGUE();
 80023ce:	f7ff bf57 	b.w	8002280 <_port_irq_epilogue>
 80023d2:	f7ff bf55 	b.w	8002280 <_port_irq_epilogue>
 80023d6:	bf00      	nop
 80023d8:	40020400 	.word	0x40020400
 80023dc:	20000b54 	.word	0x20000b54

080023e0 <Vector124>:
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM2);
 80023e0:	4b09      	ldr	r3, [pc, #36]	; (8002408 <Vector124+0x28>)
 80023e2:	6819      	ldr	r1, [r3, #0]
 80023e4:	f3c1 1103 	ubfx	r1, r1, #4, #4
 80023e8:	b159      	cbz	r1, 8002402 <Vector124+0x22>
 80023ea:	4808      	ldr	r0, [pc, #32]	; (800240c <Vector124+0x2c>)
 80023ec:	6c02      	ldr	r2, [r0, #64]	; 0x40
/**
 * @brief   DMA2 stream 2 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 80023ee:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM2);
 80023f0:	010c      	lsls	r4, r1, #4
 80023f2:	605c      	str	r4, [r3, #4]
 80023f4:	b10a      	cbz	r2, 80023fa <Vector124+0x1a>
 80023f6:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80023f8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80023fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM2);

  OSAL_IRQ_EPILOGUE();
 80023fe:	f7ff bf3f 	b.w	8002280 <_port_irq_epilogue>
 8002402:	f7ff bf3d 	b.w	8002280 <_port_irq_epilogue>
 8002406:	bf00      	nop
 8002408:	40020400 	.word	0x40020400
 800240c:	20000b54 	.word	0x20000b54

08002410 <Vector120>:
/**
 * @brief   DMA2 stream 1 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8002410:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM1);
 8002412:	4b07      	ldr	r3, [pc, #28]	; (8002430 <Vector120+0x20>)
 8002414:	6819      	ldr	r1, [r3, #0]
 8002416:	f011 010f 	ands.w	r1, r1, #15
 800241a:	d005      	beq.n	8002428 <Vector120+0x18>
 800241c:	4a05      	ldr	r2, [pc, #20]	; (8002434 <Vector120+0x24>)
 800241e:	6059      	str	r1, [r3, #4]
 8002420:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002422:	b10b      	cbz	r3, 8002428 <Vector120+0x18>
 8002424:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 8002426:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8002428:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM1);

  OSAL_IRQ_EPILOGUE();
 800242c:	f7ff bf28 	b.w	8002280 <_port_irq_epilogue>
 8002430:	40020400 	.word	0x40020400
 8002434:	20000b54 	.word	0x20000b54
	...

08002440 <Vector84>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);
 8002440:	4b09      	ldr	r3, [pc, #36]	; (8002468 <Vector84+0x28>)
 8002442:	6819      	ldr	r1, [r3, #0]
 8002444:	f3c1 6103 	ubfx	r1, r1, #24, #4
 8002448:	b159      	cbz	r1, 8002462 <Vector84+0x22>
 800244a:	4808      	ldr	r0, [pc, #32]	; (800246c <Vector84+0x2c>)
 800244c:	6b02      	ldr	r2, [r0, #48]	; 0x30
/**
 * @brief   DMA1 stream 7 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 800244e:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);
 8002450:	060c      	lsls	r4, r1, #24
 8002452:	605c      	str	r4, [r3, #4]
 8002454:	b10a      	cbz	r2, 800245a <Vector84+0x1a>
 8002456:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002458:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800245a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);

  OSAL_IRQ_EPILOGUE();
 800245e:	f7ff bf0f 	b.w	8002280 <_port_irq_epilogue>
 8002462:	f7ff bf0d 	b.w	8002280 <_port_irq_epilogue>
 8002466:	bf00      	nop
 8002468:	40020000 	.word	0x40020000
 800246c:	20000b54 	.word	0x20000b54

08002470 <Vector80>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM6);
 8002470:	4b09      	ldr	r3, [pc, #36]	; (8002498 <Vector80+0x28>)
 8002472:	6819      	ldr	r1, [r3, #0]
 8002474:	f3c1 5103 	ubfx	r1, r1, #20, #4
 8002478:	b159      	cbz	r1, 8002492 <Vector80+0x22>
 800247a:	4808      	ldr	r0, [pc, #32]	; (800249c <Vector80+0x2c>)
 800247c:	6a82      	ldr	r2, [r0, #40]	; 0x28
/**
 * @brief   DMA1 stream 6 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 800247e:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM6);
 8002480:	050c      	lsls	r4, r1, #20
 8002482:	605c      	str	r4, [r3, #4]
 8002484:	b10a      	cbz	r2, 800248a <Vector80+0x1a>
 8002486:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8002488:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800248a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM6);

  OSAL_IRQ_EPILOGUE();
 800248e:	f7ff bef7 	b.w	8002280 <_port_irq_epilogue>
 8002492:	f7ff bef5 	b.w	8002280 <_port_irq_epilogue>
 8002496:	bf00      	nop
 8002498:	40020000 	.word	0x40020000
 800249c:	20000b54 	.word	0x20000b54

080024a0 <Vector7C>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM5);
 80024a0:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <Vector7C+0x28>)
 80024a2:	6819      	ldr	r1, [r3, #0]
 80024a4:	f3c1 4103 	ubfx	r1, r1, #16, #4
 80024a8:	b159      	cbz	r1, 80024c2 <Vector7C+0x22>
 80024aa:	4808      	ldr	r0, [pc, #32]	; (80024cc <Vector7C+0x2c>)
 80024ac:	6a02      	ldr	r2, [r0, #32]
/**
 * @brief   DMA1 stream 5 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 80024ae:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM5);
 80024b0:	040c      	lsls	r4, r1, #16
 80024b2:	605c      	str	r4, [r3, #4]
 80024b4:	b10a      	cbz	r2, 80024ba <Vector7C+0x1a>
 80024b6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80024b8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80024ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM5);

  OSAL_IRQ_EPILOGUE();
 80024be:	f7ff bedf 	b.w	8002280 <_port_irq_epilogue>
 80024c2:	f7ff bedd 	b.w	8002280 <_port_irq_epilogue>
 80024c6:	bf00      	nop
 80024c8:	40020000 	.word	0x40020000
 80024cc:	20000b54 	.word	0x20000b54

080024d0 <Vector78>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM4);
 80024d0:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <Vector78+0x28>)
 80024d2:	6819      	ldr	r1, [r3, #0]
 80024d4:	f3c1 3103 	ubfx	r1, r1, #12, #4
 80024d8:	b159      	cbz	r1, 80024f2 <Vector78+0x22>
 80024da:	4808      	ldr	r0, [pc, #32]	; (80024fc <Vector78+0x2c>)
 80024dc:	6982      	ldr	r2, [r0, #24]
/**
 * @brief   DMA1 stream 4 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 80024de:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM4);
 80024e0:	030c      	lsls	r4, r1, #12
 80024e2:	605c      	str	r4, [r3, #4]
 80024e4:	b10a      	cbz	r2, 80024ea <Vector78+0x1a>
 80024e6:	69c0      	ldr	r0, [r0, #28]
 80024e8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80024ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM4);

  OSAL_IRQ_EPILOGUE();
 80024ee:	f7ff bec7 	b.w	8002280 <_port_irq_epilogue>
 80024f2:	f7ff bec5 	b.w	8002280 <_port_irq_epilogue>
 80024f6:	bf00      	nop
 80024f8:	40020000 	.word	0x40020000
 80024fc:	20000b54 	.word	0x20000b54

08002500 <Vector74>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8002500:	4b09      	ldr	r3, [pc, #36]	; (8002528 <Vector74+0x28>)
 8002502:	6819      	ldr	r1, [r3, #0]
 8002504:	f3c1 2103 	ubfx	r1, r1, #8, #4
 8002508:	b159      	cbz	r1, 8002522 <Vector74+0x22>
 800250a:	4808      	ldr	r0, [pc, #32]	; (800252c <Vector74+0x2c>)
 800250c:	6902      	ldr	r2, [r0, #16]
/**
 * @brief   DMA1 stream 3 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 800250e:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8002510:	020c      	lsls	r4, r1, #8
 8002512:	605c      	str	r4, [r3, #4]
 8002514:	b10a      	cbz	r2, 800251a <Vector74+0x1a>
 8002516:	6940      	ldr	r0, [r0, #20]
 8002518:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800251a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM3);

  OSAL_IRQ_EPILOGUE();
 800251e:	f7ff beaf 	b.w	8002280 <_port_irq_epilogue>
 8002522:	f7ff bead 	b.w	8002280 <_port_irq_epilogue>
 8002526:	bf00      	nop
 8002528:	40020000 	.word	0x40020000
 800252c:	20000b54 	.word	0x20000b54

08002530 <Vector70>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8002530:	4b09      	ldr	r3, [pc, #36]	; (8002558 <Vector70+0x28>)
 8002532:	6819      	ldr	r1, [r3, #0]
 8002534:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8002538:	b159      	cbz	r1, 8002552 <Vector70+0x22>
 800253a:	4808      	ldr	r0, [pc, #32]	; (800255c <Vector70+0x2c>)
 800253c:	6882      	ldr	r2, [r0, #8]
/**
 * @brief   DMA1 stream 2 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 800253e:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8002540:	010c      	lsls	r4, r1, #4
 8002542:	605c      	str	r4, [r3, #4]
 8002544:	b10a      	cbz	r2, 800254a <Vector70+0x1a>
 8002546:	68c0      	ldr	r0, [r0, #12]
 8002548:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800254a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM2);

  OSAL_IRQ_EPILOGUE();
 800254e:	f7ff be97 	b.w	8002280 <_port_irq_epilogue>
 8002552:	f7ff be95 	b.w	8002280 <_port_irq_epilogue>
 8002556:	bf00      	nop
 8002558:	40020000 	.word	0x40020000
 800255c:	20000b54 	.word	0x20000b54

08002560 <Vector6C>:
/**
 * @brief   DMA1 stream 1 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8002560:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM1);
 8002562:	4b07      	ldr	r3, [pc, #28]	; (8002580 <Vector6C+0x20>)
 8002564:	6819      	ldr	r1, [r3, #0]
 8002566:	f011 010f 	ands.w	r1, r1, #15
 800256a:	d005      	beq.n	8002578 <Vector6C+0x18>
 800256c:	4a05      	ldr	r2, [pc, #20]	; (8002584 <Vector6C+0x24>)
 800256e:	6059      	str	r1, [r3, #4]
 8002570:	6813      	ldr	r3, [r2, #0]
 8002572:	b10b      	cbz	r3, 8002578 <Vector6C+0x18>
 8002574:	6850      	ldr	r0, [r2, #4]
 8002576:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8002578:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM1);

  OSAL_IRQ_EPILOGUE();
 800257c:	f7ff be80 	b.w	8002280 <_port_irq_epilogue>
 8002580:	40020000 	.word	0x40020000
 8002584:	20000b54 	.word	0x20000b54
	...

08002590 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8002590:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8002592:	490f      	ldr	r1, [pc, #60]	; (80025d0 <chTMStopMeasurementX+0x40>)
 8002594:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8002596:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8002598:	b4f0      	push	{r4, r5, r6, r7}

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800259a:	6f8f      	ldr	r7, [r1, #120]	; 0x78
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 800259c:	6841      	ldr	r1, [r0, #4]

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800259e:	68c6      	ldr	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 80025a0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	1bdb      	subs	r3, r3, r7
  tmp->cumulative += (rttime_t)tmp->last;
 80025a8:	18e4      	adds	r4, r4, r3
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
 80025aa:	6802      	ldr	r2, [r0, #0]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 80025ac:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 80025ae:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 80025b2:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 80025b4:	f106 0601 	add.w	r6, r6, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 80025b8:	bf88      	it	hi
 80025ba:	6043      	strhi	r3, [r0, #4]
  }
  if (tmp->last < tmp->best) {
 80025bc:	4293      	cmp	r3, r2

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 80025be:	60c6      	str	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 80025c0:	e9c0 4504 	strd	r4, r5, [r0, #16]
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
    tmp->best = tmp->last;
 80025c4:	bf38      	it	cc
 80025c6:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 80025c8:	bcf0      	pop	{r4, r5, r6, r7}
 80025ca:	4770      	bx	lr
 80025cc:	e0001000 	.word	0xe0001000
 80025d0:	20000830 	.word	0x20000830
	...

080025e0 <chSchDoReschedule>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 80025e0:	4a0d      	ldr	r2, [pc, #52]	; (8002618 <chSchDoReschedule+0x38>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 80025e2:	6810      	ldr	r0, [r2, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 80025e4:	b470      	push	{r4, r5, r6}

  tqp->p_next = tp->p_next;
 80025e6:	6803      	ldr	r3, [r0, #0]
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 80025e8:	6994      	ldr	r4, [r2, #24]
 80025ea:	6013      	str	r3, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80025ec:	2601      	movs	r6, #1

  otp->p_state = CH_STATE_READY;
 80025ee:	2500      	movs	r5, #0
 80025f0:	68a1      	ldr	r1, [r4, #8]
  tqp->p_next->p_prev = (thread_t *)tqp;
 80025f2:	605a      	str	r2, [r3, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80025f4:	7706      	strb	r6, [r0, #28]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 80025f6:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 80025f8:	7725      	strb	r5, [r4, #28]
 80025fa:	e000      	b.n	80025fe <chSchDoReschedule+0x1e>
 80025fc:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	428a      	cmp	r2, r1
 8002602:	d8fb      	bhi.n	80025fc <chSchDoReschedule+0x1c>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 8002608:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 800260a:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
 800260c:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 800260e:	605c      	str	r4, [r3, #4]
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */
}
 8002610:	bc70      	pop	{r4, r5, r6}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8002612:	f7ff b97d 	b.w	8001910 <_port_switch>
 8002616:	bf00      	nop
 8002618:	20000830 	.word	0x20000830
 800261c:	00000000 	.word	0x00000000

08002620 <chSchReadyI>:
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8002620:	2200      	movs	r2, #0
 8002622:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8002624:	4b08      	ldr	r3, [pc, #32]	; (8002648 <chSchReadyI+0x28>)
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8002626:	b410      	push	{r4}
 8002628:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800262a:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800262c:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	428a      	cmp	r2, r1
 8002632:	d2fb      	bcs.n	800262c <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8002638:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 800263a:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800263c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800263e:	605c      	str	r4, [r3, #4]

  return tp;
}
 8002640:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	20000830 	.word	0x20000830
 800264c:	00000000 	.word	0x00000000

08002650 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8002650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 8002652:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8002654:	42a0      	cmp	r0, r4
 8002656:	d021      	beq.n	800269c <chEvtBroadcastFlagsI+0x4c>
 8002658:	460e      	mov	r6, r1
 800265a:	4607      	mov	r7, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 800265c:	2500      	movs	r5, #0
 800265e:	e002      	b.n	8002666 <chEvtBroadcastFlagsI+0x16>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
    }
    elp = elp->el_next;
 8002660:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8002662:	42a7      	cmp	r7, r4
 8002664:	d01a      	beq.n	800269c <chEvtBroadcastFlagsI+0x4c>
  /*lint -restore*/
    elp->el_flags |= flags;
 8002666:	68e3      	ldr	r3, [r4, #12]
 8002668:	4333      	orrs	r3, r6
 800266a:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 800266c:	b116      	cbz	r6, 8002674 <chEvtBroadcastFlagsI+0x24>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 800266e:	6922      	ldr	r2, [r4, #16]
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->el_flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8002670:	4213      	tst	r3, r2
 8002672:	d0f5      	beq.n	8002660 <chEvtBroadcastFlagsI+0x10>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 8002674:	6860      	ldr	r0, [r4, #4]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8002676:	68a3      	ldr	r3, [r4, #8]
 8002678:	6b81      	ldr	r1, [r0, #56]	; 0x38
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800267a:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 800267c:	430b      	orrs	r3, r1
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800267e:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8002680:	6383      	str	r3, [r0, #56]	; 0x38
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8002682:	d00c      	beq.n	800269e <chEvtBroadcastFlagsI+0x4e>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8002684:	2a0b      	cmp	r2, #11
 8002686:	d1eb      	bne.n	8002660 <chEvtBroadcastFlagsI+0x10>
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 8002688:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800268a:	4013      	ands	r3, r2

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 800268c:	429a      	cmp	r2, r3
 800268e:	d1e7      	bne.n	8002660 <chEvtBroadcastFlagsI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 8002690:	6245      	str	r5, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8002692:	f7ff ffc5 	bl	8002620 <chSchReadyI>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
    }
    elp = elp->el_next;
 8002696:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8002698:	42a7      	cmp	r7, r4
 800269a:	d1e4      	bne.n	8002666 <chEvtBroadcastFlagsI+0x16>
 800269c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 800269e:	6a42      	ldr	r2, [r0, #36]	; 0x24
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80026a0:	4213      	tst	r3, r2
 80026a2:	d0dd      	beq.n	8002660 <chEvtBroadcastFlagsI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 80026a4:	6245      	str	r5, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 80026a6:	f7ff ffbb 	bl	8002620 <chSchReadyI>
 80026aa:	e7f4      	b.n	8002696 <chEvtBroadcastFlagsI+0x46>
 80026ac:	0000      	movs	r0, r0
	...

080026b0 <chThdResumeI>:
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 80026b0:	6803      	ldr	r3, [r0, #0]
 80026b2:	b12b      	cbz	r3, 80026c0 <chThdResumeI+0x10>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 80026b4:	2200      	movs	r2, #0
 80026b6:	6002      	str	r2, [r0, #0]
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 80026b8:	4618      	mov	r0, r3

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 80026ba:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 80026bc:	f7ff bfb0 	b.w	8002620 <chSchReadyI>
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
	...

080026d0 <adc_lld_serve_interrupt.lto_priv.55>:
 */
static void adc_lld_serve_interrupt(ADCDriver *adcp, uint32_t isr) {

  /* It could be a spurious interrupt caused by overflows after DMA disabling,
     just ignore it in this case.*/
  if (adcp->grpp != NULL) {
 80026d0:	6903      	ldr	r3, [r0, #16]
 * @brief   ADC ISR service routine.
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 * @param[in] isr       content of the ISR register
 */
static void adc_lld_serve_interrupt(ADCDriver *adcp, uint32_t isr) {
 80026d2:	b570      	push	{r4, r5, r6, lr}
 80026d4:	4604      	mov	r4, r0

  /* It could be a spurious interrupt caused by overflows after DMA disabling,
     just ignore it in this case.*/
  if (adcp->grpp != NULL) {
 80026d6:	b143      	cbz	r3, 80026ea <adc_lld_serve_interrupt.lto_priv.55+0x1a>
    /* Note, an overflow may occur after the conversion ended before the driver
       is able to stop the ADC, this is why the DMA channel is checked too.*/
    if ((isr & ADC_ISR_OVR) &&
 80026d8:	06ce      	lsls	r6, r1, #27
 80026da:	460d      	mov	r5, r1
 80026dc:	d406      	bmi.n	80026ec <adc_lld_serve_interrupt.lto_priv.55+0x1c>
        (dmaStreamGetTransactionSize(adcp->dmastp) > 0)) {
      /* ADC overflow condition, this could happen only if the DMA is unable
         to read data fast enough.*/
      _adc_isr_error_code(adcp, ADC_ERR_OVERFLOW);
    }
    if (isr & ADC_ISR_AWD1) {
 80026de:	0629      	lsls	r1, r5, #24
 80026e0:	d427      	bmi.n	8002732 <adc_lld_serve_interrupt.lto_priv.55+0x62>
      /* Analog watchdog error.*/
      _adc_isr_error_code(adcp, ADC_ERR_AWD1);
    }
    if (isr & ADC_ISR_AWD2) {
 80026e2:	05ea      	lsls	r2, r5, #23
 80026e4:	d444      	bmi.n	8002770 <adc_lld_serve_interrupt.lto_priv.55+0xa0>
      /* Analog watchdog error.*/
      _adc_isr_error_code(adcp, ADC_ERR_AWD2);
    }
    if (isr & ADC_ISR_AWD3) {
 80026e6:	05ab      	lsls	r3, r5, #22
 80026e8:	d461      	bmi.n	80027ae <adc_lld_serve_interrupt.lto_priv.55+0xde>
 80026ea:	bd70      	pop	{r4, r5, r6, pc}
     just ignore it in this case.*/
  if (adcp->grpp != NULL) {
    /* Note, an overflow may occur after the conversion ended before the driver
       is able to stop the ADC, this is why the DMA channel is checked too.*/
    if ((isr & ADC_ISR_OVR) &&
        (dmaStreamGetTransactionSize(adcp->dmastp) > 0)) {
 80026ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
  /* It could be a spurious interrupt caused by overflows after DMA disabling,
     just ignore it in this case.*/
  if (adcp->grpp != NULL) {
    /* Note, an overflow may occur after the conversion ended before the driver
       is able to stop the ADC, this is why the DMA channel is checked too.*/
    if ((isr & ADC_ISR_OVR) &&
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f3      	beq.n	80026de <adc_lld_serve_interrupt.lto_priv.55+0xe>
        (dmaStreamGetTransactionSize(adcp->dmastp) > 0)) {
      /* ADC overflow condition, this could happen only if the DMA is unable
         to read data fast enough.*/
      _adc_isr_error_code(adcp, ADC_ERR_OVERFLOW);
 80026f6:	f001 fb9b 	bl	8003e30 <adc_lld_stop_conversion>
 80026fa:	6923      	ldr	r3, [r4, #16]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	b14b      	cbz	r3, 8002714 <adc_lld_serve_interrupt.lto_priv.55+0x44>
 8002700:	2205      	movs	r2, #5
 8002702:	7022      	strb	r2, [r4, #0]
 8002704:	4620      	mov	r0, r4
 8002706:	2101      	movs	r1, #1
 8002708:	4798      	blx	r3
 800270a:	7823      	ldrb	r3, [r4, #0]
 800270c:	2b05      	cmp	r3, #5
 800270e:	bf04      	itt	eq
 8002710:	2302      	moveq	r3, #2
 8002712:	7023      	strbeq	r3, [r4, #0]
 8002714:	2600      	movs	r6, #0
 8002716:	6126      	str	r6, [r4, #16]
 8002718:	2320      	movs	r3, #32
 800271a:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 800271e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002722:	f104 0014 	add.w	r0, r4, #20
 8002726:	f7ff ffc3 	bl	80026b0 <chThdResumeI>
 800272a:	f386 8811 	msr	BASEPRI, r6
    }
    if (isr & ADC_ISR_AWD1) {
 800272e:	0629      	lsls	r1, r5, #24
 8002730:	d5d7      	bpl.n	80026e2 <adc_lld_serve_interrupt.lto_priv.55+0x12>
      /* Analog watchdog error.*/
      _adc_isr_error_code(adcp, ADC_ERR_AWD1);
 8002732:	4620      	mov	r0, r4
 8002734:	f001 fb7c 	bl	8003e30 <adc_lld_stop_conversion>
 8002738:	6923      	ldr	r3, [r4, #16]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	b14b      	cbz	r3, 8002752 <adc_lld_serve_interrupt.lto_priv.55+0x82>
 800273e:	2205      	movs	r2, #5
 8002740:	7022      	strb	r2, [r4, #0]
 8002742:	4620      	mov	r0, r4
 8002744:	2102      	movs	r1, #2
 8002746:	4798      	blx	r3
 8002748:	7823      	ldrb	r3, [r4, #0]
 800274a:	2b05      	cmp	r3, #5
 800274c:	bf04      	itt	eq
 800274e:	2302      	moveq	r3, #2
 8002750:	7023      	strbeq	r3, [r4, #0]
 8002752:	2600      	movs	r6, #0
 8002754:	6126      	str	r6, [r4, #16]
 8002756:	2320      	movs	r3, #32
 8002758:	f383 8811 	msr	BASEPRI, r3
 800275c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002760:	f104 0014 	add.w	r0, r4, #20
 8002764:	f7ff ffa4 	bl	80026b0 <chThdResumeI>
 8002768:	f386 8811 	msr	BASEPRI, r6
    }
    if (isr & ADC_ISR_AWD2) {
 800276c:	05ea      	lsls	r2, r5, #23
 800276e:	d5ba      	bpl.n	80026e6 <adc_lld_serve_interrupt.lto_priv.55+0x16>
      /* Analog watchdog error.*/
      _adc_isr_error_code(adcp, ADC_ERR_AWD2);
 8002770:	4620      	mov	r0, r4
 8002772:	f001 fb5d 	bl	8003e30 <adc_lld_stop_conversion>
 8002776:	6923      	ldr	r3, [r4, #16]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	b14b      	cbz	r3, 8002790 <adc_lld_serve_interrupt.lto_priv.55+0xc0>
 800277c:	2205      	movs	r2, #5
 800277e:	7022      	strb	r2, [r4, #0]
 8002780:	4620      	mov	r0, r4
 8002782:	2103      	movs	r1, #3
 8002784:	4798      	blx	r3
 8002786:	7823      	ldrb	r3, [r4, #0]
 8002788:	2b05      	cmp	r3, #5
 800278a:	bf04      	itt	eq
 800278c:	2302      	moveq	r3, #2
 800278e:	7023      	strbeq	r3, [r4, #0]
 8002790:	2600      	movs	r6, #0
 8002792:	6126      	str	r6, [r4, #16]
 8002794:	2320      	movs	r3, #32
 8002796:	f383 8811 	msr	BASEPRI, r3
 800279a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800279e:	f104 0014 	add.w	r0, r4, #20
 80027a2:	f7ff ff85 	bl	80026b0 <chThdResumeI>
 80027a6:	f386 8811 	msr	BASEPRI, r6
    }
    if (isr & ADC_ISR_AWD3) {
 80027aa:	05ab      	lsls	r3, r5, #22
 80027ac:	d59d      	bpl.n	80026ea <adc_lld_serve_interrupt.lto_priv.55+0x1a>
      /* Analog watchdog error.*/
      _adc_isr_error_code(adcp, ADC_ERR_AWD3);
 80027ae:	4620      	mov	r0, r4
 80027b0:	f001 fb3e 	bl	8003e30 <adc_lld_stop_conversion>
 80027b4:	6923      	ldr	r3, [r4, #16]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	b14b      	cbz	r3, 80027ce <adc_lld_serve_interrupt.lto_priv.55+0xfe>
 80027ba:	2205      	movs	r2, #5
 80027bc:	7022      	strb	r2, [r4, #0]
 80027be:	4620      	mov	r0, r4
 80027c0:	2104      	movs	r1, #4
 80027c2:	4798      	blx	r3
 80027c4:	7823      	ldrb	r3, [r4, #0]
 80027c6:	2b05      	cmp	r3, #5
 80027c8:	bf04      	itt	eq
 80027ca:	2302      	moveq	r3, #2
 80027cc:	7023      	strbeq	r3, [r4, #0]
 80027ce:	2500      	movs	r5, #0
 80027d0:	6125      	str	r5, [r4, #16]
 80027d2:	2320      	movs	r3, #32
 80027d4:	f383 8811 	msr	BASEPRI, r3
 80027d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027dc:	f104 0014 	add.w	r0, r4, #20
 80027e0:	f7ff ff66 	bl	80026b0 <chThdResumeI>
 80027e4:	f385 8811 	msr	BASEPRI, r5
 80027e8:	bd70      	pop	{r4, r5, r6, pc}
 80027ea:	bf00      	nop
 80027ec:	0000      	movs	r0, r0
	...

080027f0 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 80027f0:	b538      	push	{r3, r4, r5, lr}
 80027f2:	2220      	movs	r2, #32
 80027f4:	4603      	mov	r3, r0
 80027f6:	f382 8811 	msr	BASEPRI, r2
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;
 80027fa:	4a0e      	ldr	r2, [pc, #56]	; (8002834 <chThdExit+0x44>)
 80027fc:	6994      	ldr	r4, [r2, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 80027fe:	6aa0      	ldr	r0, [r4, #40]	; 0x28

  tp->p_u.exitcode = msg;
 8002800:	6263      	str	r3, [r4, #36]	; 0x24
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8002802:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8002806:	42a8      	cmp	r0, r5
 8002808:	d006      	beq.n	8002818 <chThdExit+0x28>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 800280a:	6803      	ldr	r3, [r0, #0]
 800280c:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 800280e:	f7ff ff07 	bl	8002620 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8002812:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8002814:	42a8      	cmp	r0, r5
 8002816:	d1f8      	bne.n	800280a <chThdExit+0x1a>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8002818:	7f63      	ldrb	r3, [r4, #29]
 800281a:	079b      	lsls	r3, r3, #30
 800281c:	d104      	bne.n	8002828 <chThdExit+0x38>
    REG_REMOVE(tp);
 800281e:	6963      	ldr	r3, [r4, #20]
 8002820:	6922      	ldr	r2, [r4, #16]
 8002822:	611a      	str	r2, [r3, #16]
 8002824:	6922      	ldr	r2, [r4, #16]
 8002826:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8002828:	200f      	movs	r0, #15
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
  /* The thread never returns here.*/
}
 800282a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 800282e:	f7ff bb97 	b.w	8001f60 <chSchGoSleepS>
 8002832:	bf00      	nop
 8002834:	20000830 	.word	0x20000830
	...

08002840 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8002840:	e7fe      	b.n	8002840 <BusFault_Handler>
 8002842:	bf00      	nop
	...

08002850 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8002850:	b4f0      	push	{r4, r5, r6, r7}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 8002852:	4e11      	ldr	r6, [pc, #68]	; (8002898 <__init_ram_areas+0x48>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8002854:	2500      	movs	r5, #0
 8002856:	f106 0780 	add.w	r7, r6, #128	; 0x80
void __init_ram_areas(void) {
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;

  do {
    uint32_t *tp = rap->init_text_area;
 800285a:	e896 001a 	ldmia.w	r6, {r1, r3, r4}
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 800285e:	42a3      	cmp	r3, r4
 8002860:	d20d      	bcs.n	800287e <__init_ram_areas+0x2e>
 8002862:	3904      	subs	r1, #4
 8002864:	461a      	mov	r2, r3
      *p = *tp;
 8002866:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800286a:	f842 0b04 	str.w	r0, [r2], #4
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 800286e:	42a2      	cmp	r2, r4
 8002870:	d3f9      	bcc.n	8002866 <__init_ram_areas+0x16>
 8002872:	43da      	mvns	r2, r3
 8002874:	4414      	add	r4, r2
 8002876:	f024 0403 	bic.w	r4, r4, #3
 800287a:	3404      	adds	r4, #4
 800287c:	4423      	add	r3, r4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 800287e:	68f2      	ldr	r2, [r6, #12]
 8002880:	4293      	cmp	r3, r2
 8002882:	d203      	bcs.n	800288c <__init_ram_areas+0x3c>
      *p = 0;
 8002884:	f843 5b04 	str.w	r5, [r3], #4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8002888:	4293      	cmp	r3, r2
 800288a:	d3fb      	bcc.n	8002884 <__init_ram_areas+0x34>
      *p = 0;
      p++;
    }
    rap++;
 800288c:	3610      	adds	r6, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800288e:	42be      	cmp	r6, r7
 8002890:	d3e3      	bcc.n	800285a <__init_ram_areas+0xa>
#endif
}
 8002892:	bcf0      	pop	{r4, r5, r6, r7}
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	08003fc0 	.word	0x08003fc0
 800289c:	00000000 	.word	0x00000000

080028a0 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 80028a0:	e7fe      	b.n	80028a0 <__default_exit>
 80028a2:	bf00      	nop
	...

080028b0 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
	...

080028c0 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
	...

080028d0 <Vector16C>:
/**
 * @brief   USB low priority interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 80028d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t istr;
  USBDriver *usbp = &USBD1;

  OSAL_IRQ_PROLOGUE();

  istr = STM32_USB->ISTR;
 80028d4:	4bb9      	ldr	r3, [pc, #740]	; (8002bbc <Vector16C+0x2ec>)
 80028d6:	6c5d      	ldr	r5, [r3, #68]	; 0x44

  /* USB bus reset condition handling.*/
  if (istr & ISTR_RESET) {
 80028d8:	056f      	lsls	r7, r5, #21
/**
 * @brief   USB low priority interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 80028da:	b083      	sub	sp, #12
  OSAL_IRQ_PROLOGUE();

  istr = STM32_USB->ISTR;

  /* USB bus reset condition handling.*/
  if (istr & ISTR_RESET) {
 80028dc:	f100 8114 	bmi.w	8002b08 <Vector16C+0x238>

    _usb_reset(usbp);
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
 80028e0:	052e      	lsls	r6, r5, #20
 80028e2:	f100 80fd 	bmi.w	8002ae0 <Vector16C+0x210>

    _usb_suspend(usbp);
  }

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
 80028e6:	04ec      	lsls	r4, r5, #19
 80028e8:	d508      	bpl.n	80028fc <Vector16C+0x2c>
    uint32_t fnr = STM32_USB->FNR;
 80028ea:	4bb4      	ldr	r3, [pc, #720]	; (8002bbc <Vector16C+0x2ec>)
 80028ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    if (!(fnr & FNR_RXDP)) {
 80028ee:	0410      	lsls	r0, r2, #16
 80028f0:	f140 816a 	bpl.w	8002bc8 <Vector16C+0x2f8>
      /* Just noise, going back in SUSPEND mode, reference manual 22.4.5,
         table 169.*/
      STM32_USB->CNTR |= CNTR_LP_MODE;
    }
#endif
    STM32_USB->ISTR = ~ISTR_WKUP;
 80028f4:	4bb1      	ldr	r3, [pc, #708]	; (8002bbc <Vector16C+0x2ec>)
 80028f6:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
 80028fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* SOF handling.*/
  if (istr & ISTR_SOF) {
 80028fc:	05a9      	lsls	r1, r5, #22
 80028fe:	d509      	bpl.n	8002914 <Vector16C+0x44>
    _usb_isr_invoke_sof_cb(usbp);
 8002900:	4faf      	ldr	r7, [pc, #700]	; (8002bc0 <Vector16C+0x2f0>)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	b10b      	cbz	r3, 800290c <Vector16C+0x3c>
 8002908:	4638      	mov	r0, r7
 800290a:	4798      	blx	r3
    STM32_USB->ISTR = ~ISTR_SOF;
 800290c:	4bab      	ldr	r3, [pc, #684]	; (8002bbc <Vector16C+0x2ec>)
 800290e:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002912:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
 8002914:	042a      	lsls	r2, r5, #16
 8002916:	f140 80b2 	bpl.w	8002a7e <Vector16C+0x1ae>
 800291a:	4fa9      	ldr	r7, [pc, #676]	; (8002bc0 <Vector16C+0x2f0>)
 *
 * @notapi
 */
static size_t usb_packet_read_to_buffer(usbep_t ep, uint8_t *buf) {
  size_t i, n;
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 800291c:	f8df a29c 	ldr.w	sl, [pc, #668]	; 8002bbc <Vector16C+0x2ec>
      /* Starting IN operation.*/
      EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
    }
    else {
      /* Transfer completed, invokes the callback.*/
      _usb_isr_invoke_in_cb(usbp, ep);
 8002920:	46b8      	mov	r8, r7
    STM32_USB->ISTR = ~ISTR_SOF;
  }

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
    usb_serve_endpoints(usbp, istr & ISTR_EP_ID_MASK);
 8002922:	f005 050f 	and.w	r5, r5, #15
 8002926:	00ac      	lsls	r4, r5, #2
 8002928:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800292c:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 * @notapi
 */
static void usb_serve_endpoints(USBDriver *usbp, uint32_t ep) {
  size_t n;
  uint32_t epr = STM32_USB->EPR[ep];
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8002930:	1cae      	adds	r6, r5, #2
 *
 * @notapi
 */
static void usb_serve_endpoints(USBDriver *usbp, uint32_t ep) {
  size_t n;
  uint32_t epr = STM32_USB->EPR[ep];
 8002932:	f8d4 9000 	ldr.w	r9, [r4]
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8002936:	eb08 0386 	add.w	r3, r8, r6, lsl #2

  if (epr & EPR_CTR_TX) {
 800293a:	f019 0f80 	tst.w	r9, #128	; 0x80
 * @notapi
 */
static void usb_serve_endpoints(USBDriver *usbp, uint32_t ep) {
  size_t n;
  uint32_t epr = STM32_USB->EPR[ep];
  const USBEndpointConfig *epcp = usbp->epc[ep];
 800293e:	685f      	ldr	r7, [r3, #4]

  if (epr & EPR_CTR_TX) {
 8002940:	d02f      	beq.n	80029a2 <Vector16C+0xd2>
    /* IN endpoint, transmission.*/
    USBInEndpointState *isp = epcp->in_state;
 8002942:	f8d7 e014 	ldr.w	lr, [r7, #20]

    EPR_CLEAR_CTR_TX(ep);
 8002946:	6823      	ldr	r3, [r4, #0]

    isp->txcnt += isp->txlast;
 8002948:	f8de 0004 	ldr.w	r0, [lr, #4]
 800294c:	f8de 100c 	ldr.w	r1, [lr, #12]
    n = isp->txsize - isp->txcnt;
 8002950:	f8de 2000 	ldr.w	r2, [lr]

  if (epr & EPR_CTR_TX) {
    /* IN endpoint, transmission.*/
    USBInEndpointState *isp = epcp->in_state;

    EPR_CLEAR_CTR_TX(ep);
 8002954:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 8002958:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0

    isp->txcnt += isp->txlast;
 800295c:	4408      	add	r0, r1

  if (epr & EPR_CTR_TX) {
    /* IN endpoint, transmission.*/
    USBInEndpointState *isp = epcp->in_state;

    EPR_CLEAR_CTR_TX(ep);
 800295e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002962:	6023      	str	r3, [r4, #0]

    isp->txcnt += isp->txlast;
 8002964:	f8ce 0004 	str.w	r0, [lr, #4]
    n = isp->txsize - isp->txcnt;
    if (n > 0) {
 8002968:	1a10      	subs	r0, r2, r0
 800296a:	f000 809f 	beq.w	8002aac <Vector16C+0x1dc>
      /* Transfer not completed, there are more packets to send.*/
      if (n > epcp->in_maxsize)
 800296e:	8a3a      	ldrh	r2, [r7, #16]
        n = epcp->in_maxsize;

      /* Writes the packet from the defined buffer.*/
      isp->txbuf += isp->txlast;
 8002970:	f8de 3008 	ldr.w	r3, [lr, #8]
 8002974:	4282      	cmp	r2, r0
 8002976:	bf28      	it	cs
 8002978:	4602      	movcs	r2, r0
 800297a:	4419      	add	r1, r3
      isp->txlast = n;
 800297c:	f8ce 200c 	str.w	r2, [lr, #12]
      /* Transfer not completed, there are more packets to send.*/
      if (n > epcp->in_maxsize)
        n = epcp->in_maxsize;

      /* Writes the packet from the defined buffer.*/
      isp->txbuf += isp->txlast;
 8002980:	f8ce 1008 	str.w	r1, [lr, #8]
      isp->txlast = n;
      usb_packet_write_from_buffer(ep, isp->txbuf, n);
 8002984:	4628      	mov	r0, r5
 8002986:	f001 fa23 	bl	8003dd0 <usb_packet_write_from_buffer.lto_priv.44>

      /* Starting IN operation.*/
      EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 800298a:	6823      	ldr	r3, [r4, #0]
 800298c:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8002990:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002994:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800299c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029a0:	6023      	str	r3, [r4, #0]
    else {
      /* Transfer completed, invokes the callback.*/
      _usb_isr_invoke_in_cb(usbp, ep);
    }
  }
  if (epr & EPR_CTR_RX) {
 80029a2:	f419 4f00 	tst.w	r9, #32768	; 0x8000
 80029a6:	d065      	beq.n	8002a74 <Vector16C+0x1a4>
    /* OUT endpoint, receive.*/

    EPR_CLEAR_CTR_RX(ep);
 80029a8:	6823      	ldr	r3, [r4, #0]
 80029aa:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 80029ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80

    if (epr & EPR_SETUP) {
 80029b6:	f419 6f00 	tst.w	r9, #2048	; 0x800
    }
  }
  if (epr & EPR_CTR_RX) {
    /* OUT endpoint, receive.*/

    EPR_CLEAR_CTR_RX(ep);
 80029ba:	6023      	str	r3, [r4, #0]

    if (epr & EPR_SETUP) {
 80029bc:	f040 8086 	bne.w	8002acc <Vector16C+0x1fc>
 *
 * @notapi
 */
static size_t usb_packet_read_to_buffer(usbep_t ep, uint8_t *buf) {
  size_t i, n;
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 80029c0:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
      /* Setup packets handling, setup packets are handled using a
         specific callback.*/
      _usb_isr_invoke_setup_cb(usbp, ep);
    }
    else {
      USBOutEndpointState *osp = epcp->out_state;
 80029c4:	69b8      	ldr	r0, [r7, #24]
 80029c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80029ca:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 *
 * @notapi
 */
static size_t usb_packet_read_to_buffer(usbep_t ep, uint8_t *buf) {
  size_t i, n;
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 80029ce:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    }
    else {
      USBOutEndpointState *osp = epcp->out_state;

      /* Reads the packet into the defined buffer.*/
      n = usb_packet_read_to_buffer(ep, osp->rxbuf);
 80029d2:	f8d0 b008 	ldr.w	fp, [r0, #8]
 * @notapi
 */
static size_t usb_packet_read_to_buffer(usbep_t ep, uint8_t *buf) {
  size_t i, n;
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 80029d6:	689a      	ldr	r2, [r3, #8]
  if (EPR_EP_TYPE_IS_ISO(epr) && !(epr & EPR_DTOG_RX))
    n = (size_t)udp->RXCOUNT1 & RXCOUNT_COUNT_MASK;
  else
    n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
#else
  n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	9301      	str	r3, [sp, #4]
 * @notapi
 */
static size_t usb_packet_read_to_buffer(usbep_t ep, uint8_t *buf) {
  size_t i, n;
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 80029dc:	f102 5900 	add.w	r9, r2, #536870912	; 0x20000000
  if (EPR_EP_TYPE_IS_ISO(epr) && !(epr & EPR_DTOG_RX))
    n = (size_t)udp->RXCOUNT1 & RXCOUNT_COUNT_MASK;
  else
    n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
#else
  n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 80029e0:	f3c3 0e09 	ubfx	lr, r3, #0, #10
 * @notapi
 */
static size_t usb_packet_read_to_buffer(usbep_t ep, uint8_t *buf) {
  size_t i, n;
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 80029e4:	f509 5940 	add.w	r9, r9, #12288	; 0x3000
    buf += 16;
    pmap += 8;
  }
#endif /* STM32_USB_USE_FAST_COPY */

  while (i >= 2) {
 80029e8:	f1be 0f01 	cmp.w	lr, #1
 * @notapi
 */
static size_t usb_packet_read_to_buffer(usbep_t ep, uint8_t *buf) {
  size_t i, n;
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 80029ec:	ea4f 0949 	mov.w	r9, r9, lsl #1
    buf += 16;
    pmap += 8;
  }
#endif /* STM32_USB_USE_FAST_COPY */

  while (i >= 2) {
 80029f0:	d974      	bls.n	8002adc <Vector16C+0x20c>
 80029f2:	f10b 0202 	add.w	r2, fp, #2
 80029f6:	4671      	mov	r1, lr
 80029f8:	46cc      	mov	ip, r9
    uint32_t w = *pmap++;
 80029fa:	f85c 3b04 	ldr.w	r3, [ip], #4
    *buf++ = (uint8_t)w;
 80029fe:	f802 3c02 	strb.w	r3, [r2, #-2]
    *buf++ = (uint8_t)(w >> 8);
    i -= 2;
 8002a02:	3902      	subs	r1, #2
#endif /* STM32_USB_USE_FAST_COPY */

  while (i >= 2) {
    uint32_t w = *pmap++;
    *buf++ = (uint8_t)w;
    *buf++ = (uint8_t)(w >> 8);
 8002a04:	0a1b      	lsrs	r3, r3, #8
    buf += 16;
    pmap += 8;
  }
#endif /* STM32_USB_USE_FAST_COPY */

  while (i >= 2) {
 8002a06:	2901      	cmp	r1, #1
    uint32_t w = *pmap++;
    *buf++ = (uint8_t)w;
    *buf++ = (uint8_t)(w >> 8);
 8002a08:	f802 3c01 	strb.w	r3, [r2, #-1]
 8002a0c:	f102 0202 	add.w	r2, r2, #2
    buf += 16;
    pmap += 8;
  }
#endif /* STM32_USB_USE_FAST_COPY */

  while (i >= 2) {
 8002a10:	d8f3      	bhi.n	80029fa <Vector16C+0x12a>
 8002a12:	f1ae 0302 	sub.w	r3, lr, #2
 8002a16:	085b      	lsrs	r3, r3, #1
 8002a18:	9a01      	ldr	r2, [sp, #4]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	f002 0201 	and.w	r2, r2, #1
 8002a20:	eb09 0983 	add.w	r9, r9, r3, lsl #2
 8002a24:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
    *buf++ = (uint8_t)w;
    *buf++ = (uint8_t)(w >> 8);
    i -= 2;
  }

  if (i >= 1) {
 8002a28:	b11a      	cbz	r2, 8002a32 <Vector16C+0x162>
    *buf = (uint8_t)*pmap;
 8002a2a:	f8d9 3000 	ldr.w	r3, [r9]
 8002a2e:	f88b 3000 	strb.w	r3, [fp]
      osp->rxbuf += n;

      /* Transaction data updated.*/
      osp->rxcnt  += n;
      osp->rxsize -= n;
      osp->rxpkts -= 1;
 8002a32:	f8b0 900c 	ldrh.w	r9, [r0, #12]

      /* The transaction is completed if the specified number of packets
         has been received or the current packet is a short packet.*/
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 8002a36:	f8b7 c012 	ldrh.w	ip, [r7, #18]
    else {
      USBOutEndpointState *osp = epcp->out_state;

      /* Reads the packet into the defined buffer.*/
      n = usb_packet_read_to_buffer(ep, osp->rxbuf);
      osp->rxbuf += n;
 8002a3a:	6881      	ldr	r1, [r0, #8]

      /* Transaction data updated.*/
      osp->rxcnt  += n;
 8002a3c:	6842      	ldr	r2, [r0, #4]
      osp->rxsize -= n;
 8002a3e:	6803      	ldr	r3, [r0, #0]
      osp->rxpkts -= 1;
 8002a40:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8002a44:	b2bf      	uxth	r7, r7
    else {
      USBOutEndpointState *osp = epcp->out_state;

      /* Reads the packet into the defined buffer.*/
      n = usb_packet_read_to_buffer(ep, osp->rxbuf);
      osp->rxbuf += n;
 8002a46:	4471      	add	r1, lr

      /* Transaction data updated.*/
      osp->rxcnt  += n;
 8002a48:	4472      	add	r2, lr
      osp->rxsize -= n;
 8002a4a:	ebce 0303 	rsb	r3, lr, r3
      osp->rxpkts -= 1;

      /* The transaction is completed if the specified number of packets
         has been received or the current packet is a short packet.*/
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 8002a4e:	45f4      	cmp	ip, lr
      osp->rxbuf += n;

      /* Transaction data updated.*/
      osp->rxcnt  += n;
      osp->rxsize -= n;
      osp->rxpkts -= 1;
 8002a50:	8187      	strh	r7, [r0, #12]
    else {
      USBOutEndpointState *osp = epcp->out_state;

      /* Reads the packet into the defined buffer.*/
      n = usb_packet_read_to_buffer(ep, osp->rxbuf);
      osp->rxbuf += n;
 8002a52:	6081      	str	r1, [r0, #8]

      /* Transaction data updated.*/
      osp->rxcnt  += n;
 8002a54:	6042      	str	r2, [r0, #4]
      osp->rxsize -= n;
 8002a56:	6003      	str	r3, [r0, #0]
      osp->rxpkts -= 1;

      /* The transaction is completed if the specified number of packets
         has been received or the current packet is a short packet.*/
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 8002a58:	d816      	bhi.n	8002a88 <Vector16C+0x1b8>
 8002a5a:	b1af      	cbz	r7, 8002a88 <Vector16C+0x1b8>
        /* Transfer complete, invokes the callback.*/
        _usb_isr_invoke_out_cb(usbp, ep);
      }
      else {
        /* Transfer not complete, there are more packets to receive.*/
        EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 8002a5c:	6823      	ldr	r3, [r4, #0]
 8002a5e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a66:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a72:	6023      	str	r3, [r4, #0]
  }

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
    usb_serve_endpoints(usbp, istr & ISTR_EP_ID_MASK);
    istr = STM32_USB->ISTR;
 8002a74:	f8da 5044 	ldr.w	r5, [sl, #68]	; 0x44
    _usb_isr_invoke_sof_cb(usbp);
    STM32_USB->ISTR = ~ISTR_SOF;
  }

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
 8002a78:	042b      	lsls	r3, r5, #16
 8002a7a:	f53f af52 	bmi.w	8002922 <Vector16C+0x52>
    usb_serve_endpoints(usbp, istr & ISTR_EP_ID_MASK);
    istr = STM32_USB->ISTR;
  }

  OSAL_IRQ_EPILOGUE();
}
 8002a7e:	b003      	add	sp, #12
 8002a80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (istr & ISTR_CTR) {
    usb_serve_endpoints(usbp, istr & ISTR_EP_ID_MASK);
    istr = STM32_USB->ISTR;
  }

  OSAL_IRQ_EPILOGUE();
 8002a84:	f7ff bbfc 	b.w	8002280 <_port_irq_epilogue>

      /* The transaction is completed if the specified number of packets
         has been received or the current packet is a short packet.*/
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
        /* Transfer complete, invokes the callback.*/
        _usb_isr_invoke_out_cb(usbp, ep);
 8002a88:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8002a8c:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 8002a90:	6871      	ldr	r1, [r6, #4]
 8002a92:	2301      	movs	r3, #1
 8002a94:	40ab      	lsls	r3, r5
 8002a96:	68cc      	ldr	r4, [r1, #12]
 8002a98:	ea22 0303 	bic.w	r3, r2, r3
 8002a9c:	f8a8 300a 	strh.w	r3, [r8, #10]
 8002aa0:	2c00      	cmp	r4, #0
 8002aa2:	d0e7      	beq.n	8002a74 <Vector16C+0x1a4>
 8002aa4:	4629      	mov	r1, r5
 8002aa6:	4846      	ldr	r0, [pc, #280]	; (8002bc0 <Vector16C+0x2f0>)
 8002aa8:	47a0      	blx	r4
 8002aaa:	e7e3      	b.n	8002a74 <Vector16C+0x1a4>
      /* Starting IN operation.*/
      EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
    }
    else {
      /* Transfer completed, invokes the callback.*/
      _usb_isr_invoke_in_cb(usbp, ep);
 8002aac:	4b44      	ldr	r3, [pc, #272]	; (8002bc0 <Vector16C+0x2f0>)
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	891b      	ldrh	r3, [r3, #8]
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	40a9      	lsls	r1, r5
 8002ab6:	ea23 0301 	bic.w	r3, r3, r1
 8002aba:	4941      	ldr	r1, [pc, #260]	; (8002bc0 <Vector16C+0x2f0>)
 8002abc:	810b      	strh	r3, [r1, #8]
 8002abe:	2a00      	cmp	r2, #0
 8002ac0:	f43f af6f 	beq.w	80029a2 <Vector16C+0xd2>
 8002ac4:	4608      	mov	r0, r1
 8002ac6:	4629      	mov	r1, r5
 8002ac8:	4790      	blx	r2
 8002aca:	e76a      	b.n	80029a2 <Vector16C+0xd2>
    EPR_CLEAR_CTR_RX(ep);

    if (epr & EPR_SETUP) {
      /* Setup packets handling, setup packets are handled using a
         specific callback.*/
      _usb_isr_invoke_setup_cb(usbp, ep);
 8002acc:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8002ad0:	4629      	mov	r1, r5
 8002ad2:	6873      	ldr	r3, [r6, #4]
 8002ad4:	483a      	ldr	r0, [pc, #232]	; (8002bc0 <Vector16C+0x2f0>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	4798      	blx	r3
 8002ada:	e7cb      	b.n	8002a74 <Vector16C+0x1a4>
    buf += 16;
    pmap += 8;
  }
#endif /* STM32_USB_USE_FAST_COPY */

  while (i >= 2) {
 8002adc:	4672      	mov	r2, lr
 8002ade:	e7a3      	b.n	8002a28 <Vector16C+0x158>
 * @notapi
 */
void _usb_suspend(USBDriver *usbp) {

  /* State transition.*/
  usbp->state = USB_SUSPENDED;
 8002ae0:	4f37      	ldr	r7, [pc, #220]	; (8002bc0 <Vector16C+0x2f0>)
    _usb_reset(usbp);
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 8002ae2:	4b36      	ldr	r3, [pc, #216]	; (8002bbc <Vector16C+0x2ec>)

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ae8:	680c      	ldr	r4, [r1, #0]
 8002aea:	f042 0208 	orr.w	r2, r2, #8
#if STM32_USB_LOW_POWER_ON_SUSPEND
    STM32_USB->CNTR |= CNTR_LP_MODE;
#endif
    STM32_USB->ISTR = ~ISTR_SUSP;
 8002aee:	f46f 6000 	mvn.w	r0, #2048	; 0x800
 * @notapi
 */
void _usb_suspend(USBDriver *usbp) {

  /* State transition.*/
  usbp->state = USB_SUSPENDED;
 8002af2:	2105      	movs	r1, #5
    _usb_reset(usbp);
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 8002af4:	641a      	str	r2, [r3, #64]	; 0x40
#if STM32_USB_LOW_POWER_ON_SUSPEND
    STM32_USB->CNTR |= CNTR_LP_MODE;
#endif
    STM32_USB->ISTR = ~ISTR_SUSP;
 8002af6:	6458      	str	r0, [r3, #68]	; 0x44
 8002af8:	7039      	strb	r1, [r7, #0]

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8002afa:	2c00      	cmp	r4, #0
 8002afc:	f43f aef3 	beq.w	80028e6 <Vector16C+0x16>
 8002b00:	4638      	mov	r0, r7
 8002b02:	2103      	movs	r1, #3
 8002b04:	47a0      	blx	r4
 8002b06:	e6ee      	b.n	80028e6 <Vector16C+0x16>
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  /* State transition.*/
  usbp->state         = USB_READY;
 8002b08:	4f2d      	ldr	r7, [pc, #180]	; (8002bc0 <Vector16C+0x2f0>)

  /* Resetting internal state.*/
  usbp->status        = 0;
 8002b0a:	2200      	movs	r2, #0

  istr = STM32_USB->ISTR;

  /* USB bus reset condition handling.*/
  if (istr & ISTR_RESET) {
    STM32_USB->ISTR = ~ISTR_RESET;
 8002b0c:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  /* State transition.*/
  usbp->state         = USB_READY;
 8002b10:	2102      	movs	r1, #2
 8002b12:	6458      	str	r0, [r3, #68]	; 0x44
        osalThreadResumeI(&usbp->epc[i]->out_state->thread, MSG_RESET);
      }
      osalSysUnlockFromISR();
    }
#endif
    usbp->epc[i] = NULL;
 8002b14:	4610      	mov	r0, r2

  /* State transition.*/
  usbp->state         = USB_READY;

  /* Resetting internal state.*/
  usbp->status        = 0;
 8002b16:	f8a7 207c 	strh.w	r2, [r7, #124]	; 0x7c
  usbp->address       = 0;
 8002b1a:	f887 207e 	strb.w	r2, [r7, #126]	; 0x7e
  usbp->configuration = 0;
 8002b1e:	f887 207f 	strb.w	r2, [r7, #127]	; 0x7f
  usbp->transmitting  = 0;
 8002b22:	813a      	strh	r2, [r7, #8]
  usbp->receiving     = 0;
 8002b24:	817a      	strh	r2, [r7, #10]
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  /* State transition.*/
  usbp->state         = USB_READY;
 8002b26:	7039      	strb	r1, [r7, #0]
 8002b28:	f107 0308 	add.w	r3, r7, #8
 8002b2c:	f107 0228 	add.w	r2, r7, #40	; 0x28
        osalThreadResumeI(&usbp->epc[i]->out_state->thread, MSG_RESET);
      }
      osalSysUnlockFromISR();
    }
#endif
    usbp->epc[i] = NULL;
 8002b30:	f843 0f04 	str.w	r0, [r3, #4]!
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8002b34:	4293      	cmp	r3, r2
        osalThreadResumeI(&usbp->epc[i]->out_state->thread, MSG_RESET);
      }
      osalSysUnlockFromISR();
    }
#endif
    usbp->epc[i] = NULL;
 8002b36:	f04f 0100 	mov.w	r1, #0
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8002b3a:	d1f9      	bne.n	8002b30 <Vector16C+0x260>
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 8002b3c:	687c      	ldr	r4, [r7, #4]
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = BTABLE_ADDR;
 8002b3e:	4a1f      	ldr	r2, [pc, #124]	; (8002bbc <Vector16C+0x2ec>)
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 8002b40:	68e3      	ldr	r3, [r4, #12]
#endif
    usbp->epc[i] = NULL;
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8002b42:	f887 1064 	strb.w	r1, [r7, #100]	; 0x64
    cntr |= CNTR_SOFM;
 8002b46:	428b      	cmp	r3, r1
 8002b48:	bf0c      	ite	eq
 8002b4a:	f44f 401c 	moveq.w	r0, #39936	; 0x9c00
 8002b4e:	f44f 401e 	movne.w	r0, #40448	; 0x9e00
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = BTABLE_ADDR;
  STM32_USB->ISTR   = 0;
  STM32_USB->DADDR  = DADDR_EF;
 8002b52:	2680      	movs	r6, #128	; 0x80
 */
static void usb_pm_reset(USBDriver *usbp) {

  /* The first 64 bytes are reserved for the descriptors table. The effective
     available RAM for endpoint buffers is just 448 bytes.*/
  usbp->pmnext = 64;
 8002b54:	2340      	movs	r3, #64	; 0x40
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = BTABLE_ADDR;
 8002b56:	6511      	str	r1, [r2, #80]	; 0x50
  STM32_USB->ISTR   = 0;
 8002b58:	6451      	str	r1, [r2, #68]	; 0x44
  STM32_USB->DADDR  = DADDR_EF;
 8002b5a:	64d6      	str	r6, [r2, #76]	; 0x4c
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
    cntr |= CNTR_SOFM;
  STM32_USB->CNTR = cntr;
 8002b5c:	6410      	str	r0, [r2, #64]	; 0x40
 */
static void usb_pm_reset(USBDriver *usbp) {

  /* The first 64 bytes are reserved for the descriptors table. The effective
     available RAM for endpoint buffers is just 448 bytes.*/
  usbp->pmnext = 64;
 8002b5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    break;
  default:
    epr = EPR_EP_TYPE_CONTROL;
  }

  dp = USB_GET_DESCRIPTOR(ep);
 8002b62:	6d13      	ldr	r3, [r2, #80]	; 0x50

  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
 8002b64:	4817      	ldr	r0, [pc, #92]	; (8002bc4 <Vector16C+0x2f4>)
 8002b66:	60f8      	str	r0, [r7, #12]
    break;
  default:
    epr = EPR_EP_TYPE_CONTROL;
  }

  dp = USB_GET_DESCRIPTOR(ep);
 8002b68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b6c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    if (epcp->out_maxsize > 62)
      nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
                0x8000;
    else
      nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
    dp->RXCOUNT0 = nblocks;
 8002b70:	f44f 4608 	mov.w	r6, #34816	; 0x8800

  dp = USB_GET_DESCRIPTOR(ep);

  /* IN endpoint handling.*/
  if (epcp->in_state != NULL) {
    dp->TXCOUNT0 = 0;
 8002b74:	6059      	str	r1, [r3, #4]
 * @param[in] size      size of the packet buffer to allocate
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 8002b76:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80

  /* Low level reset.*/
  usb_lld_reset(usbp);

  /* Notification of reset event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 8002b7a:	6824      	ldr	r4, [r4, #0]
  usbp->pmnext += (size + 1) & ~1;
 8002b7c:	f100 0e40 	add.w	lr, r0, #64	; 0x40
 8002b80:	f8c7 e080 	str.w	lr, [r7, #128]	; 0x80
  dp = USB_GET_DESCRIPTOR(ep);

  /* IN endpoint handling.*/
  if (epcp->in_state != NULL) {
    dp->TXCOUNT0 = 0;
    dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 8002b84:	6018      	str	r0, [r3, #0]
    if (epcp->out_maxsize > 62)
      nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
                0x8000;
    else
      nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
    dp->RXCOUNT0 = nblocks;
 8002b86:	60de      	str	r6, [r3, #12]
 * @param[in] size      size of the packet buffer to allocate
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 8002b88:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
    epr |= EPR_STAT_RX_NAK;
#endif
  }

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
 8002b8c:	f248 2680 	movw	r6, #33408	; 0x8280
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += (size + 1) & ~1;
 8002b90:	f100 0e40 	add.w	lr, r0, #64	; 0x40
 8002b94:	f8c7 e080 	str.w	lr, [r7, #128]	; 0x80
      nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
                0x8000;
    else
      nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
    dp->RXCOUNT0 = nblocks;
    dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 8002b98:	6098      	str	r0, [r3, #8]
    epr |= EPR_STAT_RX_NAK;
#endif
  }

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
 8002b9a:	6016      	str	r6, [r2, #0]
  EPR_TOGGLE(ep, epr);
 8002b9c:	6813      	ldr	r3, [r2, #0]
 8002b9e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ba2:	f083 0320 	eor.w	r3, r3, #32
 8002ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	2c00      	cmp	r4, #0
 8002bb2:	f43f ae95 	beq.w	80028e0 <Vector16C+0x10>
 8002bb6:	4802      	ldr	r0, [pc, #8]	; (8002bc0 <Vector16C+0x2f0>)
 8002bb8:	47a0      	blx	r4
 8002bba:	e691      	b.n	80028e0 <Vector16C+0x10>
 8002bbc:	40005c00 	.word	0x40005c00
 8002bc0:	20000a1c 	.word	0x20000a1c
 8002bc4:	08004180 	.word	0x08004180
 * @notapi
 */
void _usb_wakeup(USBDriver *usbp) {

  /* State transition.*/
  usbp->state = USB_ACTIVE;
 8002bc8:	4f07      	ldr	r7, [pc, #28]	; (8002be8 <Vector16C+0x318>)

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 8002bca:	6c1a      	ldr	r2, [r3, #64]	; 0x40

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	680c      	ldr	r4, [r1, #0]
 8002bd0:	f022 0208 	bic.w	r2, r2, #8
 * @notapi
 */
void _usb_wakeup(USBDriver *usbp) {

  /* State transition.*/
  usbp->state = USB_ACTIVE;
 8002bd4:	2104      	movs	r1, #4
 8002bd6:	641a      	str	r2, [r3, #64]	; 0x40
 8002bd8:	7039      	strb	r1, [r7, #0]

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8002bda:	2c00      	cmp	r4, #0
 8002bdc:	f43f ae8a 	beq.w	80028f4 <Vector16C+0x24>
 8002be0:	4638      	mov	r0, r7
 8002be2:	47a0      	blx	r4
 8002be4:	e686      	b.n	80028f4 <Vector16C+0x24>
 8002be6:	bf00      	nop
 8002be8:	20000a1c 	.word	0x20000a1c
 8002bec:	00000000 	.word	0x00000000

08002bf0 <main>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAHB(0xFFFFFFFF);
 8002bf0:	4bcc      	ldr	r3, [pc, #816]	; (8002f24 <main+0x334>)
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8002bf2:	48cd      	ldr	r0, [pc, #820]	; (8002f28 <main+0x338>)
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAHB(0xFFFFFFFF);
 8002bf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bf6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bfa:	2200      	movs	r2, #0
#include <string.h>

#include "ch.h"
#include "hal.h"

int main(void) {
 8002bfc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002c00:	6299      	str	r1, [r3, #40]	; 0x28
 8002c02:	629a      	str	r2, [r3, #40]	; 0x28
  rccResetAPB1(0xFFFFFFFF);
 8002c04:	691c      	ldr	r4, [r3, #16]
 8002c06:	6119      	str	r1, [r3, #16]
 8002c08:	611a      	str	r2, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 8002c0a:	68dc      	ldr	r4, [r3, #12]
 8002c0c:	60d9      	str	r1, [r3, #12]
 8002c0e:	60da      	str	r2, [r3, #12]

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 8002c10:	69d9      	ldr	r1, [r3, #28]
 8002c12:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002c16:	61d9      	str	r1, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8002c18:	6801      	ldr	r1, [r0, #0]
 8002c1a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002c1e:	6001      	str	r1, [r0, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL){
 8002c20:	6a19      	ldr	r1, [r3, #32]
 8002c22:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8002c26:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002c2a:	b089      	sub	sp, #36	; 0x24
 8002c2c:	d003      	beq.n	8002c36 <main+0x46>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 8002c2e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002c32:	6219      	str	r1, [r3, #32]
    RCC->BDCR = 0;
 8002c34:	621a      	str	r2, [r3, #32]
#endif

#if STM32_RTCSEL != STM32_RTCSEL_NOCLOCK
  /* If the backup domain hasn't been initialized yet then proceed with
     initialization.*/
  if ((RCC->BDCR & RCC_BDCR_RTCEN) == 0) {
 8002c36:	4bbb      	ldr	r3, [pc, #748]	; (8002f24 <main+0x334>)
 8002c38:	6a1a      	ldr	r2, [r3, #32]
 8002c3a:	0412      	lsls	r2, r2, #16
 8002c3c:	d407      	bmi.n	8002c4e <main+0x5e>
    /* Selects clock source.*/
    RCC->BDCR |= STM32_RTCSEL;
 8002c3e:	6a1a      	ldr	r2, [r3, #32]
 8002c40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c44:	621a      	str	r2, [r3, #32]

    /* RTC clock enabled.*/
    RCC->BDCR |= RCC_BDCR_RTCEN;
 8002c46:	6a1a      	ldr	r2, [r3, #32]
 8002c48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c4c:	621a      	str	r2, [r3, #32]
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0U;
 8002c4e:	4ab7      	ldr	r2, [pc, #732]	; (8002f2c <main+0x33c>)
 8002c50:	48b7      	ldr	r0, [pc, #732]	; (8002f30 <main+0x340>)
 8002c52:	2300      	movs	r3, #0
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	4ab7      	ldr	r2, [pc, #732]	; (8002f34 <main+0x344>)
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0U;
 8002c58:	4619      	mov	r1, r3
 8002c5a:	6854      	ldr	r4, [r2, #4]
 8002c5c:	6021      	str	r1, [r4, #0]
    _stm32_dma_isr_redir[i].dma_func = NULL;
 8002c5e:	f840 1033 	str.w	r1, [r0, r3, lsl #3]
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8002c62:	3301      	adds	r3, #1
 8002c64:	2b0c      	cmp	r3, #12
 8002c66:	f102 0214 	add.w	r2, r2, #20
    _stm32_dma_streams[i].channel->CCR = 0U;
 8002c6a:	f04f 0400 	mov.w	r4, #0
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8002c6e:	d1f4      	bne.n	8002c5a <main+0x6a>
    _stm32_dma_streams[i].channel->CCR = 0U;
    _stm32_dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->IFCR = 0xFFFFFFFFU;
 8002c70:	f8df a30c 	ldr.w	sl, [pc, #780]	; 8002f80 <main+0x390>
#if STM32_DMA2_NUM_CHANNELS > 0
  DMA2->IFCR = 0xFFFFFFFFU;
 8002c74:	f8df 930c 	ldr.w	r9, [pc, #780]	; 8002f84 <main+0x394>
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8002c78:	4daa      	ldr	r5, [pc, #680]	; (8002f24 <main+0x334>)

#if STM32_HAS_USB
  /* USB IRQ relocated to not conflict with CAN.*/
  SYSCFG->CFGR1 |= SYSCFG_CFGR1_USB_IT_RMP;
 8002c7a:	f8df 830c 	ldr.w	r8, [pc, #780]	; 8002f88 <main+0x398>
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8002c7e:	f8df b30c 	ldr.w	fp, [pc, #780]	; 8002f8c <main+0x39c>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8002c82:	4fad      	ldr	r7, [pc, #692]	; (8002f38 <main+0x348>)
 8002c84:	4aad      	ldr	r2, [pc, #692]	; (8002f3c <main+0x34c>)
 8002c86:	48ae      	ldr	r0, [pc, #696]	; (8002f40 <main+0x350>)
 8002c88:	f8df e304 	ldr.w	lr, [pc, #772]	; 8002f90 <main+0x3a0>
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8002c8c:	f8df c304 	ldr.w	ip, [pc, #772]	; 8002f94 <main+0x3a4>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8002c90:	4bac      	ldr	r3, [pc, #688]	; (8002f44 <main+0x354>)

  clkmask = 0;

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
 8002c92:	49ad      	ldr	r1, [pc, #692]	; (8002f48 <main+0x358>)
  dma_streams_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0U;
    _stm32_dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->IFCR = 0xFFFFFFFFU;
 8002c94:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8002c98:	f8ca 6004 	str.w	r6, [sl, #4]
#if STM32_DMA2_NUM_CHANNELS > 0
  DMA2->IFCR = 0xFFFFFFFFU;
 8002c9c:	f8c9 6004 	str.w	r6, [r9, #4]
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8002ca0:	69ae      	ldr	r6, [r5, #24]
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8002ca2:	f8df a2f4 	ldr.w	sl, [pc, #756]	; 8002f98 <main+0x3a8>
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8002ca6:	f8df 92f4 	ldr.w	r9, [pc, #756]	; 8002f9c <main+0x3ac>
 8002caa:	f046 0601 	orr.w	r6, r6, #1
 8002cae:	61ae      	str	r6, [r5, #24]

#if STM32_HAS_USB
  /* USB IRQ relocated to not conflict with CAN.*/
  SYSCFG->CFGR1 |= SYSCFG_CFGR1_USB_IT_RMP;
 8002cb0:	f8d8 6000 	ldr.w	r6, [r8]
 8002cb4:	f046 0620 	orr.w	r6, r6, #32
 8002cb8:	f8c8 6000 	str.w	r6, [r8]
  rccEnableAHB(AHB_EN_MASK, TRUE);
  RCC->AHBLPENR |= AHB_LPEN_MASK;
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
 8002cbc:	696e      	ldr	r6, [r5, #20]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8002cbe:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
  rccEnableAHB(AHB_EN_MASK, TRUE);
  RCC->AHBLPENR |= AHB_LPEN_MASK;
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
 8002cc2:	f446 06fc 	orr.w	r6, r6, #8257536	; 0x7e0000
 8002cc6:	616e      	str	r6, [r5, #20]
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8002cc8:	f64f 76ff 	movw	r6, #65535	; 0xffff
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8002ccc:	f8c8 4004 	str.w	r4, [r8, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002cd0:	f8c8 b008 	str.w	fp, [r8, #8]
  gpiop->PUPDR   = config->pupdr;
 8002cd4:	f8c8 a00c 	str.w	sl, [r8, #12]
  gpiop->ODR     = config->odr;
 8002cd8:	f8c8 6014 	str.w	r6, [r8, #20]
  gpiop->AFRL    = config->afrl;
 8002cdc:	f8c8 9020 	str.w	r9, [r8, #32]
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8002ce0:	4e9a      	ldr	r6, [pc, #616]	; (8002f4c <main+0x35c>)
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif /* STM32_ADC_USE_ADC2 */

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
 8002ce2:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 8002fa0 <main+0x3b0>
  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 8002ce6:	f44f 296e 	mov.w	r9, #974848	; 0xee000
 8002cea:	f8c8 9024 	str.w	r9, [r8, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002cee:	f8c8 6000 	str.w	r6, [r8]
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8002cf2:	f24f 08c0 	movw	r8, #61632	; 0xf0c0
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8002cf6:	26c0      	movs	r6, #192	; 0xc0
 8002cf8:	607e      	str	r6, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8002cfa:	f04f 4988 	mov.w	r9, #1140850688	; 0x44000000
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8002cfe:	f8c7 8008 	str.w	r8, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8002d02:	f64f 76ff 	movw	r6, #65535	; 0xffff
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8002d06:	f24a 0880 	movw	r8, #41088	; 0xa080

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8002d0a:	f8c7 c00c 	str.w	ip, [r7, #12]
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8002d0e:	f04f 4a70 	mov.w	sl, #4026531840	; 0xf0000000
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8002d12:	617e      	str	r6, [r7, #20]
  gpiop->AFRL    = config->afrl;
 8002d14:	f8c7 9020 	str.w	r9, [r7, #32]
  gpiop->AFRH    = config->afrh;
 8002d18:	627c      	str	r4, [r7, #36]	; 0x24

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8002d1a:	f8df 9288 	ldr.w	r9, [pc, #648]	; 8002fa4 <main+0x3b4>
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8002d1e:	f8c7 8000 	str.w	r8, [r7]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8002d22:	f04f 3855 	mov.w	r8, #1431655765	; 0x55555555
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8002d26:	4f8a      	ldr	r7, [pc, #552]	; (8002f50 <main+0x360>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8002d28:	6044      	str	r4, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002d2a:	f8c0 a008 	str.w	sl, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8002d2e:	f8c0 900c 	str.w	r9, [r0, #12]
 8002d32:	f8df a274 	ldr.w	sl, [pc, #628]	; 8002fa8 <main+0x3b8>
  gpiop->ODR     = config->odr;
 8002d36:	6146      	str	r6, [r0, #20]
 8002d38:	f04f 09ff 	mov.w	r9, #255	; 0xff
  gpiop->AFRL    = config->afrl;
 8002d3c:	6204      	str	r4, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8002d3e:	6244      	str	r4, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002d40:	6004      	str	r4, [r0, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8002d42:	f8ce 4004 	str.w	r4, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8002d46:	4883      	ldr	r0, [pc, #524]	; (8002f54 <main+0x364>)
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8002d48:	f8ce 4008 	str.w	r4, [lr, #8]
  gpiop->PUPDR   = config->pupdr;
 8002d4c:	f8ce 800c 	str.w	r8, [lr, #12]
  gpiop->ODR     = config->odr;
 8002d50:	f8ce 6014 	str.w	r6, [lr, #20]
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8002d54:	f04f 080f 	mov.w	r8, #15
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8002d58:	f8ce 4020 	str.w	r4, [lr, #32]
  gpiop->AFRH    = config->afrh;
 8002d5c:	f8ce 4024 	str.w	r4, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002d60:	f8ce 4000 	str.w	r4, [lr]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8002d64:	6054      	str	r4, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8002d66:	f8df e244 	ldr.w	lr, [pc, #580]	; 8002fac <main+0x3bc>
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8002d6a:	6097      	str	r7, [r2, #8]
 *
 * @notapi
 */
void adc_lld_init(void) {

  clkmask = 0;
 8002d6c:	4f7a      	ldr	r7, [pc, #488]	; (8002f58 <main+0x368>)
  gpiop->PUPDR   = config->pupdr;
 8002d6e:	f8c2 a00c 	str.w	sl, [r2, #12]
  gpiop->ODR     = config->odr;
 8002d72:	f8c2 9014 	str.w	r9, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8002d76:	6214      	str	r4, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8002d78:	6254      	str	r4, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002d7a:	6010      	str	r0, [r2, #0]

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
 8002d7c:	9101      	str	r1, [sp, #4]
 8002d7e:	4608      	mov	r0, r1
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8002d80:	605c      	str	r4, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002d82:	f8c3 8008 	str.w	r8, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 8002d86:	f8c3 e00c 	str.w	lr, [r3, #12]
  gpiop->ODR     = config->odr;
 8002d8a:	615e      	str	r6, [r3, #20]
  ADCD2.adcc = ADC1_2_COMMON;
#elif defined(ADC123_COMMON)
  ADCD2.adcc = ADC123_COMMON;
#endif
  ADCD2.adcm    = ADC2;
  ADCD2.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC2_DMA_STREAM);
 8002d8c:	4e73      	ldr	r6, [pc, #460]	; (8002f5c <main+0x36c>)
  gpiop->AFRL    = config->afrl;
 8002d8e:	621c      	str	r4, [r3, #32]
  gpiop->AFRH    = config->afrh;
 8002d90:	625c      	str	r4, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002d92:	601c      	str	r4, [r3, #0]
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif /* STM32_ADC_USE_ADC1 */

#if STM32_ADC_USE_ADC2
  /* Driver initialization.*/
  adcObjectInit(&ADCD2);
 8002d94:	f8df a218 	ldr.w	sl, [pc, #536]	; 8002fb0 <main+0x3c0>
 *
 * @notapi
 */
void adc_lld_init(void) {

  clkmask = 0;
 8002d98:	603c      	str	r4, [r7, #0]

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
 8002d9a:	f7ff fa61 	bl	8002260 <adcObjectInit>
#endif
  ADCD1.adcm    = ADC1;
#if STM32_ADC_DUAL_MODE
  ADCD1.adcs    = ADC2;
#endif
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 8002d9e:	9901      	ldr	r1, [sp, #4]
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif /* STM32_ADC_USE_ADC3 */

#if STM32_ADC_USE_ADC4
  /* Driver initialization.*/
  adcObjectInit(&ADCD4);
 8002da0:	4f6f      	ldr	r7, [pc, #444]	; (8002f60 <main+0x370>)

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
#if defined(ADC1_2_COMMON)
  ADCD1.adcc = ADC1_2_COMMON;
 8002da2:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8002fb4 <main+0x3c4>
 8002da6:	f8c1 902c 	str.w	r9, [r1, #44]	; 0x2c
#endif
  ADCD1.adcm    = ADC1;
#if STM32_ADC_DUAL_MODE
  ADCD1.adcs    = ADC2;
#endif
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 8002daa:	f1a6 038c 	sub.w	r3, r6, #140	; 0x8c
  ADCD1.dmamode = ADC_DMA_SIZE |
 8002dae:	f242 588a 	movw	r8, #9610	; 0x258a
#endif
  ADCD1.adcm    = ADC1;
#if STM32_ADC_DUAL_MODE
  ADCD1.adcs    = ADC2;
#endif
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 8002db2:	630b      	str	r3, [r1, #48]	; 0x30
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif /* STM32_ADC_USE_ADC1 */

#if STM32_ADC_USE_ADC2
  /* Driver initialization.*/
  adcObjectInit(&ADCD2);
 8002db4:	4650      	mov	r0, sl
#elif defined(ADC123_COMMON)
  ADCD1.adcc = ADC123_COMMON;
#else
  ADCD1.adcc = ADC1_COMMON;
#endif
  ADCD1.adcm    = ADC1;
 8002db6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002dba:	628b      	str	r3, [r1, #40]	; 0x28
#if STM32_ADC_DUAL_MODE
  ADCD1.adcs    = ADC2;
#endif
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
  ADCD1.dmamode = ADC_DMA_SIZE |
 8002dbc:	f8c1 8034 	str.w	r8, [r1, #52]	; 0x34
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif /* STM32_ADC_USE_ADC1 */

#if STM32_ADC_USE_ADC2
  /* Driver initialization.*/
  adcObjectInit(&ADCD2);
 8002dc0:	f7ff fa4e 	bl	8002260 <adcObjectInit>
#if defined(ADC1_2_COMMON)
  ADCD2.adcc = ADC1_2_COMMON;
#elif defined(ADC123_COMMON)
  ADCD2.adcc = ADC123_COMMON;
#endif
  ADCD2.adcm    = ADC2;
 8002dc4:	4b67      	ldr	r3, [pc, #412]	; (8002f64 <main+0x374>)

#if STM32_ADC_USE_ADC2
  /* Driver initialization.*/
  adcObjectInit(&ADCD2);
#if defined(ADC1_2_COMMON)
  ADCD2.adcc = ADC1_2_COMMON;
 8002dc6:	f8ca 902c 	str.w	r9, [sl, #44]	; 0x2c
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif /* STM32_ADC_USE_ADC2 */

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
 8002dca:	4658      	mov	r0, fp
#elif defined(ADC123_COMMON)
  ADCD2.adcc = ADC123_COMMON;
#endif
  ADCD2.adcm    = ADC2;
  ADCD2.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC2_DMA_STREAM);
  ADCD2.dmamode = ADC_DMA_SIZE |
 8002dcc:	f8ca 8034 	str.w	r8, [sl, #52]	; 0x34
#if defined(ADC1_2_COMMON)
  ADCD2.adcc = ADC1_2_COMMON;
#elif defined(ADC123_COMMON)
  ADCD2.adcc = ADC123_COMMON;
#endif
  ADCD2.adcm    = ADC2;
 8002dd0:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
  ADCD2.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC2_DMA_STREAM);
 8002dd4:	f8ca 6030 	str.w	r6, [sl, #48]	; 0x30
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif /* STM32_ADC_USE_ADC2 */

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
 8002dd8:	f7ff fa42 	bl	8002260 <adcObjectInit>
#if defined(ADC3_4_COMMON)
  ADCD3.adcc = ADC3_4_COMMON;
 8002ddc:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 8002fb8 <main+0x3c8>
#elif defined(ADC123_COMMON)
  ADCD1.adcc = ADC123_COMMON;
#else
  ADCD3.adcc = ADC3_COMMON;
#endif
  ADCD3.adcm    = ADC3;
 8002de0:	4961      	ldr	r1, [pc, #388]	; (8002f68 <main+0x378>)
#if STM32_ADC_DUAL_MODE
  ADCD3.adcs    = ADC4;
#endif
  ADCD3.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC3_DMA_STREAM);
  ADCD3.dmamode = ADC_DMA_SIZE |
 8002de2:	f8cb 8034 	str.w	r8, [fp, #52]	; 0x34
#endif
  ADCD3.adcm    = ADC3;
#if STM32_ADC_DUAL_MODE
  ADCD3.adcs    = ADC4;
#endif
  ADCD3.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC3_DMA_STREAM);
 8002de6:	f106 0350 	add.w	r3, r6, #80	; 0x50
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif /* STM32_ADC_USE_ADC3 */

#if STM32_ADC_USE_ADC4
  /* Driver initialization.*/
  adcObjectInit(&ADCD4);
 8002dea:	4638      	mov	r0, r7
#elif defined(ADC123_COMMON)
  ADCD1.adcc = ADC123_COMMON;
#else
  ADCD3.adcc = ADC3_COMMON;
#endif
  ADCD3.adcm    = ADC3;
 8002dec:	f8cb 1028 	str.w	r1, [fp, #40]	; 0x28
#if STM32_ADC_DUAL_MODE
  ADCD3.adcs    = ADC4;
#endif
  ADCD3.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC3_DMA_STREAM);
 8002df0:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
#if defined(ADC3_4_COMMON)
  ADCD3.adcc = ADC3_4_COMMON;
 8002df4:	f8cb a02c 	str.w	sl, [fp, #44]	; 0x2c
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif /* STM32_ADC_USE_ADC3 */

#if STM32_ADC_USE_ADC4
  /* Driver initialization.*/
  adcObjectInit(&ADCD4);
 8002df8:	f7ff fa32 	bl	8002260 <adcObjectInit>

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002dfc:	495b      	ldr	r1, [pc, #364]	; (8002f6c <main+0x37c>)
  ADCD4.adcc = ADC3_4_COMMON;
 8002dfe:	f8c7 a02c 	str.w	sl, [r7, #44]	; 0x2c
 8002e02:	2350      	movs	r3, #80	; 0x50
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002e04:	f44f 2e80 	mov.w	lr, #262144	; 0x40000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002e08:	f881 3312 	strb.w	r3, [r1, #786]	; 0x312
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002e0c:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
 8002e10:	f8c1 e180 	str.w	lr, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002e14:	f8c1 e000 	str.w	lr, [r1]
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002e18:	f04f 5e00 	mov.w	lr, #536870912	; 0x20000000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002e1c:	f881 332f 	strb.w	r3, [r1, #815]	; 0x32f
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002e20:	f8c1 c184 	str.w	ip, [r1, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002e24:	f8c1 c004 	str.w	ip, [r1, #4]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002e28:	f881 333d 	strb.w	r3, [r1, #829]	; 0x33d
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002e2c:	f8c1 e184 	str.w	lr, [r1, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002e30:	f8c1 e004 	str.w	lr, [r1, #4]
#endif

  /* ADC units pre-initializations.*/
#if defined(STM32F3XX)
#if STM32_ADC_USE_ADC1 || STM32_ADC_USE_ADC2
  rccEnableADC12(FALSE);
 8002e34:	696b      	ldr	r3, [r5, #20]
  /* Driver initialization.*/
  adcObjectInit(&ADCD4);
  ADCD4.adcc = ADC3_4_COMMON;
  ADCD4.adcm    = ADC4;
  ADCD4.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC4_DMA_STREAM);
  ADCD4.dmamode = ADC_DMA_SIZE |
 8002e36:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
#endif

  /* ADC units pre-initializations.*/
#if defined(STM32F3XX)
#if STM32_ADC_USE_ADC1 || STM32_ADC_USE_ADC2
  rccEnableADC12(FALSE);
 8002e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	616b      	str	r3, [r5, #20]
  rccResetADC12();
 8002e40:	6aab      	ldr	r3, [r5, #40]	; 0x28

#if STM32_ADC_USE_ADC4
  /* Driver initialization.*/
  adcObjectInit(&ADCD4);
  ADCD4.adcc = ADC3_4_COMMON;
  ADCD4.adcm    = ADC4;
 8002e42:	484b      	ldr	r0, [pc, #300]	; (8002f70 <main+0x380>)
 8002e44:	62b8      	str	r0, [r7, #40]	; 0x28
  /* ADC units pre-initializations.*/
#if defined(STM32F3XX)
#if STM32_ADC_USE_ADC1 || STM32_ADC_USE_ADC2
  rccEnableADC12(FALSE);
  rccResetADC12();
  ADC1_2_COMMON->CCR = STM32_ADC_ADC12_CLOCK_MODE | ADC_DMA_MDMA;
 8002e46:	f44f 3c80 	mov.w	ip, #65536	; 0x10000

  /* ADC units pre-initializations.*/
#if defined(STM32F3XX)
#if STM32_ADC_USE_ADC1 || STM32_ADC_USE_ADC2
  rccEnableADC12(FALSE);
  rccResetADC12();
 8002e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e4e:	62ab      	str	r3, [r5, #40]	; 0x28
 8002e50:	62ac      	str	r4, [r5, #40]	; 0x28
  ADC1_2_COMMON->CCR = STM32_ADC_ADC12_CLOCK_MODE | ADC_DMA_MDMA;
 8002e52:	f8c9 c008 	str.w	ip, [r9, #8]
  rccDisableADC12(FALSE);
 8002e56:	696b      	ldr	r3, [r5, #20]
 *
 * @init
 */
void canObjectInit(CANDriver *canp) {

  canp->state    = CAN_STOP;
 8002e58:	4a46      	ldr	r2, [pc, #280]	; (8002f74 <main+0x384>)
void can_lld_init(void) {

#if STM32_CAN_USE_CAN1
  /* Driver initialization.*/
  canObjectInit(&CAND1);
  CAND1.can = CAN1;
 8002e5a:	4847      	ldr	r0, [pc, #284]	; (8002f78 <main+0x388>)
  canp->config   = NULL;
 8002e5c:	6054      	str	r4, [r2, #4]
 8002e5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e62:	616b      	str	r3, [r5, #20]
#endif
#if STM32_ADC_USE_ADC3 || STM32_ADC_USE_ADC4
  rccEnableADC34(FALSE);
 8002e64:	f8d5 9014 	ldr.w	r9, [r5, #20]
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 8002e68:	f8df e150 	ldr.w	lr, [pc, #336]	; 8002fbc <main+0x3cc>
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 8002e6c:	4b43      	ldr	r3, [pc, #268]	; (8002f7c <main+0x38c>)
 *
 * @init
 */
void extObjectInit(EXTDriver *extp) {

  extp->state  = EXT_STOP;
 8002e6e:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8002fc0 <main+0x3d0>
 8002e72:	f049 5900 	orr.w	r9, r9, #536870912	; 0x20000000
 8002e76:	f8c5 9014 	str.w	r9, [r5, #20]
  rccResetADC34();
 8002e7a:	f8d5 9028 	ldr.w	r9, [r5, #40]	; 0x28
 8002e7e:	f049 5900 	orr.w	r9, r9, #536870912	; 0x20000000
 8002e82:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8002e86:	62ac      	str	r4, [r5, #40]	; 0x28
  ADC3_4_COMMON->CCR = STM32_ADC_ADC34_CLOCK_MODE | ADC_DMA_MDMA;
 8002e88:	f8ca c008 	str.w	ip, [sl, #8]
  rccDisableADC34(FALSE);
 8002e8c:	f8d5 9014 	ldr.w	r9, [r5, #20]
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
 8002e90:	f8df c130 	ldr.w	ip, [pc, #304]	; 8002fc4 <main+0x3d4>
 8002e94:	f029 5900 	bic.w	r9, r9, #536870912	; 0x20000000
 8002e98:	f8c5 9014 	str.w	r9, [r5, #20]
#if STM32_ADC_USE_ADC4
  /* Driver initialization.*/
  adcObjectInit(&ADCD4);
  ADCD4.adcc = ADC3_4_COMMON;
  ADCD4.adcm    = ADC4;
  ADCD4.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC4_DMA_STREAM);
 8002e9c:	f106 0914 	add.w	r9, r6, #20
 8002ea0:	f8c7 9030 	str.w	r9, [r7, #48]	; 0x30
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002ea4:	f102 0708 	add.w	r7, r2, #8
 8002ea8:	f102 0a10 	add.w	sl, r2, #16
 8002eac:	6097      	str	r7, [r2, #8]
  tqp->p_prev = (thread_t *)tqp;
 8002eae:	60d7      	str	r7, [r2, #12]
 *
 * @init
 */
void canObjectInit(CANDriver *canp) {

  canp->state    = CAN_STOP;
 8002eb0:	2701      	movs	r7, #1
 8002eb2:	7017      	strb	r7, [r2, #0]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002eb4:	f8c2 a010 	str.w	sl, [r2, #16]
static void can_lld_set_filters(uint32_t can2sb,
                                uint32_t num,
                                const CANFilter *cfp) {

  /* Temporarily enabling CAN1 clock.*/
  rccEnableCAN1(FALSE);
 8002eb8:	f8d5 901c 	ldr.w	r9, [r5, #28]
  tqp->p_prev = (thread_t *)tqp;
 8002ebc:	f8c2 a014 	str.w	sl, [r2, #20]
 8002ec0:	f049 7900 	orr.w	r9, r9, #33554432	; 0x2000000
 8002ec4:	f8c5 901c 	str.w	r9, [r5, #28]

  /* Filters initialization.*/
  CAN1->FMR = (CAN1->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 8002ec8:	f8d0 9200 	ldr.w	r9, [r0, #512]	; 0x200
void can_lld_init(void) {

#if STM32_CAN_USE_CAN1
  /* Driver initialization.*/
  canObjectInit(&CAND1);
  CAND1.can = CAN1;
 8002ecc:	62d0      	str	r0, [r2, #44]	; 0x2c

  /* Temporarily enabling CAN1 clock.*/
  rccEnableCAN1(FALSE);

  /* Filters initialization.*/
  CAN1->FMR = (CAN1->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 8002ece:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8002ed2:	ea4f 4909 	mov.w	r9, r9, lsl #16
 8002ed6:	f449 6960 	orr.w	r9, r9, #3584	; 0xe00
 8002eda:	ea49 0907 	orr.w	r9, r9, r7
 8002ede:	f8c0 9200 	str.w	r9, [r0, #512]	; 0x200
    }
  }
  else {
    /* Setting up a single default filter that enables everything for both
       CANs.*/
    CAN1->sFilterRegister[0].FR1 = 0;
 8002ee2:	f8c0 4240 	str.w	r4, [r0, #576]	; 0x240
    CAN1->sFilterRegister[0].FR2 = 0;
 8002ee6:	f8c0 4244 	str.w	r4, [r0, #580]	; 0x244
#if STM32_HAS_CAN2
    CAN1->sFilterRegister[can2sb].FR1 = 0;
    CAN1->sFilterRegister[can2sb].FR2 = 0;
#endif
    CAN1->FM1R = 0;
 8002eea:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
    CAN1->FFA1R = 0;
 8002eee:	f8c0 4214 	str.w	r4, [r0, #532]	; 0x214
#if STM32_HAS_CAN2
    CAN1->FS1R = 1 | (1 << can2sb);
    CAN1->FA1R = 1 | (1 << can2sb);
#else
    CAN1->FS1R = 1;
 8002ef2:	f8c0 720c 	str.w	r7, [r0, #524]	; 0x20c
    CAN1->FA1R = 1;
 8002ef6:	f8c0 721c 	str.w	r7, [r0, #540]	; 0x21c
#endif
  }
  CAN1->FMR &= ~CAN_FMR_FINIT;
 8002efa:	f8d0 9200 	ldr.w	r9, [r0, #512]	; 0x200
  i2cp->config = NULL;
 8002efe:	f8ce 4004 	str.w	r4, [lr, #4]
 8002f02:	f029 0901 	bic.w	r9, r9, #1
 8002f06:	f8c0 9200 	str.w	r9, [r0, #512]	; 0x200

  /* Clock disabled, it will be enabled again in can_lld_start().*/
  rccDisableCAN1(FALSE);
 8002f0a:	69e8      	ldr	r0, [r5, #28]
 8002f0c:	f8ce 4014 	str.w	r4, [lr, #20]
 8002f10:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 8002f14:	61e8      	str	r0, [r5, #28]
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8002f16:	f102 0518 	add.w	r5, r2, #24
 8002f1a:	6195      	str	r5, [r2, #24]
 8002f1c:	f102 051c 	add.w	r5, r2, #28
 8002f20:	61d5      	str	r5, [r2, #28]
 8002f22:	e051      	b.n	8002fc8 <main+0x3d8>
 8002f24:	40021000 	.word	0x40021000
 8002f28:	40007000 	.word	0x40007000
 8002f2c:	20000cd0 	.word	0x20000cd0
 8002f30:	20000b54 	.word	0x20000b54
 8002f34:	08004070 	.word	0x08004070
 8002f38:	48000400 	.word	0x48000400
 8002f3c:	48001000 	.word	0x48001000
 8002f40:	48000800 	.word	0x48000800
 8002f44:	48001400 	.word	0x48001400
 8002f48:	20000bec 	.word	0x20000bec
 8002f4c:	2a80a800 	.word	0x2a80a800
 8002f50:	ffff00c0 	.word	0xffff00c0
 8002f54:	55550040 	.word	0x55550040
 8002f58:	20000bb4 	.word	0x20000bb4
 8002f5c:	080040fc 	.word	0x080040fc
 8002f60:	20000c94 	.word	0x20000c94
 8002f64:	50000100 	.word	0x50000100
 8002f68:	50000400 	.word	0x50000400
 8002f6c:	e000e100 	.word	0xe000e100
 8002f70:	50000500 	.word	0x50000500
 8002f74:	20000800 	.word	0x20000800
 8002f78:	40006400 	.word	0x40006400
 8002f7c:	20000ad0 	.word	0x20000ad0
 8002f80:	40020000 	.word	0x40020000
 8002f84:	40020400 	.word	0x40020400
 8002f88:	40010000 	.word	0x40010000
 8002f8c:	3cc0fc00 	.word	0x3cc0fc00
 8002f90:	48000c00 	.word	0x48000c00
 8002f94:	55550515 	.word	0x55550515
 8002f98:	64151154 	.word	0x64151154
 8002f9c:	55500000 	.word	0x55500000
 8002fa0:	20000c5c 	.word	0x20000c5c
 8002fa4:	05555555 	.word	0x05555555
 8002fa8:	01155515 	.word	0x01155515
 8002fac:	55555550 	.word	0x55555550
 8002fb0:	20000c24 	.word	0x20000c24
 8002fb4:	50000300 	.word	0x50000300
 8002fb8:	50000700 	.word	0x50000700
 8002fbc:	20000cf8 	.word	0x20000cf8
 8002fc0:	20000b4c 	.word	0x20000b4c
 8002fc4:	20000bd0 	.word	0x20000bd0
 8002fc8:	f102 0520 	add.w	r5, r2, #32
 8002fcc:	6215      	str	r5, [r2, #32]
 8002fce:	f102 0524 	add.w	r5, r2, #36	; 0x24
 8002fd2:	6255      	str	r5, [r2, #36]	; 0x24
 8002fd4:	f102 0528 	add.w	r5, r2, #40	; 0x28
 8002fd8:	4618      	mov	r0, r3
 8002fda:	6295      	str	r5, [r2, #40]	; 0x28
#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
#if STM32_I2C_USE_DMA == TRUE
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 8002fdc:	f1a6 0214 	sub.w	r2, r6, #20
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 8002fe0:	f1a6 0b28 	sub.w	fp, r6, #40	; 0x28
#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
#if STM32_I2C_USE_DMA == TRUE
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 8002fe4:	f8ce 2028 	str.w	r2, [lr, #40]	; 0x28
 8002fe8:	f8df 931c 	ldr.w	r9, [pc, #796]	; 8003308 <main+0x718>
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
 8002fec:	4db7      	ldr	r5, [pc, #732]	; (80032cc <main+0x6dc>)
 8002fee:	f8ce 5030 	str.w	r5, [lr, #48]	; 0x30
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002ff2:	f10e 020c 	add.w	r2, lr, #12
#if STM32_I2C_USE_DMA == TRUE
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 8002ff6:	f8ce b02c 	str.w	fp, [lr, #44]	; 0x2c
 8002ffa:	f8ce 200c 	str.w	r2, [lr, #12]
  tqp->p_prev = (thread_t *)tqp;
 8002ffe:	f8ce 2010 	str.w	r2, [lr, #16]
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 8003002:	f88e 7000 	strb.w	r7, [lr]
 */
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
 8003006:	f8ce 401c 	str.w	r4, [lr, #28]
 800300a:	f888 7000 	strb.w	r7, [r8]
  extp->config = NULL;
 800300e:	f8c8 4004 	str.w	r4, [r8, #4]
 8003012:	f88c 7000 	strb.w	r7, [ip]
  pwmp->config   = NULL;
 8003016:	f8cc 4004 	str.w	r4, [ip, #4]
 800301a:	f840 9b04 	str.w	r9, [r0], #4
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 800301e:	f8df a2ec 	ldr.w	sl, [pc, #748]	; 800330c <main+0x71c>
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8003022:	615c      	str	r4, [r3, #20]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8003024:	2510      	movs	r5, #16
#endif

#if STM32_PWM_USE_TIM2
  /* Driver initialization.*/
  pwmObjectInit(&PWMD2);
  PWMD2.channels = STM32_TIM2_CHANNELS;
 8003026:	f04f 0904 	mov.w	r9, #4
  PWMD2.tim = STM32_TIM2;
 800302a:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800302e:	f06f 0b3f 	mvn.w	fp, #63	; 0x3f
 8003032:	639d      	str	r5, [r3, #56]	; 0x38
  pwmp->enabled  = 0;
 8003034:	f8cc 400c 	str.w	r4, [ip, #12]
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8003038:	721f      	strb	r7, [r3, #8]
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 800303a:	629c      	str	r4, [r3, #40]	; 0x28
  iqp->q_link    = link;
 800303c:	62db      	str	r3, [r3, #44]	; 0x2c
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 800303e:	651b      	str	r3, [r3, #80]	; 0x50
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
 8003040:	4aa3      	ldr	r2, [pc, #652]	; (80032d0 <main+0x6e0>)
 8003042:	f881 b325 	strb.w	fp, [r1, #805]	; 0x325
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8003046:	f103 0e74 	add.w	lr, r3, #116	; 0x74
 800304a:	6058      	str	r0, [r3, #4]
#endif

#if STM32_PWM_USE_TIM2
  /* Driver initialization.*/
  pwmObjectInit(&PWMD2);
  PWMD2.channels = STM32_TIM2_CHANNELS;
 800304c:	f88c 9010 	strb.w	r9, [ip, #16]
  PWMD2.tim = STM32_TIM2;
 8003050:	f8cc 8018 	str.w	r8, [ip, #24]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003054:	f04f 0920 	mov.w	r9, #32
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8003058:	f103 080c 	add.w	r8, r3, #12
  oqp->q_notify  = onfy;
 800305c:	4d9d      	ldr	r5, [pc, #628]	; (80032d4 <main+0x6e4>)
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1;
 800305e:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 8003310 <main+0x720>
  SD1.clock = STM32_USART1CLK;
 8003062:	489d      	ldr	r0, [pc, #628]	; (80032d8 <main+0x6e8>)
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8003064:	f8c3 e040 	str.w	lr, [r3, #64]	; 0x40
  oqp->q_notify  = onfy;
 8003068:	64dd      	str	r5, [r3, #76]	; 0x4c
  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 800306a:	f103 0e64 	add.w	lr, r3, #100	; 0x64
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1;
 800306e:	f8c3 b074 	str.w	fp, [r3, #116]	; 0x74
  SD1.clock = STM32_USART1CLK;
 8003072:	6798      	str	r0, [r3, #120]	; 0x78
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8003074:	f103 0c54 	add.w	ip, r3, #84	; 0x54
 8003078:	f8c1 9184 	str.w	r9, [r1, #388]	; 0x184
 800307c:	f103 0530 	add.w	r5, r3, #48	; 0x30
 8003080:	f8c3 800c 	str.w	r8, [r3, #12]
 8003084:	f10a 0b0c 	add.w	fp, sl, #12
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003088:	f8c1 9004 	str.w	r9, [r1, #4]
 */
void spi_lld_init(void) {

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 800308c:	4893      	ldr	r0, [pc, #588]	; (80032dc <main+0x6ec>)
  tqp->p_prev = (thread_t *)tqp;
 800308e:	f8c3 8010 	str.w	r8, [r3, #16]
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 8003092:	f1a6 0978 	sub.w	r9, r6, #120	; 0x78
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 8003096:	f241 010a 	movw	r1, #4106	; 0x100a

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 800309a:	3e64      	subs	r6, #100	; 0x64
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 800309c:	f241 0818 	movw	r8, #4120	; 0x1018
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 80030a0:	f8c3 e01c 	str.w	lr, [r3, #28]
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 80030a4:	f8c3 e03c 	str.w	lr, [r3, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 80030a8:	f8c3 e048 	str.w	lr, [r3, #72]	; 0x48
  oqp->q_wrptr   = bp;
 80030ac:	f8c3 e044 	str.w	lr, [r3, #68]	; 0x44
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 80030b0:	f8c3 c018 	str.w	ip, [r3, #24]
  iqp->q_rdptr   = bp;
 80030b4:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
  iqp->q_wrptr   = bp;
 80030b8:	f8c3 c020 	str.w	ip, [r3, #32]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80030bc:	631d      	str	r5, [r3, #48]	; 0x30
  tqp->p_prev = (thread_t *)tqp;
 80030be:	635d      	str	r5, [r3, #52]	; 0x34
 80030c0:	f88a 7000 	strb.w	r7, [sl]
  spip->config = NULL;
 80030c4:	f8ca 4004 	str.w	r4, [sl, #4]
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 80030c8:	f8ca 4008 	str.w	r4, [sl, #8]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80030cc:	f8ca b00c 	str.w	fp, [sl, #12]
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 80030d0:	46a6      	mov	lr, r4
  tqp->p_prev = (thread_t *)tqp;
 80030d2:	f8ca b010 	str.w	fp, [sl, #16]
 80030d6:	f102 0328 	add.w	r3, r2, #40	; 0x28
#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 80030da:	f8ca 1028 	str.w	r1, [sl, #40]	; 0x28
 80030de:	f8ca 4014 	str.w	r4, [sl, #20]
 */
void spi_lld_init(void) {

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 80030e2:	f8ca 001c 	str.w	r0, [sl, #28]
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 80030e6:	f8ca 9020 	str.w	r9, [sl, #32]
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 80030ea:	f8ca 6024 	str.w	r6, [sl, #36]	; 0x24
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 80030ee:	f8ca 802c 	str.w	r8, [sl, #44]	; 0x2c
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
 80030f2:	7017      	strb	r7, [r2, #0]
  usbp->config       = NULL;
 80030f4:	6054      	str	r4, [r2, #4]
 80030f6:	f102 0144 	add.w	r1, r2, #68	; 0x44
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 80030fa:	f843 ef04 	str.w	lr, [r3, #4]!
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 80030fe:	428b      	cmp	r3, r1
    usbp->in_params[i]  = NULL;
 8003100:	f04f 0500 	mov.w	r5, #0
    usbp->out_params[i] = NULL;
 8003104:	f8c3 e01c 	str.w	lr, [r3, #28]
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 8003108:	d1f7      	bne.n	80030fa <main+0x50a>
  SCB->SHP[_SHP_IDX(handler)] = (SCB->SHP[_SHP_IDX(handler)] & ~(0xFFU << _BIT_SHIFT(handler))) |
                                (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(handler));
#elif defined(__CORE_CM7_H_GENERIC)
  SCB->SHPR[handler] = NVIC_PRIORITY_MASK(prio);
#else
  SCB->SHP[handler] = NVIC_PRIORITY_MASK(prio);
 800310a:	4b75      	ldr	r3, [pc, #468]	; (80032e0 <main+0x6f0>)
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
 800310c:	4875      	ldr	r0, [pc, #468]	; (80032e4 <main+0x6f4>)
    usbp->in_params[i]  = NULL;
    usbp->out_params[i] = NULL;
  }
  usbp->transmitting = 0;
 800310e:	8115      	strh	r5, [r2, #8]
  SysTick->VAL = 0;
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8003110:	f04f 0c07 	mov.w	ip, #7
 8003114:	f04f 0e80 	mov.w	lr, #128	; 0x80
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
 8003118:	f641 481f 	movw	r8, #7199	; 0x1c1f
 800311c:	f8c0 8004 	str.w	r8, [r0, #4]
  SysTick->VAL = 0;
 8003120:	6085      	str	r5, [r0, #8]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8003122:	f8c0 c000 	str.w	ip, [r0]
 8003126:	f883 e023 	strb.w	lr, [r3, #35]	; 0x23
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 800312a:	609d      	str	r5, [r3, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800312c:	68d8      	ldr	r0, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800312e:	496e      	ldr	r1, [pc, #440]	; (80032e8 <main+0x6f8>)
  usbp->receiving    = 0;
 8003130:	8155      	strh	r5, [r2, #10]
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8003132:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
 8003136:	4002      	ands	r2, r0

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003138:	4e6c      	ldr	r6, [pc, #432]	; (80032ec <main+0x6fc>)
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800313a:	4c6d      	ldr	r4, [pc, #436]	; (80032f0 <main+0x700>)
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800313c:	4f6d      	ldr	r7, [pc, #436]	; (80032f4 <main+0x704>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800313e:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8003314 <main+0x724>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8003142:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 8003318 <main+0x728>
  reg_value  =  (reg_value                                   |
 8003146:	4311      	orrs	r1, r2
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8003148:	60d9      	str	r1, [r3, #12]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800314a:	68f2      	ldr	r2, [r6, #12]
  tqp->p_prev = (thread_t *)tqp;
 800314c:	6064      	str	r4, [r4, #4]
 800314e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003152:	60f2      	str	r2, [r6, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003154:	683a      	ldr	r2, [r7, #0]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 8003156:	60a5      	str	r5, [r4, #8]
 8003158:	f042 0201 	orr.w	r2, r2, #1
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800315c:	2010      	movs	r0, #16
 800315e:	2620      	movs	r6, #32
 8003160:	603a      	str	r2, [r7, #0]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8003162:	f104 011c 	add.w	r1, r4, #28
 8003166:	77d8      	strb	r0, [r3, #31]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 8003168:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800316c:	f883 6022 	strb.w	r6, [r3, #34]	; 0x22
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8003170:	a802      	add	r0, sp, #8

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8003172:	f04f 0800 	mov.w	r8, #0
 8003176:	f04f 0900 	mov.w	r9, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800317a:	6024      	str	r4, [r4, #0]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 800317c:	61e1      	str	r1, [r4, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 800317e:	6221      	str	r1, [r4, #32]
  ch.vtlist.vt_delta = (systime_t)-1;
 8003180:	6262      	str	r2, [r4, #36]	; 0x24
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8003182:	9202      	str	r2, [sp, #8]
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8003184:	e9cd 8906 	strd	r8, r9, [sp, #24]
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 8003188:	9503      	str	r5, [sp, #12]
  tmp->last       = (rtcnt_t)0;
 800318a:	9504      	str	r5, [sp, #16]
  tmp->n          = (ucnt_t)0;
 800318c:	9505      	str	r5, [sp, #20]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 800318e:	6124      	str	r4, [r4, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 8003190:	6164      	str	r4, [r4, #20]
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
 8003192:	62a5      	str	r5, [r4, #40]	; 0x28
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8003194:	67a5      	str	r5, [r4, #120]	; 0x78
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8003196:	f000 fe6b 	bl	8003e70 <chTMStartMeasurementX.constprop.40>
  chTMStopMeasurementX(&tm);
 800319a:	a802      	add	r0, sp, #8
 800319c:	f7ff f9f8 	bl	8002590 <chTMStopMeasurementX>
 80031a0:	4b55      	ldr	r3, [pc, #340]	; (80032f8 <main+0x708>)
 80031a2:	4856      	ldr	r0, [pc, #344]	; (80032fc <main+0x70c>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80031a4:	4a56      	ldr	r2, [pc, #344]	; (8003300 <main+0x710>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80031a6:	f8d4 e014 	ldr.w	lr, [r4, #20]
  ch.tm.offset = tm.last;
 80031aa:	9f04      	ldr	r7, [sp, #16]
 80031ac:	f8df 916c 	ldr.w	r9, [pc, #364]	; 800331c <main+0x72c>
 80031b0:	67a7      	str	r7, [r4, #120]	; 0x78
 80031b2:	f103 0810 	add.w	r8, r3, #16
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80031b6:	f04f 0c40 	mov.w	ip, #64	; 0x40
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80031ba:	f104 0130 	add.w	r1, r4, #48	; 0x30
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80031be:	2701      	movs	r7, #1
 80031c0:	f8c3 8010 	str.w	r8, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 80031c4:	f8c3 8014 	str.w	r8, [r3, #20]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80031c8:	f8c4 c038 	str.w	ip, [r4, #56]	; 0x38
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80031cc:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80031d0:	f020 0007 	bic.w	r0, r0, #7
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80031d4:	f104 0c5c 	add.w	ip, r4, #92	; 0x5c
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80031d8:	f022 0207 	bic.w	r2, r2, #7
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 80031dc:	f104 0858 	add.w	r8, r4, #88	; 0x58
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80031e0:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 80031e4:	66e5      	str	r5, [r4, #108]	; 0x6c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 80031e6:	66a5      	str	r5, [r4, #104]	; 0x68
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
 80031e8:	6525      	str	r5, [r4, #80]	; 0x50
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 80031ea:	64a5      	str	r5, [r4, #72]	; 0x48
  REG_INSERT(tp);
 80031ec:	6424      	str	r4, [r4, #64]	; 0x40
 80031ee:	f8c4 e044 	str.w	lr, [r4, #68]	; 0x44
 80031f2:	619d      	str	r5, [r3, #24]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80031f4:	f884 704e 	strb.w	r7, [r4, #78]	; 0x4e
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80031f8:	f8ca 0000 	str.w	r0, [sl]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80031fc:	f8ce 1010 	str.w	r1, [lr, #16]
  default_heap.h_free.h.u.next = NULL;
 8003200:	609d      	str	r5, [r3, #8]
  default_heap.h_free.h.size = 0;
 8003202:	60dd      	str	r5, [r3, #12]
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8003204:	f8c3 b000 	str.w	fp, [r3]
 8003208:	6161      	str	r1, [r4, #20]
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800320a:	61a1      	str	r1, [r4, #24]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 800320c:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
 8003210:	f8c4 8058 	str.w	r8, [r4, #88]	; 0x58
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8003214:	f8c4 c05c 	str.w	ip, [r4, #92]	; 0x5c
  tqp->p_prev = (thread_t *)tqp;
 8003218:	f8c4 c060 	str.w	ip, [r4, #96]	; 0x60
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800321c:	f8c9 2000 	str.w	r2, [r9]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8003220:	f04f 0a02 	mov.w	sl, #2
 8003224:	f385 8811 	msr	BASEPRI, r5
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003228:	b662      	cpsie	i
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 800322a:	69a3      	ldr	r3, [r4, #24]
 800322c:	4a35      	ldr	r2, [pc, #212]	; (8003304 <main+0x714>)
 800322e:	619a      	str	r2, [r3, #24]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003230:	f386 8811 	msr	BASEPRI, r6

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8003234:	69a3      	ldr	r3, [r4, #24]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8003236:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
 800323a:	6899      	ldr	r1, [r3, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800323c:	6966      	ldr	r6, [r4, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800323e:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8003320 <main+0x730>
 8003242:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8003324 <main+0x734>
 8003246:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800324a:	f104 0280 	add.w	r2, r4, #128	; 0x80
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800324e:	f104 00ac 	add.w	r0, r4, #172	; 0xac

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8003252:	f504 79c2 	add.w	r9, r4, #388	; 0x184
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8003256:	f104 0ea8 	add.w	lr, r4, #168	; 0xa8
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800325a:	f884 a09c 	strb.w	sl, [r4, #156]	; 0x9c
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800325e:	f884 509d 	strb.w	r5, [r4, #157]	; 0x9d
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8003262:	f8c4 70c0 	str.w	r7, [r4, #192]	; 0xc0
  tp->p_mtxlist = NULL;
 8003266:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800326a:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
 800326e:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8003272:	f884 709e 	strb.w	r7, [r4, #158]	; 0x9e
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8003276:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
  REG_INSERT(tp);
 800327a:	f8c4 4090 	str.w	r4, [r4, #144]	; 0x90

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800327e:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
 8003282:	f8c4 81c4 	str.w	r8, [r4, #452]	; 0x1c4
 8003286:	f8c4 c1e4 	str.w	ip, [r4, #484]	; 0x1e4
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800328a:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
 800328e:	6132      	str	r2, [r6, #16]
 8003290:	6162      	str	r2, [r4, #20]
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8003292:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
 8003296:	f8c4 e0a8 	str.w	lr, [r4, #168]	; 0xa8
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800329a:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac
  tqp->p_prev = (thread_t *)tqp;
 800329e:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 80032a2:	b181      	cbz	r1, 80032c6 <main+0x6d6>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80032a4:	f884 509c 	strb.w	r5, [r4, #156]	; 0x9c
  cp = (thread_t *)&ch.rlist.r_queue;
 80032a8:	4623      	mov	r3, r4
  do {
    cp = cp->p_next;
 80032aa:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80032ac:	6899      	ldr	r1, [r3, #8]
 80032ae:	2900      	cmp	r1, #0
 80032b0:	d1fb      	bne.n	80032aa <main+0x6ba>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80032b2:	6858      	ldr	r0, [r3, #4]
 80032b4:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80032b8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80032bc:	6002      	str	r2, [r0, #0]
  cp->p_prev = tp;
 80032be:	605a      	str	r2, [r3, #4]
 80032c0:	f381 8811 	msr	BASEPRI, r1
 80032c4:	e7fe      	b.n	80032c4 <main+0x6d4>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80032c6:	7719      	strb	r1, [r3, #28]
 80032c8:	e7fe      	b.n	80032c8 <main+0x6d8>
 80032ca:	bf00      	nop
 80032cc:	40005400 	.word	0x40005400
 80032d0:	20000a1c 	.word	0x20000a1c
 80032d4:	080033d1 	.word	0x080033d1
 80032d8:	02255100 	.word	0x02255100
 80032dc:	40013000 	.word	0x40013000
 80032e0:	e000ed00 	.word	0xe000ed00
 80032e4:	e000e010 	.word	0xe000e010
 80032e8:	05fa0300 	.word	0x05fa0300
 80032ec:	e000edf0 	.word	0xe000edf0
 80032f0:	20000830 	.word	0x20000830
 80032f4:	e0001000 	.word	0xe0001000
 80032f8:	20000cd8 	.word	0x20000cd8
 80032fc:	20000d37 	.word	0x20000d37
 8003300:	2000a000 	.word	0x2000a000
 8003304:	08004160 	.word	0x08004160
 8003308:	08004050 	.word	0x08004050
 800330c:	20000aa0 	.word	0x20000aa0
 8003310:	40013800 	.word	0x40013800
 8003314:	20000ccc 	.word	0x20000ccc
 8003318:	08001991 	.word	0x08001991
 800331c:	20000a18 	.word	0x20000a18
 8003320:	08001a41 	.word	0x08001a41
 8003324:	08001929 	.word	0x08001929
	...

08003330 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8003330:	4924      	ldr	r1, [pc, #144]	; (80033c4 <__early_init+0x94>)
 8003332:	680b      	ldr	r3, [r1, #0]
 8003334:	f043 0301 	orr.w	r3, r3, #1
 8003338:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800333a:	680a      	ldr	r2, [r1, #0]
 800333c:	4b21      	ldr	r3, [pc, #132]	; (80033c4 <__early_init+0x94>)
 800333e:	0790      	lsls	r0, r2, #30
 8003340:	d5fb      	bpl.n	800333a <__early_init+0xa>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	f022 0203 	bic.w	r2, r2, #3
 8003348:	605a      	str	r2, [r3, #4]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	605a      	str	r2, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800334e:	4619      	mov	r1, r3
 8003350:	684b      	ldr	r3, [r1, #4]
 8003352:	4a1c      	ldr	r2, [pc, #112]	; (80033c4 <__early_init+0x94>)
 8003354:	f013 030c 	ands.w	r3, r3, #12
 8003358:	d1fa      	bne.n	8003350 <__early_init+0x20>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800335a:	6811      	ldr	r1, [r2, #0]
 800335c:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 8003360:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8003362:	6053      	str	r3, [r2, #4]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
 8003364:	6813      	ldr	r3, [r2, #0]
 8003366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800336a:	6013      	str	r3, [r2, #0]
#endif
  while (!(RCC->CR & RCC_CR_HSERDY))
 800336c:	6811      	ldr	r1, [r2, #0]
 800336e:	4b15      	ldr	r3, [pc, #84]	; (80033c4 <__early_init+0x94>)
 8003370:	0389      	lsls	r1, r1, #14
 8003372:	d5fb      	bpl.n	800336c <__early_init+0x3c>
    ;                                       /* Waits until HSE is stable.   */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8003374:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003376:	f042 0201 	orr.w	r2, r2, #1
 800337a:	625a      	str	r2, [r3, #36]	; 0x24
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 800337c:	461a      	mov	r2, r3
 800337e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8003380:	4b10      	ldr	r3, [pc, #64]	; (80033c4 <__early_init+0x94>)
 8003382:	0788      	lsls	r0, r1, #30
 8003384:	d5fb      	bpl.n	800337e <__early_init+0x4e>
    ;                                       /* Waits until LSI is stable.   */
#endif

  /* Clock settings.*/
  RCC->CFGR  = STM32_MCOSEL    | STM32_USBPRE    | STM32_PLLMUL   |
 8003386:	4a10      	ldr	r2, [pc, #64]	; (80033c8 <__early_init+0x98>)
 8003388:	605a      	str	r2, [r3, #4]
               STM32_PLLSRC    | STM32_PPRE1     | STM32_PPRE2    |
               STM32_HPRE;
  RCC->CFGR2 = STM32_ADC34PRES | STM32_ADC12PRES | STM32_PREDIV;
 800338a:	f44f 5104 	mov.w	r1, #8448	; 0x2100
  RCC->CFGR3 = STM32_UART5SW   | STM32_UART4SW   | STM32_USART3SW |
 800338e:	2230      	movs	r2, #48	; 0x30

  /* Clock settings.*/
  RCC->CFGR  = STM32_MCOSEL    | STM32_USBPRE    | STM32_PLLMUL   |
               STM32_PLLSRC    | STM32_PPRE1     | STM32_PPRE2    |
               STM32_HPRE;
  RCC->CFGR2 = STM32_ADC34PRES | STM32_ADC12PRES | STM32_PREDIV;
 8003390:	62d9      	str	r1, [r3, #44]	; 0x2c
  RCC->CFGR3 = STM32_UART5SW   | STM32_UART4SW   | STM32_USART3SW |
 8003392:	631a      	str	r2, [r3, #48]	; 0x30
               STM32_USART2SW  | STM32_I2C2SW    | STM32_I2C1SW   |
               STM32_USART1SW;

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CR   |= RCC_CR_PLLON;
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800339a:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800339c:	6819      	ldr	r1, [r3, #0]
 800339e:	4a09      	ldr	r2, [pc, #36]	; (80033c4 <__early_init+0x94>)
 80033a0:	0189      	lsls	r1, r1, #6
 80033a2:	d5fb      	bpl.n	800339c <__early_init+0x6c>
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 80033a4:	4b09      	ldr	r3, [pc, #36]	; (80033cc <__early_init+0x9c>)
 80033a6:	2112      	movs	r1, #18
 80033a8:	6019      	str	r1, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 80033aa:	6853      	ldr	r3, [r2, #4]
 80033ac:	f043 0302 	orr.w	r3, r3, #2
 80033b0:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80033b2:	6853      	ldr	r3, [r2, #4]
 80033b4:	4903      	ldr	r1, [pc, #12]	; (80033c4 <__early_init+0x94>)
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d1f9      	bne.n	80033b2 <__early_init+0x82>
    ;                                       /* Waits selection complete.    */
#endif

  /* After PLL activation because the special requirements for TIM1 and
     TIM8 bits.*/
  RCC->CFGR3 |= STM32_TIM8SW | STM32_TIM1SW;
 80033be:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80033c0:	630b      	str	r3, [r1, #48]	; 0x30
 80033c2:	4770      	bx	lr
 80033c4:	40021000 	.word	0x40021000
 80033c8:	001d2400 	.word	0x001d2400
 80033cc:	40022000 	.word	0x40022000

080033d0 <notify1.lto_priv.46>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE;
 80033d0:	4a02      	ldr	r2, [pc, #8]	; (80033dc <notify1.lto_priv.46+0xc>)
 80033d2:	6813      	ldr	r3, [r2, #0]
 80033d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	4770      	bx	lr
 80033dc:	40013800 	.word	0x40013800

080033e0 <VectorB0>:
/**
 * @brief   TIM2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM2_HANDLER) {
 80033e0:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
 80033e2:	4d17      	ldr	r5, [pc, #92]	; (8003440 <VectorB0+0x60>)
 80033e4:	69ab      	ldr	r3, [r5, #24]
 80033e6:	691a      	ldr	r2, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80033e8:	68dc      	ldr	r4, [r3, #12]
 80033ea:	4014      	ands	r4, r2
 80033ec:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
 80033ee:	43d2      	mvns	r2, r2
 80033f0:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80033f2:	07a3      	lsls	r3, r4, #30
 80033f4:	d504      	bpl.n	8003400 <VectorB0+0x20>
      (pwmp->config->channels[0].callback != NULL))
 80033f6:	686b      	ldr	r3, [r5, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
  uint32_t sr;

  sr  = pwmp->tim->SR;
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80033fa:	b10b      	cbz	r3, 8003400 <VectorB0+0x20>
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
 80033fc:	4628      	mov	r0, r5
 80033fe:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8003400:	0760      	lsls	r0, r4, #29
 8003402:	d504      	bpl.n	800340e <VectorB0+0x2e>
      (pwmp->config->channels[1].callback != NULL))
 8003404:	686b      	ldr	r3, [r5, #4]
 8003406:	699b      	ldr	r3, [r3, #24]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8003408:	b10b      	cbz	r3, 800340e <VectorB0+0x2e>
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
 800340a:	480d      	ldr	r0, [pc, #52]	; (8003440 <VectorB0+0x60>)
 800340c:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 800340e:	0721      	lsls	r1, r4, #28
 8003410:	d504      	bpl.n	800341c <VectorB0+0x3c>
      (pwmp->config->channels[2].callback != NULL))
 8003412:	686b      	ldr	r3, [r5, #4]
 8003414:	6a1b      	ldr	r3, [r3, #32]
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8003416:	b10b      	cbz	r3, 800341c <VectorB0+0x3c>
      (pwmp->config->channels[2].callback != NULL))
    pwmp->config->channels[2].callback(pwmp);
 8003418:	4809      	ldr	r0, [pc, #36]	; (8003440 <VectorB0+0x60>)
 800341a:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 800341c:	06e2      	lsls	r2, r4, #27
 800341e:	d504      	bpl.n	800342a <VectorB0+0x4a>
      (pwmp->config->channels[3].callback != NULL))
 8003420:	686b      	ldr	r3, [r5, #4]
 8003422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
      (pwmp->config->channels[2].callback != NULL))
    pwmp->config->channels[2].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8003424:	b10b      	cbz	r3, 800342a <VectorB0+0x4a>
      (pwmp->config->channels[3].callback != NULL))
    pwmp->config->channels[3].callback(pwmp);
 8003426:	4806      	ldr	r0, [pc, #24]	; (8003440 <VectorB0+0x60>)
 8003428:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 800342a:	07e3      	lsls	r3, r4, #31
 800342c:	d504      	bpl.n	8003438 <VectorB0+0x58>
 800342e:	686b      	ldr	r3, [r5, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	b10b      	cbz	r3, 8003438 <VectorB0+0x58>
    pwmp->config->callback(pwmp);
 8003434:	4802      	ldr	r0, [pc, #8]	; (8003440 <VectorB0+0x60>)
 8003436:	4798      	blx	r3
  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD2);

  OSAL_IRQ_EPILOGUE();
}
 8003438:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD2);

  OSAL_IRQ_EPILOGUE();
 800343c:	f7fe bf20 	b.w	8002280 <_port_irq_epilogue>
 8003440:	20000bd0 	.word	0x20000bd0
	...

08003450 <Vector148>:
OSAL_IRQ_HANDLER(Vector148) {
  uint32_t pr2;

  OSAL_IRQ_PROLOGUE();

  pr2 = EXTI->PR2;
 8003450:	4a08      	ldr	r2, [pc, #32]	; (8003474 <Vector148+0x24>)
/**
 * @brief   EXTI[33] interrupt handler (COMP7).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector148) {
 8003452:	b508      	push	{r3, lr}
  uint32_t pr2;

  OSAL_IRQ_PROLOGUE();

  pr2 = EXTI->PR2;
 8003454:	6b53      	ldr	r3, [r2, #52]	; 0x34
  pr2 = EXTI->IMR & (1U << 1);
 8003456:	6813      	ldr	r3, [r2, #0]
 8003458:	f003 0302 	and.w	r3, r3, #2
  EXTI->PR2 = pr2;
 800345c:	6353      	str	r3, [r2, #52]	; 0x34
  if (pr2 & (1U << 1))
 800345e:	b12b      	cbz	r3, 800346c <Vector148+0x1c>
    EXTD1.config->channels[33].cb(&EXTD1, 33);
 8003460:	4805      	ldr	r0, [pc, #20]	; (8003478 <Vector148+0x28>)
 8003462:	6843      	ldr	r3, [r0, #4]
 8003464:	2121      	movs	r1, #33	; 0x21
 8003466:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800346a:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800346c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr2 = EXTI->IMR & (1U << 1);
  EXTI->PR2 = pr2;
  if (pr2 & (1U << 1))
    EXTD1.config->channels[33].cb(&EXTD1, 33);

  OSAL_IRQ_EPILOGUE();
 8003470:	f7fe bf06 	b.w	8002280 <_port_irq_epilogue>
 8003474:	40010400 	.word	0x40010400
 8003478:	20000b4c 	.word	0x20000b4c
 800347c:	00000000 	.word	0x00000000

08003480 <Vector144>:
OSAL_IRQ_HANDLER(Vector144) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003480:	4a16      	ldr	r2, [pc, #88]	; (80034dc <Vector144+0x5c>)
 8003482:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & ((1U << 30) | (1U << 31));
 8003484:	6811      	ldr	r1, [r2, #0]
 8003486:	400b      	ands	r3, r1
/**
 * @brief   EXTI[30]...EXTI[32] interrupt handler (COMP4, COMP5, COMP6).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector144) {
 8003488:	b510      	push	{r4, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
  pr &= EXTI->IMR & ((1U << 30) | (1U << 31));
 800348a:	f003 4440 	and.w	r4, r3, #3221225472	; 0xc0000000
  EXTI->PR = pr;
  if (pr & (1U << 30))
 800348e:	005b      	lsls	r3, r3, #1

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
  pr &= EXTI->IMR & ((1U << 30) | (1U << 31));
  EXTI->PR = pr;
 8003490:	6154      	str	r4, [r2, #20]
  if (pr & (1U << 30))
 8003492:	d413      	bmi.n	80034bc <Vector144+0x3c>
    EXTD1.config->channels[30].cb(&EXTD1, 30);
  if (pr & (1U << 31))
 8003494:	2c00      	cmp	r4, #0
 8003496:	db19      	blt.n	80034cc <Vector144+0x4c>
    EXTD1.config->channels[31].cb(&EXTD1, 31);

  pr = EXTI->PR2 & EXTI->IMR2 & (1U << 0);
 8003498:	4a10      	ldr	r2, [pc, #64]	; (80034dc <Vector144+0x5c>)
 800349a:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800349c:	6a13      	ldr	r3, [r2, #32]
 800349e:	400b      	ands	r3, r1
 80034a0:	f003 0301 	and.w	r3, r3, #1
  EXTI->PR2 = pr;
 80034a4:	6353      	str	r3, [r2, #52]	; 0x34
  if (pr & (1U << 0))
 80034a6:	b12b      	cbz	r3, 80034b4 <Vector144+0x34>
    EXTD1.config->channels[32].cb(&EXTD1, 32);
 80034a8:	480d      	ldr	r0, [pc, #52]	; (80034e0 <Vector144+0x60>)
 80034aa:	6843      	ldr	r3, [r0, #4]
 80034ac:	2120      	movs	r1, #32
 80034ae:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80034b2:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 80034b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pr = EXTI->PR2 & EXTI->IMR2 & (1U << 0);
  EXTI->PR2 = pr;
  if (pr & (1U << 0))
    EXTD1.config->channels[32].cb(&EXTD1, 32);

  OSAL_IRQ_EPILOGUE();
 80034b8:	f7fe bee2 	b.w	8002280 <_port_irq_epilogue>

  pr = EXTI->PR;
  pr &= EXTI->IMR & ((1U << 30) | (1U << 31));
  EXTI->PR = pr;
  if (pr & (1U << 30))
    EXTD1.config->channels[30].cb(&EXTD1, 30);
 80034bc:	4808      	ldr	r0, [pc, #32]	; (80034e0 <Vector144+0x60>)
 80034be:	6843      	ldr	r3, [r0, #4]
 80034c0:	211e      	movs	r1, #30
 80034c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80034c6:	4798      	blx	r3
  if (pr & (1U << 31))
 80034c8:	2c00      	cmp	r4, #0
 80034ca:	dae5      	bge.n	8003498 <Vector144+0x18>
    EXTD1.config->channels[31].cb(&EXTD1, 31);
 80034cc:	4804      	ldr	r0, [pc, #16]	; (80034e0 <Vector144+0x60>)
 80034ce:	6843      	ldr	r3, [r0, #4]
 80034d0:	211f      	movs	r1, #31
 80034d2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80034d6:	4798      	blx	r3
 80034d8:	e7de      	b.n	8003498 <Vector144+0x18>
 80034da:	bf00      	nop
 80034dc:	40010400 	.word	0x40010400
 80034e0:	20000b4c 	.word	0x20000b4c
	...

080034f0 <Vector140>:
OSAL_IRQ_HANDLER(Vector140) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80034f0:	4a12      	ldr	r2, [pc, #72]	; (800353c <Vector140+0x4c>)
  pr &= EXTI->IMR & ((1U << 21) | (1U << 22) | (1U << 29));
 80034f2:	4913      	ldr	r1, [pc, #76]	; (8003540 <Vector140+0x50>)
OSAL_IRQ_HANDLER(Vector140) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80034f4:	6953      	ldr	r3, [r2, #20]
/**
 * @brief   EXTI[21],EXTI[22],EXTI[29] interrupt handler (COMP1, COMP2, COMP3).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector140) {
 80034f6:	b510      	push	{r4, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
  pr &= EXTI->IMR & ((1U << 21) | (1U << 22) | (1U << 29));
 80034f8:	6814      	ldr	r4, [r2, #0]
 80034fa:	401c      	ands	r4, r3
 80034fc:	4021      	ands	r1, r4
  EXTI->PR = pr;
 80034fe:	6151      	str	r1, [r2, #20]
  if (pr & (1U << 21))
 8003500:	02a1      	lsls	r1, r4, #10
 8003502:	d414      	bmi.n	800352e <Vector140+0x3e>
    EXTD1.config->channels[21].cb(&EXTD1, 21);
  if (pr & (1U << 22))
 8003504:	0262      	lsls	r2, r4, #9
 8003506:	d40b      	bmi.n	8003520 <Vector140+0x30>
    EXTD1.config->channels[22].cb(&EXTD1, 22);
  if (pr & (1U << 29))
 8003508:	00a3      	lsls	r3, r4, #2
 800350a:	d505      	bpl.n	8003518 <Vector140+0x28>
    EXTD1.config->channels[29].cb(&EXTD1, 29);
 800350c:	480d      	ldr	r0, [pc, #52]	; (8003544 <Vector140+0x54>)
 800350e:	6843      	ldr	r3, [r0, #4]
 8003510:	211d      	movs	r1, #29
 8003512:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003516:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8003518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (pr & (1U << 22))
    EXTD1.config->channels[22].cb(&EXTD1, 22);
  if (pr & (1U << 29))
    EXTD1.config->channels[29].cb(&EXTD1, 29);

  OSAL_IRQ_EPILOGUE();
 800351c:	f7fe beb0 	b.w	8002280 <_port_irq_epilogue>
  pr &= EXTI->IMR & ((1U << 21) | (1U << 22) | (1U << 29));
  EXTI->PR = pr;
  if (pr & (1U << 21))
    EXTD1.config->channels[21].cb(&EXTD1, 21);
  if (pr & (1U << 22))
    EXTD1.config->channels[22].cb(&EXTD1, 22);
 8003520:	4808      	ldr	r0, [pc, #32]	; (8003544 <Vector140+0x54>)
 8003522:	6843      	ldr	r3, [r0, #4]
 8003524:	2116      	movs	r1, #22
 8003526:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800352a:	4798      	blx	r3
 800352c:	e7ec      	b.n	8003508 <Vector140+0x18>

  pr = EXTI->PR;
  pr &= EXTI->IMR & ((1U << 21) | (1U << 22) | (1U << 29));
  EXTI->PR = pr;
  if (pr & (1U << 21))
    EXTD1.config->channels[21].cb(&EXTD1, 21);
 800352e:	4805      	ldr	r0, [pc, #20]	; (8003544 <Vector140+0x54>)
 8003530:	6843      	ldr	r3, [r0, #4]
 8003532:	2115      	movs	r1, #21
 8003534:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003538:	4798      	blx	r3
 800353a:	e7e3      	b.n	8003504 <Vector140+0x14>
 800353c:	40010400 	.word	0x40010400
 8003540:	20600000 	.word	0x20600000
 8003544:	20000b4c 	.word	0x20000b4c
	...

08003550 <Vector4C>:
OSAL_IRQ_HANDLER(Vector4C) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003550:	4a09      	ldr	r2, [pc, #36]	; (8003578 <Vector4C+0x28>)
/**
 * @brief   EXTI[20] interrupt handler (RTC Wakeup).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector4C) {
 8003552:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003554:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 20);
 8003556:	6813      	ldr	r3, [r2, #0]
 8003558:	400b      	ands	r3, r1
 800355a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
  EXTI->PR = pr;
 800355e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 20))
 8003560:	b12b      	cbz	r3, 800356e <Vector4C+0x1e>
    EXTD1.config->channels[20].cb(&EXTD1, 20);
 8003562:	4806      	ldr	r0, [pc, #24]	; (800357c <Vector4C+0x2c>)
 8003564:	6843      	ldr	r3, [r0, #4]
 8003566:	2114      	movs	r1, #20
 8003568:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800356c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800356e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 20);
  EXTI->PR = pr;
  if (pr & (1U << 20))
    EXTD1.config->channels[20].cb(&EXTD1, 20);

  OSAL_IRQ_EPILOGUE();
 8003572:	f7fe be85 	b.w	8002280 <_port_irq_epilogue>
 8003576:	bf00      	nop
 8003578:	40010400 	.word	0x40010400
 800357c:	20000b4c 	.word	0x20000b4c

08003580 <Vector48>:
OSAL_IRQ_HANDLER(Vector48) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003580:	4a09      	ldr	r2, [pc, #36]	; (80035a8 <Vector48+0x28>)
/**
 * @brief   EXTI[19] interrupt handler (Tamper TimeStamp).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector48) {
 8003582:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003584:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 19);
 8003586:	6813      	ldr	r3, [r2, #0]
 8003588:	400b      	ands	r3, r1
 800358a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  EXTI->PR = pr;
 800358e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 19))
 8003590:	b12b      	cbz	r3, 800359e <Vector48+0x1e>
    EXTD1.config->channels[19].cb(&EXTD1, 19);
 8003592:	4806      	ldr	r0, [pc, #24]	; (80035ac <Vector48+0x2c>)
 8003594:	6843      	ldr	r3, [r0, #4]
 8003596:	2113      	movs	r1, #19
 8003598:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800359c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800359e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 19);
  EXTI->PR = pr;
  if (pr & (1U << 19))
    EXTD1.config->channels[19].cb(&EXTD1, 19);

  OSAL_IRQ_EPILOGUE();
 80035a2:	f7fe be6d 	b.w	8002280 <_port_irq_epilogue>
 80035a6:	bf00      	nop
 80035a8:	40010400 	.word	0x40010400
 80035ac:	20000b4c 	.word	0x20000b4c

080035b0 <VectorE8>:
OSAL_IRQ_HANDLER(VectorE8) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80035b0:	4a09      	ldr	r2, [pc, #36]	; (80035d8 <VectorE8+0x28>)
/**
 * @brief   EXTI[18] interrupt handler (USB Wakeup).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorE8) {
 80035b2:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80035b4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 18);
 80035b6:	6813      	ldr	r3, [r2, #0]
 80035b8:	400b      	ands	r3, r1
 80035ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  EXTI->PR = pr;
 80035be:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 18))
 80035c0:	b12b      	cbz	r3, 80035ce <VectorE8+0x1e>
    EXTD1.config->channels[18].cb(&EXTD1, 18);
 80035c2:	4806      	ldr	r0, [pc, #24]	; (80035dc <VectorE8+0x2c>)
 80035c4:	6843      	ldr	r3, [r0, #4]
 80035c6:	2112      	movs	r1, #18
 80035c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035cc:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 80035ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 18);
  EXTI->PR = pr;
  if (pr & (1U << 18))
    EXTD1.config->channels[18].cb(&EXTD1, 18);

  OSAL_IRQ_EPILOGUE();
 80035d2:	f7fe be55 	b.w	8002280 <_port_irq_epilogue>
 80035d6:	bf00      	nop
 80035d8:	40010400 	.word	0x40010400
 80035dc:	20000b4c 	.word	0x20000b4c

080035e0 <VectorE4>:
OSAL_IRQ_HANDLER(VectorE4) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80035e0:	4a09      	ldr	r2, [pc, #36]	; (8003608 <VectorE4+0x28>)
/**
 * @brief   EXTI[17] interrupt handler (RTC Alarm).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorE4) {
 80035e2:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80035e4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 17);
 80035e6:	6813      	ldr	r3, [r2, #0]
 80035e8:	400b      	ands	r3, r1
 80035ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  EXTI->PR = pr;
 80035ee:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 17))
 80035f0:	b12b      	cbz	r3, 80035fe <VectorE4+0x1e>
    EXTD1.config->channels[17].cb(&EXTD1, 17);
 80035f2:	4806      	ldr	r0, [pc, #24]	; (800360c <VectorE4+0x2c>)
 80035f4:	6843      	ldr	r3, [r0, #4]
 80035f6:	2111      	movs	r1, #17
 80035f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035fc:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 80035fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 17);
  EXTI->PR = pr;
  if (pr & (1U << 17))
    EXTD1.config->channels[17].cb(&EXTD1, 17);

  OSAL_IRQ_EPILOGUE();
 8003602:	f7fe be3d 	b.w	8002280 <_port_irq_epilogue>
 8003606:	bf00      	nop
 8003608:	40010400 	.word	0x40010400
 800360c:	20000b4c 	.word	0x20000b4c

08003610 <Vector44>:
OSAL_IRQ_HANDLER(Vector44) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003610:	4a09      	ldr	r2, [pc, #36]	; (8003638 <Vector44+0x28>)
/**
 * @brief   EXTI[16] interrupt handler (PVD).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector44) {
 8003612:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003614:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 16);
 8003616:	6813      	ldr	r3, [r2, #0]
 8003618:	400b      	ands	r3, r1
 800361a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  EXTI->PR = pr;
 800361e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 16))
 8003620:	b12b      	cbz	r3, 800362e <Vector44+0x1e>
    EXTD1.config->channels[16].cb(&EXTD1, 16);
 8003622:	4806      	ldr	r0, [pc, #24]	; (800363c <Vector44+0x2c>)
 8003624:	6843      	ldr	r3, [r0, #4]
 8003626:	2110      	movs	r1, #16
 8003628:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800362c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800362e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 16);
  EXTI->PR = pr;
  if (pr & (1U << 16))
    EXTD1.config->channels[16].cb(&EXTD1, 16);

  OSAL_IRQ_EPILOGUE();
 8003632:	f7fe be25 	b.w	8002280 <_port_irq_epilogue>
 8003636:	bf00      	nop
 8003638:	40010400 	.word	0x40010400
 800363c:	20000b4c 	.word	0x20000b4c

08003640 <VectorE0>:
OSAL_IRQ_HANDLER(VectorE0) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003640:	4b1d      	ldr	r3, [pc, #116]	; (80036b8 <VectorE0+0x78>)
/**
 * @brief   EXTI[10]...EXTI[15] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorE0) {
 8003642:	b510      	push	{r4, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003644:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
 8003646:	681c      	ldr	r4, [r3, #0]
 8003648:	4014      	ands	r4, r2
 800364a:	f404 427c 	and.w	r2, r4, #64512	; 0xfc00
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;
 800364e:	615a      	str	r2, [r3, #20]
  if (pr & (1U << 10))
 8003650:	0562      	lsls	r2, r4, #21
 8003652:	d42a      	bmi.n	80036aa <VectorE0+0x6a>
    EXTD1.config->channels[10].cb(&EXTD1, 10);
  if (pr & (1U << 11))
 8003654:	0523      	lsls	r3, r4, #20
 8003656:	d422      	bmi.n	800369e <VectorE0+0x5e>
    EXTD1.config->channels[11].cb(&EXTD1, 11);
  if (pr & (1U << 12))
 8003658:	04e0      	lsls	r0, r4, #19
 800365a:	d41a      	bmi.n	8003692 <VectorE0+0x52>
    EXTD1.config->channels[12].cb(&EXTD1, 12);
  if (pr & (1U << 13))
 800365c:	04a1      	lsls	r1, r4, #18
 800365e:	d412      	bmi.n	8003686 <VectorE0+0x46>
    EXTD1.config->channels[13].cb(&EXTD1, 13);
  if (pr & (1U << 14))
 8003660:	0462      	lsls	r2, r4, #17
 8003662:	d40a      	bmi.n	800367a <VectorE0+0x3a>
    EXTD1.config->channels[14].cb(&EXTD1, 14);
  if (pr & (1U << 15))
 8003664:	0423      	lsls	r3, r4, #16
 8003666:	d504      	bpl.n	8003672 <VectorE0+0x32>
    EXTD1.config->channels[15].cb(&EXTD1, 15);
 8003668:	4814      	ldr	r0, [pc, #80]	; (80036bc <VectorE0+0x7c>)
 800366a:	6843      	ldr	r3, [r0, #4]
 800366c:	210f      	movs	r1, #15
 800366e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003670:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8003672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (pr & (1U << 14))
    EXTD1.config->channels[14].cb(&EXTD1, 14);
  if (pr & (1U << 15))
    EXTD1.config->channels[15].cb(&EXTD1, 15);

  OSAL_IRQ_EPILOGUE();
 8003676:	f7fe be03 	b.w	8002280 <_port_irq_epilogue>
  if (pr & (1U << 12))
    EXTD1.config->channels[12].cb(&EXTD1, 12);
  if (pr & (1U << 13))
    EXTD1.config->channels[13].cb(&EXTD1, 13);
  if (pr & (1U << 14))
    EXTD1.config->channels[14].cb(&EXTD1, 14);
 800367a:	4810      	ldr	r0, [pc, #64]	; (80036bc <VectorE0+0x7c>)
 800367c:	6843      	ldr	r3, [r0, #4]
 800367e:	210e      	movs	r1, #14
 8003680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003682:	4798      	blx	r3
 8003684:	e7ee      	b.n	8003664 <VectorE0+0x24>
  if (pr & (1U << 11))
    EXTD1.config->channels[11].cb(&EXTD1, 11);
  if (pr & (1U << 12))
    EXTD1.config->channels[12].cb(&EXTD1, 12);
  if (pr & (1U << 13))
    EXTD1.config->channels[13].cb(&EXTD1, 13);
 8003686:	480d      	ldr	r0, [pc, #52]	; (80036bc <VectorE0+0x7c>)
 8003688:	6843      	ldr	r3, [r0, #4]
 800368a:	210d      	movs	r1, #13
 800368c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800368e:	4798      	blx	r3
 8003690:	e7e6      	b.n	8003660 <VectorE0+0x20>
  if (pr & (1U << 10))
    EXTD1.config->channels[10].cb(&EXTD1, 10);
  if (pr & (1U << 11))
    EXTD1.config->channels[11].cb(&EXTD1, 11);
  if (pr & (1U << 12))
    EXTD1.config->channels[12].cb(&EXTD1, 12);
 8003692:	480a      	ldr	r0, [pc, #40]	; (80036bc <VectorE0+0x7c>)
 8003694:	6843      	ldr	r3, [r0, #4]
 8003696:	210c      	movs	r1, #12
 8003698:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800369a:	4798      	blx	r3
 800369c:	e7de      	b.n	800365c <VectorE0+0x1c>
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;
  if (pr & (1U << 10))
    EXTD1.config->channels[10].cb(&EXTD1, 10);
  if (pr & (1U << 11))
    EXTD1.config->channels[11].cb(&EXTD1, 11);
 800369e:	4807      	ldr	r0, [pc, #28]	; (80036bc <VectorE0+0x7c>)
 80036a0:	6843      	ldr	r3, [r0, #4]
 80036a2:	210b      	movs	r1, #11
 80036a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a6:	4798      	blx	r3
 80036a8:	e7d6      	b.n	8003658 <VectorE0+0x18>
  pr = EXTI->PR;
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;
  if (pr & (1U << 10))
    EXTD1.config->channels[10].cb(&EXTD1, 10);
 80036aa:	4804      	ldr	r0, [pc, #16]	; (80036bc <VectorE0+0x7c>)
 80036ac:	6843      	ldr	r3, [r0, #4]
 80036ae:	210a      	movs	r1, #10
 80036b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b2:	4798      	blx	r3
 80036b4:	e7ce      	b.n	8003654 <VectorE0+0x14>
 80036b6:	bf00      	nop
 80036b8:	40010400 	.word	0x40010400
 80036bc:	20000b4c 	.word	0x20000b4c

080036c0 <Vector9C>:
OSAL_IRQ_HANDLER(Vector9C) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80036c0:	4b19      	ldr	r3, [pc, #100]	; (8003728 <Vector9C+0x68>)
/**
 * @brief   EXTI[5]...EXTI[9] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector9C) {
 80036c2:	b510      	push	{r4, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80036c4:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
 80036c6:	681c      	ldr	r4, [r3, #0]
 80036c8:	4014      	ands	r4, r2
 80036ca:	f404 7278 	and.w	r2, r4, #992	; 0x3e0
                     (1U << 9));
  EXTI->PR = pr;
 80036ce:	615a      	str	r2, [r3, #20]
  if (pr & (1U << 5))
 80036d0:	06a3      	lsls	r3, r4, #26
 80036d2:	d422      	bmi.n	800371a <Vector9C+0x5a>
    EXTD1.config->channels[5].cb(&EXTD1, 5);
  if (pr & (1U << 6))
 80036d4:	0660      	lsls	r0, r4, #25
 80036d6:	d41a      	bmi.n	800370e <Vector9C+0x4e>
    EXTD1.config->channels[6].cb(&EXTD1, 6);
  if (pr & (1U << 7))
 80036d8:	0621      	lsls	r1, r4, #24
 80036da:	d412      	bmi.n	8003702 <Vector9C+0x42>
    EXTD1.config->channels[7].cb(&EXTD1, 7);
  if (pr & (1U << 8))
 80036dc:	05e2      	lsls	r2, r4, #23
 80036de:	d40a      	bmi.n	80036f6 <Vector9C+0x36>
    EXTD1.config->channels[8].cb(&EXTD1, 8);
  if (pr & (1U << 9))
 80036e0:	05a3      	lsls	r3, r4, #22
 80036e2:	d504      	bpl.n	80036ee <Vector9C+0x2e>
    EXTD1.config->channels[9].cb(&EXTD1, 9);
 80036e4:	4811      	ldr	r0, [pc, #68]	; (800372c <Vector9C+0x6c>)
 80036e6:	6843      	ldr	r3, [r0, #4]
 80036e8:	2109      	movs	r1, #9
 80036ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ec:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 80036ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (pr & (1U << 8))
    EXTD1.config->channels[8].cb(&EXTD1, 8);
  if (pr & (1U << 9))
    EXTD1.config->channels[9].cb(&EXTD1, 9);

  OSAL_IRQ_EPILOGUE();
 80036f2:	f7fe bdc5 	b.w	8002280 <_port_irq_epilogue>
  if (pr & (1U << 6))
    EXTD1.config->channels[6].cb(&EXTD1, 6);
  if (pr & (1U << 7))
    EXTD1.config->channels[7].cb(&EXTD1, 7);
  if (pr & (1U << 8))
    EXTD1.config->channels[8].cb(&EXTD1, 8);
 80036f6:	480d      	ldr	r0, [pc, #52]	; (800372c <Vector9C+0x6c>)
 80036f8:	6843      	ldr	r3, [r0, #4]
 80036fa:	2108      	movs	r1, #8
 80036fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fe:	4798      	blx	r3
 8003700:	e7ee      	b.n	80036e0 <Vector9C+0x20>
  if (pr & (1U << 5))
    EXTD1.config->channels[5].cb(&EXTD1, 5);
  if (pr & (1U << 6))
    EXTD1.config->channels[6].cb(&EXTD1, 6);
  if (pr & (1U << 7))
    EXTD1.config->channels[7].cb(&EXTD1, 7);
 8003702:	480a      	ldr	r0, [pc, #40]	; (800372c <Vector9C+0x6c>)
 8003704:	6843      	ldr	r3, [r0, #4]
 8003706:	2107      	movs	r1, #7
 8003708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370a:	4798      	blx	r3
 800370c:	e7e6      	b.n	80036dc <Vector9C+0x1c>
                     (1U << 9));
  EXTI->PR = pr;
  if (pr & (1U << 5))
    EXTD1.config->channels[5].cb(&EXTD1, 5);
  if (pr & (1U << 6))
    EXTD1.config->channels[6].cb(&EXTD1, 6);
 800370e:	4807      	ldr	r0, [pc, #28]	; (800372c <Vector9C+0x6c>)
 8003710:	6843      	ldr	r3, [r0, #4]
 8003712:	2106      	movs	r1, #6
 8003714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003716:	4798      	blx	r3
 8003718:	e7de      	b.n	80036d8 <Vector9C+0x18>
  pr = EXTI->PR;
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
                     (1U << 9));
  EXTI->PR = pr;
  if (pr & (1U << 5))
    EXTD1.config->channels[5].cb(&EXTD1, 5);
 800371a:	4804      	ldr	r0, [pc, #16]	; (800372c <Vector9C+0x6c>)
 800371c:	6843      	ldr	r3, [r0, #4]
 800371e:	2105      	movs	r1, #5
 8003720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003722:	4798      	blx	r3
 8003724:	e7d6      	b.n	80036d4 <Vector9C+0x14>
 8003726:	bf00      	nop
 8003728:	40010400 	.word	0x40010400
 800372c:	20000b4c 	.word	0x20000b4c

08003730 <Vector68>:
OSAL_IRQ_HANDLER(Vector68) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003730:	4a08      	ldr	r2, [pc, #32]	; (8003754 <Vector68+0x24>)
/**
 * @brief   EXTI[4] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector68) {
 8003732:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003734:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 4);
 8003736:	6813      	ldr	r3, [r2, #0]
 8003738:	400b      	ands	r3, r1
 800373a:	f003 0310 	and.w	r3, r3, #16
  EXTI->PR = pr;
 800373e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 4))
 8003740:	b123      	cbz	r3, 800374c <Vector68+0x1c>
    EXTD1.config->channels[4].cb(&EXTD1, 4);
 8003742:	4805      	ldr	r0, [pc, #20]	; (8003758 <Vector68+0x28>)
 8003744:	6843      	ldr	r3, [r0, #4]
 8003746:	2104      	movs	r1, #4
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800374c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 4);
  EXTI->PR = pr;
  if (pr & (1U << 4))
    EXTD1.config->channels[4].cb(&EXTD1, 4);

  OSAL_IRQ_EPILOGUE();
 8003750:	f7fe bd96 	b.w	8002280 <_port_irq_epilogue>
 8003754:	40010400 	.word	0x40010400
 8003758:	20000b4c 	.word	0x20000b4c
 800375c:	00000000 	.word	0x00000000

08003760 <Vector64>:
OSAL_IRQ_HANDLER(Vector64) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003760:	4a08      	ldr	r2, [pc, #32]	; (8003784 <Vector64+0x24>)
/**
 * @brief   EXTI[3] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector64) {
 8003762:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003764:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 3);
 8003766:	6813      	ldr	r3, [r2, #0]
 8003768:	400b      	ands	r3, r1
 800376a:	f003 0308 	and.w	r3, r3, #8
  EXTI->PR = pr;
 800376e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 3))
 8003770:	b123      	cbz	r3, 800377c <Vector64+0x1c>
    EXTD1.config->channels[3].cb(&EXTD1, 3);
 8003772:	4805      	ldr	r0, [pc, #20]	; (8003788 <Vector64+0x28>)
 8003774:	6843      	ldr	r3, [r0, #4]
 8003776:	2103      	movs	r1, #3
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800377c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 3);
  EXTI->PR = pr;
  if (pr & (1U << 3))
    EXTD1.config->channels[3].cb(&EXTD1, 3);

  OSAL_IRQ_EPILOGUE();
 8003780:	f7fe bd7e 	b.w	8002280 <_port_irq_epilogue>
 8003784:	40010400 	.word	0x40010400
 8003788:	20000b4c 	.word	0x20000b4c
 800378c:	00000000 	.word	0x00000000

08003790 <Vector60>:
OSAL_IRQ_HANDLER(Vector60) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003790:	4a08      	ldr	r2, [pc, #32]	; (80037b4 <Vector60+0x24>)
/**
 * @brief   EXTI[2] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector60) {
 8003792:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003794:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 2);
 8003796:	6813      	ldr	r3, [r2, #0]
 8003798:	400b      	ands	r3, r1
 800379a:	f003 0304 	and.w	r3, r3, #4
  EXTI->PR = pr;
 800379e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 2))
 80037a0:	b123      	cbz	r3, 80037ac <Vector60+0x1c>
    EXTD1.config->channels[2].cb(&EXTD1, 2);
 80037a2:	4805      	ldr	r0, [pc, #20]	; (80037b8 <Vector60+0x28>)
 80037a4:	6843      	ldr	r3, [r0, #4]
 80037a6:	2102      	movs	r1, #2
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 80037ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 2);
  EXTI->PR = pr;
  if (pr & (1U << 2))
    EXTD1.config->channels[2].cb(&EXTD1, 2);

  OSAL_IRQ_EPILOGUE();
 80037b0:	f7fe bd66 	b.w	8002280 <_port_irq_epilogue>
 80037b4:	40010400 	.word	0x40010400
 80037b8:	20000b4c 	.word	0x20000b4c
 80037bc:	00000000 	.word	0x00000000

080037c0 <Vector5C>:
OSAL_IRQ_HANDLER(Vector5C) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80037c0:	4a08      	ldr	r2, [pc, #32]	; (80037e4 <Vector5C+0x24>)
/**
 * @brief   EXTI[1] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector5C) {
 80037c2:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80037c4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 1);
 80037c6:	6813      	ldr	r3, [r2, #0]
 80037c8:	400b      	ands	r3, r1
 80037ca:	f003 0302 	and.w	r3, r3, #2
  EXTI->PR = pr;
 80037ce:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 1))
 80037d0:	b123      	cbz	r3, 80037dc <Vector5C+0x1c>
    EXTD1.config->channels[1].cb(&EXTD1, 1);
 80037d2:	4805      	ldr	r0, [pc, #20]	; (80037e8 <Vector5C+0x28>)
 80037d4:	6843      	ldr	r3, [r0, #4]
 80037d6:	2101      	movs	r1, #1
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 80037dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 1);
  EXTI->PR = pr;
  if (pr & (1U << 1))
    EXTD1.config->channels[1].cb(&EXTD1, 1);

  OSAL_IRQ_EPILOGUE();
 80037e0:	f7fe bd4e 	b.w	8002280 <_port_irq_epilogue>
 80037e4:	40010400 	.word	0x40010400
 80037e8:	20000b4c 	.word	0x20000b4c
 80037ec:	00000000 	.word	0x00000000

080037f0 <Vector58>:
OSAL_IRQ_HANDLER(Vector58) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80037f0:	4a08      	ldr	r2, [pc, #32]	; (8003814 <Vector58+0x24>)
/**
 * @brief   EXTI[0] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector58) {
 80037f2:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80037f4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 0);
 80037f6:	6813      	ldr	r3, [r2, #0]
 80037f8:	400b      	ands	r3, r1
 80037fa:	f003 0301 	and.w	r3, r3, #1
  EXTI->PR = pr;
 80037fe:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 0))
 8003800:	b123      	cbz	r3, 800380c <Vector58+0x1c>
    EXTD1.config->channels[0].cb(&EXTD1, 0);
 8003802:	4805      	ldr	r0, [pc, #20]	; (8003818 <Vector58+0x28>)
 8003804:	6843      	ldr	r3, [r0, #4]
 8003806:	2100      	movs	r1, #0
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800380c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 0);
  EXTI->PR = pr;
  if (pr & (1U << 0))
    EXTD1.config->channels[0].cb(&EXTD1, 0);

  OSAL_IRQ_EPILOGUE();
 8003810:	f7fe bd36 	b.w	8002280 <_port_irq_epilogue>
 8003814:	40010400 	.word	0x40010400
 8003818:	20000b4c 	.word	0x20000b4c
 800381c:	00000000 	.word	0x00000000

08003820 <Vector98>:
/**
 * @brief   CAN1 SCE interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_SCE_HANDLER) {
 8003820:	b538      	push	{r3, r4, r5, lr}
 */
static void can_lld_sce_handler(CANDriver *canp) {
  uint32_t msr;

  /* Clearing IRQ sources.*/
  msr = canp->can->MSR;
 8003822:	4d15      	ldr	r5, [pc, #84]	; (8003878 <Vector98+0x58>)
 8003824:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003826:	685c      	ldr	r4, [r3, #4]
  canp->can->MSR = msr;
 8003828:	605c      	str	r4, [r3, #4]

  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
 800382a:	0722      	lsls	r2, r4, #28
 800382c:	d411      	bmi.n	8003852 <Vector98+0x32>
    osalEventBroadcastFlagsI(&canp->wakeup_event, 0);
    osalSysUnlockFromISR();
  }
#endif /* CAN_USE_SLEEP_MODE */
  /* Error event.*/
  if (msr & CAN_MSR_ERRI) {
 800382e:	0763      	lsls	r3, r4, #29
 8003830:	d50b      	bpl.n	800384a <Vector98+0x2a>
    eventflags_t flags;
    uint32_t esr = canp->can->ESR;
 8003832:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003834:	2320      	movs	r3, #32
 8003836:	6991      	ldr	r1, [r2, #24]
 8003838:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800383c:	480f      	ldr	r0, [pc, #60]	; (800387c <Vector98+0x5c>)
 800383e:	0409      	lsls	r1, r1, #16
 8003840:	f7fe ff06 	bl	8002650 <chEvtBroadcastFlagsI>
 8003844:	2300      	movs	r3, #0
 8003846:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_sce_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800384a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_sce_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 800384e:	f7fe bd17 	b.w	8002280 <_port_irq_epilogue>

  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
    canp->state = CAN_READY;
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 8003852:	681a      	ldr	r2, [r3, #0]
  canp->can->MSR = msr;

  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
    canp->state = CAN_READY;
 8003854:	4628      	mov	r0, r5
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 8003856:	f022 0202 	bic.w	r2, r2, #2
  canp->can->MSR = msr;

  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
    canp->state = CAN_READY;
 800385a:	2103      	movs	r1, #3
 800385c:	f800 1b28 	strb.w	r1, [r0], #40
 8003860:	2120      	movs	r1, #32
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	f381 8811 	msr	BASEPRI, r1
 8003868:	2100      	movs	r1, #0
 800386a:	f7fe fef1 	bl	8002650 <chEvtBroadcastFlagsI>
 800386e:	2300      	movs	r3, #0
 8003870:	f383 8811 	msr	BASEPRI, r3
 8003874:	e7db      	b.n	800382e <Vector98+0xe>
 8003876:	bf00      	nop
 8003878:	20000800 	.word	0x20000800
 800387c:	20000820 	.word	0x20000820

08003880 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8003880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 8003884:	4d63      	ldr	r5, [pc, #396]	; (8003a14 <VectorD4+0x194>)
 8003886:	6f6e      	ldr	r6, [r5, #116]	; 0x74
  uint32_t cr1 = u->CR1;
 8003888:	6837      	ldr	r7, [r6, #0]
  uint32_t isr;

  /* Reading and clearing status.*/
  isr = u->ISR;
 800388a:	69f4      	ldr	r4, [r6, #28]
  u->ICR = isr;
 800388c:	6234      	str	r4, [r6, #32]

  /* Error condition detection.*/
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
 800388e:	0722      	lsls	r2, r4, #28
 8003890:	d154      	bne.n	800393c <VectorD4+0xbc>
    set_error(sdp, isr);

  /* Special case, LIN break detection.*/
  if (isr & USART_ISR_LBDF) {
 8003892:	05e3      	lsls	r3, r4, #23
 8003894:	d446      	bmi.n	8003924 <VectorD4+0xa4>
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  if (isr & USART_ISR_RXNE) {
 8003896:	06a0      	lsls	r0, r4, #26
 8003898:	d418      	bmi.n	80038cc <VectorD4+0x4c>
    sdIncomingDataI(sdp, (uint8_t)u->RDR);
    osalSysUnlockFromISR();
  }

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
 800389a:	0639      	lsls	r1, r7, #24
 800389c:	d501      	bpl.n	80038a2 <VectorD4+0x22>
 800389e:	0622      	lsls	r2, r4, #24
 80038a0:	d467      	bmi.n	8003972 <VectorD4+0xf2>
      u->TDR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (isr & USART_ISR_TC) {
 80038a2:	0663      	lsls	r3, r4, #25
 80038a4:	d50e      	bpl.n	80038c4 <VectorD4+0x44>
 80038a6:	2320      	movs	r3, #32
 80038a8:	f383 8811 	msr	BASEPRI, r3
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 80038ac:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80038ae:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80038b0:	4858      	ldr	r0, [pc, #352]	; (8003a14 <VectorD4+0x194>)
 80038b2:	429a      	cmp	r2, r3
 80038b4:	f000 808a 	beq.w	80039cc <VectorD4+0x14c>
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80038b8:	f027 0740 	bic.w	r7, r7, #64	; 0x40
 80038bc:	6037      	str	r7, [r6, #0]
 80038be:	2300      	movs	r3, #0
 80038c0:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);

  OSAL_IRQ_EPILOGUE();
}
 80038c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);

  OSAL_IRQ_EPILOGUE();
 80038c8:	f7fe bcda 	b.w	8002280 <_port_irq_epilogue>
 80038cc:	2320      	movs	r3, #32
 80038ce:	f383 8811 	msr	BASEPRI, r3
  }

  /* Data available.*/
  if (isr & USART_ISR_RXNE) {
    osalSysLockFromISR();
    sdIncomingDataI(sdp, (uint8_t)u->RDR);
 80038d2:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 80038d4:	696b      	ldr	r3, [r5, #20]
 80038d6:	fa5f f882 	uxtb.w	r8, r2
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d07f      	beq.n	80039de <VectorD4+0x15e>
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 80038de:	6a2b      	ldr	r3, [r5, #32]
 80038e0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80038e2:	484c      	ldr	r0, [pc, #304]	; (8003a14 <VectorD4+0x194>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d07f      	beq.n	80039e8 <VectorD4+0x168>

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 80038e8:	696a      	ldr	r2, [r5, #20]
 80038ea:	494a      	ldr	r1, [pc, #296]	; (8003a14 <VectorD4+0x194>)
 80038ec:	3201      	adds	r2, #1
  *iqp->q_wrptr++ = b;
 80038ee:	1c58      	adds	r0, r3, #1

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 80038f0:	616a      	str	r2, [r5, #20]
  *iqp->q_wrptr++ = b;
 80038f2:	6228      	str	r0, [r5, #32]
 80038f4:	f883 8000 	strb.w	r8, [r3]
  if (iqp->q_wrptr >= iqp->q_top) {
 80038f8:	6a2a      	ldr	r2, [r5, #32]
 80038fa:	69eb      	ldr	r3, [r5, #28]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d262      	bcs.n	80039c6 <VectorD4+0x146>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8003900:	4944      	ldr	r1, [pc, #272]	; (8003a14 <VectorD4+0x194>)
 8003902:	68eb      	ldr	r3, [r5, #12]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8003904:	f101 020c 	add.w	r2, r1, #12
 8003908:	4293      	cmp	r3, r2
 800390a:	d007      	beq.n	800391c <VectorD4+0x9c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800390c:	6818      	ldr	r0, [r3, #0]
 800390e:	60c8      	str	r0, [r1, #12]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8003910:	2100      	movs	r1, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8003912:	6042      	str	r2, [r0, #4]
  (void) chSchReadyI(tp);
 8003914:	4618      	mov	r0, r3

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8003916:	6259      	str	r1, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8003918:	f7fe fe82 	bl	8002620 <chSchReadyI>
 800391c:	2300      	movs	r3, #0
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	e7ba      	b.n	800389a <VectorD4+0x1a>
 8003924:	2320      	movs	r3, #32
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	483b      	ldr	r0, [pc, #236]	; (8003a18 <VectorD4+0x198>)
 800392c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003930:	f7fe fe8e 	bl	8002650 <chEvtBroadcastFlagsI>
 8003934:	2300      	movs	r3, #0
 8003936:	f383 8811 	msr	BASEPRI, r3
 800393a:	e7ac      	b.n	8003896 <VectorD4+0x16>
 */
static void set_error(SerialDriver *sdp, uint32_t isr) {
  eventflags_t sts = 0;

  if (isr & USART_ISR_ORE)
    sts |= SD_OVERRUN_ERROR;
 800393c:	f014 0f08 	tst.w	r4, #8
 8003940:	bf0c      	ite	eq
 8003942:	2100      	moveq	r1, #0
 8003944:	2180      	movne	r1, #128	; 0x80
  if (isr & USART_ISR_PE)
 8003946:	07e3      	lsls	r3, r4, #31
    sts |= SD_PARITY_ERROR;
 8003948:	bf48      	it	mi
 800394a:	f041 0120 	orrmi.w	r1, r1, #32
  if (isr & USART_ISR_FE)
 800394e:	07a0      	lsls	r0, r4, #30
    sts |= SD_FRAMING_ERROR;
 8003950:	bf48      	it	mi
 8003952:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (isr & USART_ISR_NE)
 8003956:	0762      	lsls	r2, r4, #29
    sts |= SD_NOISE_ERROR;
 8003958:	bf48      	it	mi
 800395a:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 800395e:	2320      	movs	r3, #32
 8003960:	f383 8811 	msr	BASEPRI, r3
 8003964:	482c      	ldr	r0, [pc, #176]	; (8003a18 <VectorD4+0x198>)
 8003966:	f7fe fe73 	bl	8002650 <chEvtBroadcastFlagsI>
 800396a:	2300      	movs	r3, #0
 800396c:	f383 8811 	msr	BASEPRI, r3
 8003970:	e78f      	b.n	8003892 <VectorD4+0x12>
 8003972:	2320      	movs	r3, #32
 8003974:	f383 8811 	msr	BASEPRI, r3
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8003978:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800397a:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 800397c:	4825      	ldr	r0, [pc, #148]	; (8003a14 <VectorD4+0x194>)
 800397e:	429a      	cmp	r2, r3
 8003980:	d03b      	beq.n	80039fa <VectorD4+0x17a>

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 8003982:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8003984:	4923      	ldr	r1, [pc, #140]	; (8003a14 <VectorD4+0x194>)
  b = *oqp->q_rdptr++;
 8003986:	1c58      	adds	r0, r3, #1

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 8003988:	3201      	adds	r2, #1
 800398a:	63aa      	str	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
 800398c:	64a8      	str	r0, [r5, #72]	; 0x48
 800398e:	f893 8000 	ldrb.w	r8, [r3]
  if (oqp->q_rdptr >= oqp->q_top) {
 8003992:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003994:	4298      	cmp	r0, r3
 8003996:	d301      	bcc.n	800399c <VectorD4+0x11c>
    oqp->q_rdptr = oqp->q_buffer;
 8003998:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800399a:	648b      	str	r3, [r1, #72]	; 0x48
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800399c:	491d      	ldr	r1, [pc, #116]	; (8003a14 <VectorD4+0x194>)
 800399e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80039a0:	f101 0230 	add.w	r2, r1, #48	; 0x30
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d007      	beq.n	80039b8 <VectorD4+0x138>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80039a8:	6818      	ldr	r0, [r3, #0]
 80039aa:	6308      	str	r0, [r1, #48]	; 0x30

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80039ac:	2100      	movs	r1, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 80039ae:	6042      	str	r2, [r0, #4]
  (void) chSchReadyI(tp);
 80039b0:	4618      	mov	r0, r3

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80039b2:	6259      	str	r1, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 80039b4:	f7fe fe34 	bl	8002620 <chSchReadyI>
    if (b < Q_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    }
    else
      u->TDR = b;
 80039b8:	fa1f f388 	uxth.w	r3, r8
 80039bc:	8533      	strh	r3, [r6, #40]	; 0x28
 80039be:	2300      	movs	r3, #0
 80039c0:	f383 8811 	msr	BASEPRI, r3
 80039c4:	e76d      	b.n	80038a2 <VectorD4+0x22>
  }

  iqp->q_counter++;
  *iqp->q_wrptr++ = b;
  if (iqp->q_wrptr >= iqp->q_top) {
    iqp->q_wrptr = iqp->q_buffer;
 80039c6:	698b      	ldr	r3, [r1, #24]
 80039c8:	620b      	str	r3, [r1, #32]
 80039ca:	e799      	b.n	8003900 <VectorD4+0x80>
 80039cc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f43f af72 	beq.w	80038b8 <VectorD4+0x38>
 80039d4:	3004      	adds	r0, #4
 80039d6:	2110      	movs	r1, #16
 80039d8:	f7fe fe3a 	bl	8002650 <chEvtBroadcastFlagsI>
 80039dc:	e76c      	b.n	80038b8 <VectorD4+0x38>
 80039de:	480e      	ldr	r0, [pc, #56]	; (8003a18 <VectorD4+0x198>)
 80039e0:	2104      	movs	r1, #4
 80039e2:	f7fe fe35 	bl	8002650 <chEvtBroadcastFlagsI>
 80039e6:	e77a      	b.n	80038de <VectorD4+0x5e>
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 80039e8:	6942      	ldr	r2, [r0, #20]
 80039ea:	2a00      	cmp	r2, #0
 80039ec:	f43f af7c 	beq.w	80038e8 <VectorD4+0x68>
 80039f0:	3004      	adds	r0, #4
 80039f2:	2180      	movs	r1, #128	; 0x80
 80039f4:	f7fe fe2c 	bl	8002650 <chEvtBroadcastFlagsI>
 80039f8:	e790      	b.n	800391c <VectorD4+0x9c>
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 80039fa:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80039fc:	2a00      	cmp	r2, #0
 80039fe:	d0c0      	beq.n	8003982 <VectorD4+0x102>
 8003a00:	3004      	adds	r0, #4
 8003a02:	2108      	movs	r1, #8
 8003a04:	f7fe fe24 	bl	8002650 <chEvtBroadcastFlagsI>
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    if (b < Q_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8003a08:	f027 03c0 	bic.w	r3, r7, #192	; 0xc0
 8003a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a10:	6033      	str	r3, [r6, #0]
 8003a12:	e7d4      	b.n	80039be <VectorD4+0x13e>
 8003a14:	20000ad0 	.word	0x20000ad0
 8003a18:	20000ad4 	.word	0x20000ad4
 8003a1c:	00000000 	.word	0x00000000

08003a20 <VectorC0>:

  OSAL_IRQ_EPILOGUE();
}

OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint32_t isr = I2CD1.i2c->ISR;
 8003a20:	4a25      	ldr	r2, [pc, #148]	; (8003ab8 <VectorC0+0x98>)
  i2c_lld_serve_interrupt(&I2CD1, isr);

  OSAL_IRQ_EPILOGUE();
}

OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
 8003a22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isr = I2CD1.i2c->ISR;
 8003a24:	6b14      	ldr	r4, [r2, #48]	; 0x30
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint32_t isr) {

#if STM32_I2C_USE_DMA == TRUE
  /* Clears DMA interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8003a26:	6ad3      	ldr	r3, [r2, #44]	; 0x2c

  OSAL_IRQ_EPILOGUE();
}

OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint32_t isr = I2CD1.i2c->ISR;
 8003a28:	69a1      	ldr	r1, [r4, #24]
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint32_t isr) {

#if STM32_I2C_USE_DMA == TRUE
  /* Clears DMA interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
  dmaStreamDisable(i2cp->dmarx);
 8003a2a:	6a90      	ldr	r0, [r2, #40]	; 0x28
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint32_t isr) {

#if STM32_I2C_USE_DMA == TRUE
  /* Clears DMA interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8003a2c:	685e      	ldr	r6, [r3, #4]
  dmaStreamDisable(i2cp->dmarx);
 8003a2e:	6845      	ldr	r5, [r0, #4]
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint32_t isr) {

#if STM32_I2C_USE_DMA == TRUE
  /* Clears DMA interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8003a30:	f8d3 e000 	ldr.w	lr, [r3]
  dmaStreamDisable(i2cp->dmarx);
 8003a34:	6807      	ldr	r7, [r0, #0]
  uint32_t isr = I2CD1.i2c->ISR;

  OSAL_IRQ_PROLOGUE();

  /* Clearing IRQ bits.*/
  I2CD1.i2c->ICR = isr & I2C_ERROR_MASK;
 8003a36:	f401 5c7c 	and.w	ip, r1, #16128	; 0x3f00
 8003a3a:	f8c4 c01c 	str.w	ip, [r4, #28]
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint32_t isr) {

#if STM32_I2C_USE_DMA == TRUE
  /* Clears DMA interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8003a3e:	6834      	ldr	r4, [r6, #0]
 8003a40:	f024 040f 	bic.w	r4, r4, #15
 8003a44:	6034      	str	r4, [r6, #0]
 8003a46:	7c1c      	ldrb	r4, [r3, #16]
 8003a48:	230f      	movs	r3, #15
 8003a4a:	fa03 f404 	lsl.w	r4, r3, r4
 8003a4e:	f8ce 4004 	str.w	r4, [lr, #4]
  dmaStreamDisable(i2cp->dmarx);
 8003a52:	682c      	ldr	r4, [r5, #0]
 8003a54:	f024 040f 	bic.w	r4, r4, #15
 8003a58:	602c      	str	r4, [r5, #0]
 8003a5a:	7c00      	ldrb	r0, [r0, #16]
 8003a5c:	4083      	lsls	r3, r0
 8003a5e:	607b      	str	r3, [r7, #4]
  /* Disabling RX and TX interrupts.*/
  i2cp->i2c->CR1 &= ~(I2C_CR1_TXIE | I2C_CR1_RXIE);
#endif

  if (isr & I2C_ISR_BERR)
    i2cp->errors |= I2C_BUS_ERROR;
 8003a60:	6893      	ldr	r3, [r2, #8]
#else
  /* Disabling RX and TX interrupts.*/
  i2cp->i2c->CR1 &= ~(I2C_CR1_TXIE | I2C_CR1_RXIE);
#endif

  if (isr & I2C_ISR_BERR)
 8003a62:	05ce      	lsls	r6, r1, #23
    i2cp->errors |= I2C_BUS_ERROR;
 8003a64:	bf44      	itt	mi
 8003a66:	f043 0301 	orrmi.w	r3, r3, #1
 8003a6a:	6093      	strmi	r3, [r2, #8]

  if (isr & I2C_ISR_ARLO)
 8003a6c:	058d      	lsls	r5, r1, #22
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8003a6e:	bf44      	itt	mi
 8003a70:	f043 0302 	orrmi.w	r3, r3, #2
 8003a74:	6093      	strmi	r3, [r2, #8]

  if (isr & I2C_ISR_OVR)
 8003a76:	054c      	lsls	r4, r1, #21
 8003a78:	d516      	bpl.n	8003aa8 <VectorC0+0x88>
    i2cp->errors |= I2C_OVERRUN;
 8003a7a:	f043 0308 	orr.w	r3, r3, #8

  if (isr & I2C_ISR_TIMEOUT)
 8003a7e:	04c8      	lsls	r0, r1, #19

  if (isr & I2C_ISR_ARLO)
    i2cp->errors |= I2C_ARBITRATION_LOST;

  if (isr & I2C_ISR_OVR)
    i2cp->errors |= I2C_OVERRUN;
 8003a80:	6093      	str	r3, [r2, #8]

  if (isr & I2C_ISR_TIMEOUT)
 8003a82:	d502      	bpl.n	8003a8a <VectorC0+0x6a>
    i2cp->errors |= I2C_TIMEOUT;
 8003a84:	f043 0320 	orr.w	r3, r3, #32
 8003a88:	6093      	str	r3, [r2, #8]
 8003a8a:	2320      	movs	r3, #32
 8003a8c:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 8003a90:	480a      	ldr	r0, [pc, #40]	; (8003abc <VectorC0+0x9c>)
 8003a92:	f06f 0101 	mvn.w	r1, #1
 8003a96:	f7fe fe0b 	bl	80026b0 <chThdResumeI>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	f383 8811 	msr	BASEPRI, r3
  I2CD1.i2c->ICR = isr & I2C_ERROR_MASK;

  i2c_lld_serve_error_interrupt(&I2CD1, isr);

  OSAL_IRQ_EPILOGUE();
}
 8003aa0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  /* Clearing IRQ bits.*/
  I2CD1.i2c->ICR = isr & I2C_ERROR_MASK;

  i2c_lld_serve_error_interrupt(&I2CD1, isr);

  OSAL_IRQ_EPILOGUE();
 8003aa4:	f7fe bbec 	b.w	8002280 <_port_irq_epilogue>
    i2cp->errors |= I2C_ARBITRATION_LOST;

  if (isr & I2C_ISR_OVR)
    i2cp->errors |= I2C_OVERRUN;

  if (isr & I2C_ISR_TIMEOUT)
 8003aa8:	04c9      	lsls	r1, r1, #19
 8003aaa:	d4eb      	bmi.n	8003a84 <VectorC0+0x64>
    i2cp->errors |= I2C_TIMEOUT;

  /* If some error has been identified then sends wakes the waiting thread.*/
  if (i2cp->errors != I2C_NO_ERROR)
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1ec      	bne.n	8003a8a <VectorC0+0x6a>
  I2CD1.i2c->ICR = isr & I2C_ERROR_MASK;

  i2c_lld_serve_error_interrupt(&I2CD1, isr);

  OSAL_IRQ_EPILOGUE();
}
 8003ab0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  /* Clearing IRQ bits.*/
  I2CD1.i2c->ICR = isr & I2C_ERROR_MASK;

  i2c_lld_serve_error_interrupt(&I2CD1, isr);

  OSAL_IRQ_EPILOGUE();
 8003ab4:	f7fe bbe4 	b.w	8002280 <_port_irq_epilogue>
 8003ab8:	20000cf8 	.word	0x20000cf8
 8003abc:	20000d14 	.word	0x20000d14

08003ac0 <VectorBC>:

  OSAL_IRQ_EPILOGUE();
}

#elif defined(STM32_I2C1_EVENT_HANDLER) && defined(STM32_I2C1_ERROR_HANDLER)
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {
 8003ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isr = I2CD1.i2c->ISR;
 8003ac2:	4d56      	ldr	r5, [pc, #344]	; (8003c1c <VectorBC+0x15c>)
 8003ac4:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8003ac6:	69a3      	ldr	r3, [r4, #24]

  OSAL_IRQ_PROLOGUE();

  /* Clearing IRQ bits.*/
  I2CD1.i2c->ICR = isr & I2C_INT_MASK;
 8003ac8:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8003acc:	61e2      	str	r2, [r4, #28]
 */
static void i2c_lld_serve_interrupt(I2CDriver *i2cp, uint32_t isr) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* Special case of a received NACK, the transfer is aborted.*/
  if ((isr & I2C_ISR_NACKF) != 0U) {
 8003ace:	f013 0210 	ands.w	r2, r3, #16
 8003ad2:	d131      	bne.n	8003b38 <VectorBC+0x78>
    }
  }
#endif

  /* Partial transfer handling, restarting the transfer and returning.*/
  if ((isr & I2C_ISR_TCR) != 0U) {
 8003ad4:	0619      	lsls	r1, r3, #24
 8003ad6:	d509      	bpl.n	8003aec <VectorBC+0x2c>
    if (i2cp->state == I2C_ACTIVE_TX) {
 8003ad8:	782b      	ldrb	r3, [r5, #0]
 8003ada:	2b03      	cmp	r3, #3
 8003adc:	f000 8081 	beq.w	8003be2 <VectorBC+0x122>
      i2c_lld_setup_tx_transfer(i2cp);
    }
    else {
      i2c_lld_setup_rx_transfer(i2cp);
 8003ae0:	f000 fa36 	bl	8003f50 <i2c_lld_setup_rx_transfer.constprop.7>
  I2CD1.i2c->ICR = isr & I2C_INT_MASK;

  i2c_lld_serve_interrupt(&I2CD1, isr);

  OSAL_IRQ_EPILOGUE();
}
 8003ae4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  /* Clearing IRQ bits.*/
  I2CD1.i2c->ICR = isr & I2C_INT_MASK;

  i2c_lld_serve_interrupt(&I2CD1, isr);

  OSAL_IRQ_EPILOGUE();
 8003ae8:	f7fe bbca 	b.w	8002280 <_port_irq_epilogue>
    }
    return;
  }

  /* The following condition is true if a transfer phase has been completed.*/
  if ((isr & I2C_ISR_TC) != 0U) {
 8003aec:	065b      	lsls	r3, r3, #25
 8003aee:	d5f9      	bpl.n	8003ae4 <VectorBC+0x24>
    if (i2cp->state == I2C_ACTIVE_TX) {
 8003af0:	782b      	ldrb	r3, [r5, #0]
 8003af2:	2b03      	cmp	r3, #3
 8003af4:	d056      	beq.n	8003ba4 <VectorBC+0xe4>
    }
    else {
      /* End of the receive phase.*/
#if STM32_I2C_USE_DMA == TRUE
      /* Disabling RX DMA channel.*/
      dmaStreamDisable(i2cp->dmarx);
 8003af6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003af8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003afc:	680a      	ldr	r2, [r1, #0]
 8003afe:	f022 020f 	bic.w	r2, r2, #15
 8003b02:	600a      	str	r2, [r1, #0]
 8003b04:	7c1a      	ldrb	r2, [r3, #16]
 8003b06:	230f      	movs	r3, #15
 8003b08:	4093      	lsls	r3, r2
 8003b0a:	6043      	str	r3, [r0, #4]
#endif
    }

    /* Transaction finished sending the STOP.*/
    dp->CR2 |= I2C_CR2_STOP;
 8003b0c:	6863      	ldr	r3, [r4, #4]
 8003b0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b12:	6063      	str	r3, [r4, #4]

    /* Make sure no more 'Transfer Complete' interrupts.*/
    dp->CR1 &= ~I2C_CR1_TCIE;
 8003b14:	6823      	ldr	r3, [r4, #0]
 8003b16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b1a:	6023      	str	r3, [r4, #0]
 8003b1c:	2320      	movs	r3, #32
 8003b1e:	f383 8811 	msr	BASEPRI, r3
 8003b22:	483f      	ldr	r0, [pc, #252]	; (8003c20 <VectorBC+0x160>)
 8003b24:	2100      	movs	r1, #0
 8003b26:	f7fe fdc3 	bl	80026b0 <chThdResumeI>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	f383 8811 	msr	BASEPRI, r3
  I2CD1.i2c->ICR = isr & I2C_INT_MASK;

  i2c_lld_serve_interrupt(&I2CD1, isr);

  OSAL_IRQ_EPILOGUE();
}
 8003b30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  /* Clearing IRQ bits.*/
  I2CD1.i2c->ICR = isr & I2C_INT_MASK;

  i2c_lld_serve_interrupt(&I2CD1, isr);

  OSAL_IRQ_EPILOGUE();
 8003b34:	f7fe bba4 	b.w	8002280 <_port_irq_epilogue>

  /* Special case of a received NACK, the transfer is aborted.*/
  if ((isr & I2C_ISR_NACKF) != 0U) {
#if STM32_I2C_USE_DMA == TRUE
    /* Stops the associated DMA streams.*/
    dmaStreamDisable(i2cp->dmatx);
 8003b38:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    dmaStreamDisable(i2cp->dmarx);
 8003b3a:	6aa9      	ldr	r1, [r5, #40]	; 0x28

  /* Special case of a received NACK, the transfer is aborted.*/
  if ((isr & I2C_ISR_NACKF) != 0U) {
#if STM32_I2C_USE_DMA == TRUE
    /* Stops the associated DMA streams.*/
    dmaStreamDisable(i2cp->dmatx);
 8003b3c:	685f      	ldr	r7, [r3, #4]
    dmaStreamDisable(i2cp->dmarx);
 8003b3e:	684e      	ldr	r6, [r1, #4]

  /* Special case of a received NACK, the transfer is aborted.*/
  if ((isr & I2C_ISR_NACKF) != 0U) {
#if STM32_I2C_USE_DMA == TRUE
    /* Stops the associated DMA streams.*/
    dmaStreamDisable(i2cp->dmatx);
 8003b40:	6838      	ldr	r0, [r7, #0]
 8003b42:	f8d3 c000 	ldr.w	ip, [r3]
    dmaStreamDisable(i2cp->dmarx);
 8003b46:	f8d1 e000 	ldr.w	lr, [r1]
#endif

    /* Error flag.*/
    i2cp->errors |= I2C_ACK_FAILURE;
 8003b4a:	68aa      	ldr	r2, [r5, #8]

  /* Special case of a received NACK, the transfer is aborted.*/
  if ((isr & I2C_ISR_NACKF) != 0U) {
#if STM32_I2C_USE_DMA == TRUE
    /* Stops the associated DMA streams.*/
    dmaStreamDisable(i2cp->dmatx);
 8003b4c:	f020 000f 	bic.w	r0, r0, #15
 8003b50:	6038      	str	r0, [r7, #0]
 8003b52:	7c18      	ldrb	r0, [r3, #16]
 8003b54:	230f      	movs	r3, #15
 8003b56:	fa03 f000 	lsl.w	r0, r3, r0
 8003b5a:	f8cc 0004 	str.w	r0, [ip, #4]
    dmaStreamDisable(i2cp->dmarx);
 8003b5e:	6830      	ldr	r0, [r6, #0]
 8003b60:	f020 000f 	bic.w	r0, r0, #15
 8003b64:	6030      	str	r0, [r6, #0]
 8003b66:	7c09      	ldrb	r1, [r1, #16]
 8003b68:	408b      	lsls	r3, r1
 8003b6a:	f8ce 3004 	str.w	r3, [lr, #4]

    /* Error flag.*/
    i2cp->errors |= I2C_ACK_FAILURE;

    /* Transaction finished sending the STOP.*/
    dp->CR2 |= I2C_CR2_STOP;
 8003b6e:	6863      	ldr	r3, [r4, #4]
    dmaStreamDisable(i2cp->dmatx);
    dmaStreamDisable(i2cp->dmarx);
#endif

    /* Error flag.*/
    i2cp->errors |= I2C_ACK_FAILURE;
 8003b70:	f042 0204 	orr.w	r2, r2, #4

    /* Transaction finished sending the STOP.*/
    dp->CR2 |= I2C_CR2_STOP;
 8003b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    dmaStreamDisable(i2cp->dmatx);
    dmaStreamDisable(i2cp->dmarx);
#endif

    /* Error flag.*/
    i2cp->errors |= I2C_ACK_FAILURE;
 8003b78:	60aa      	str	r2, [r5, #8]

    /* Transaction finished sending the STOP.*/
    dp->CR2 |= I2C_CR2_STOP;
 8003b7a:	6063      	str	r3, [r4, #4]

    /* Make sure no more interrupts.*/
    dp->CR1 &= ~(I2C_CR1_TCIE | I2C_CR1_TXIE | I2C_CR1_RXIE);
 8003b7c:	6823      	ldr	r3, [r4, #0]
 8003b7e:	f023 0346 	bic.w	r3, r3, #70	; 0x46
 8003b82:	6023      	str	r3, [r4, #0]
 8003b84:	2320      	movs	r3, #32
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f06f 0101 	mvn.w	r1, #1
 8003b8e:	f105 001c 	add.w	r0, r5, #28
 8003b92:	f7fe fd8d 	bl	80026b0 <chThdResumeI>
 8003b96:	2300      	movs	r3, #0
 8003b98:	f383 8811 	msr	BASEPRI, r3
  I2CD1.i2c->ICR = isr & I2C_INT_MASK;

  i2c_lld_serve_interrupt(&I2CD1, isr);

  OSAL_IRQ_EPILOGUE();
}
 8003b9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  /* Clearing IRQ bits.*/
  I2CD1.i2c->ICR = isr & I2C_INT_MASK;

  i2c_lld_serve_interrupt(&I2CD1, isr);

  OSAL_IRQ_EPILOGUE();
 8003ba0:	f7fe bb6e 	b.w	8002280 <_port_irq_epilogue>
    if (i2cp->state == I2C_ACTIVE_TX) {
      /* End of the transmit phase.*/

#if STM32_I2C_USE_DMA == TRUE
      /* Disabling TX DMA channel.*/
      dmaStreamDisable(i2cp->dmatx);
 8003ba4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
#endif

      /* Starting receive phase if necessary.*/
      if (i2c_lld_get_rxbytes(i2cp) > 0U) {
 8003ba6:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    if (i2cp->state == I2C_ACTIVE_TX) {
      /* End of the transmit phase.*/

#if STM32_I2C_USE_DMA == TRUE
      /* Disabling TX DMA channel.*/
      dmaStreamDisable(i2cp->dmatx);
 8003ba8:	6859      	ldr	r1, [r3, #4]
 8003baa:	681e      	ldr	r6, [r3, #0]
 8003bac:	680a      	ldr	r2, [r1, #0]
#endif

      /* Starting receive phase if necessary.*/
      if (i2c_lld_get_rxbytes(i2cp) > 0U) {
 8003bae:	6840      	ldr	r0, [r0, #4]
    if (i2cp->state == I2C_ACTIVE_TX) {
      /* End of the transmit phase.*/

#if STM32_I2C_USE_DMA == TRUE
      /* Disabling TX DMA channel.*/
      dmaStreamDisable(i2cp->dmatx);
 8003bb0:	f022 020f 	bic.w	r2, r2, #15
 8003bb4:	600a      	str	r2, [r1, #0]
 8003bb6:	7c1a      	ldrb	r2, [r3, #16]
 8003bb8:	230f      	movs	r3, #15
 8003bba:	4093      	lsls	r3, r2
 8003bbc:	6073      	str	r3, [r6, #4]
#endif

      /* Starting receive phase if necessary.*/
      if (i2c_lld_get_rxbytes(i2cp) > 0U) {
 8003bbe:	6843      	ldr	r3, [r0, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0a3      	beq.n	8003b0c <VectorBC+0x4c>
        /* Setting up the peripheral.*/
        i2c_lld_setup_rx_transfer(i2cp);
 8003bc4:	f000 f9c4 	bl	8003f50 <i2c_lld_setup_rx_transfer.constprop.7>

#if STM32_I2C_USE_DMA == TRUE
        /* Enabling RX DMA.*/
        dmaStreamEnable(i2cp->dmarx);
 8003bc8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	6813      	ldr	r3, [r2, #0]
 8003bce:	f043 0301 	orr.w	r3, r3, #1
 8003bd2:	6013      	str	r3, [r2, #0]
        /* RX interrupt enabled.*/
        dp->CR1 |= I2C_CR1_RXIE;
#endif

        /* Starts the read operation.*/
        dp->CR2 |= I2C_CR2_START;
 8003bd4:	6863      	ldr	r3, [r4, #4]

        /* State change.*/
        i2cp->state = I2C_ACTIVE_RX;
 8003bd6:	2204      	movs	r2, #4
        /* RX interrupt enabled.*/
        dp->CR1 |= I2C_CR1_RXIE;
#endif

        /* Starts the read operation.*/
        dp->CR2 |= I2C_CR2_START;
 8003bd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003bdc:	6063      	str	r3, [r4, #4]

        /* State change.*/
        i2cp->state = I2C_ACTIVE_RX;
 8003bde:	702a      	strb	r2, [r5, #0]
 8003be0:	e780      	b.n	8003ae4 <VectorBC+0x24>
  I2C_TypeDef *dp = i2cp->i2c;
  uint32_t reload;
  size_t n;

  /* The unit can transfer 255 bytes maximum in a single operation.*/
  n = i2c_lld_get_txbytes(i2cp);
 8003be2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    reload = 0U;
  }

  /* Configures the CR2 registers with both the calculated and static
     settings.*/
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 8003be4:	6868      	ldr	r0, [r5, #4]
  I2C_TypeDef *dp = i2cp->i2c;
  uint32_t reload;
  size_t n;

  /* The unit can transfer 255 bytes maximum in a single operation.*/
  n = i2c_lld_get_txbytes(i2cp);
 8003be6:	685b      	ldr	r3, [r3, #4]
    reload = 0U;
  }

  /* Configures the CR2 registers with both the calculated and static
     settings.*/
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 8003be8:	6880      	ldr	r0, [r0, #8]
  I2C_TypeDef *dp = i2cp->i2c;
  uint32_t reload;
  size_t n;

  /* The unit can transfer 255 bytes maximum in a single operation.*/
  n = i2c_lld_get_txbytes(i2cp);
 8003bea:	685b      	ldr	r3, [r3, #4]
    reload = 0U;
  }

  /* Configures the CR2 registers with both the calculated and static
     settings.*/
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 8003bec:	6861      	ldr	r1, [r4, #4]
 8003bee:	f021 71ff 	bic.w	r1, r1, #33423360	; 0x1fe0000
  uint32_t reload;
  size_t n;

  /* The unit can transfer 255 bytes maximum in a single operation.*/
  n = i2c_lld_get_txbytes(i2cp);
  if (n > 255U) {
 8003bf2:	2bff      	cmp	r3, #255	; 0xff
    reload = 0U;
  }

  /* Configures the CR2 registers with both the calculated and static
     settings.*/
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 8003bf4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003bf8:	bf94      	ite	ls
 8003bfa:	041b      	lslls	r3, r3, #16
  uint32_t reload;
  size_t n;

  /* The unit can transfer 255 bytes maximum in a single operation.*/
  n = i2c_lld_get_txbytes(i2cp);
  if (n > 255U) {
 8003bfc:	f44f 037f 	movhi.w	r3, #16711680	; 0xff0000
    reload = 0U;
  }

  /* Configures the CR2 registers with both the calculated and static
     settings.*/
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 8003c00:	ea41 0100 	orr.w	r1, r1, r0
 8003c04:	ea43 0301 	orr.w	r3, r3, r1

  /* The unit can transfer 255 bytes maximum in a single operation.*/
  n = i2c_lld_get_txbytes(i2cp);
  if (n > 255U) {
    n = 255U;
    reload = I2C_CR2_RELOAD;
 8003c08:	bf88      	it	hi
 8003c0a:	f04f 7280 	movhi.w	r2, #16777216	; 0x1000000
  }

  /* Configures the CR2 registers with both the calculated and static
     settings.*/
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
            (n << 16U) | reload;
 8003c0e:	431a      	orrs	r2, r3
    reload = 0U;
  }

  /* Configures the CR2 registers with both the calculated and static
     settings.*/
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 8003c10:	6062      	str	r2, [r4, #4]
  I2CD1.i2c->ICR = isr & I2C_INT_MASK;

  i2c_lld_serve_interrupt(&I2CD1, isr);

  OSAL_IRQ_EPILOGUE();
}
 8003c12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  /* Clearing IRQ bits.*/
  I2CD1.i2c->ICR = isr & I2C_INT_MASK;

  i2c_lld_serve_interrupt(&I2CD1, isr);

  OSAL_IRQ_EPILOGUE();
 8003c16:	f7fe bb33 	b.w	8002280 <_port_irq_epilogue>
 8003c1a:	bf00      	nop
 8003c1c:	20000cf8 	.word	0x20000cf8
 8003c20:	20000d14 	.word	0x20000d14
	...

08003c30 <Vector94>:
/**
 * @brief   CAN1 RX1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX1_HANDLER) {
 8003c30:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
static void can_lld_rx1_handler(CANDriver *canp) {
  uint32_t rf1r;

  rf1r = canp->can->RF1R;
 8003c32:	4d15      	ldr	r5, [pc, #84]	; (8003c88 <Vector94+0x58>)
 8003c34:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003c36:	691c      	ldr	r4, [r3, #16]
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
 8003c38:	07a2      	lsls	r2, r4, #30
 8003c3a:	d111      	bne.n	8003c60 <Vector94+0x30>
    osalSysLockFromISR();
    osalThreadDequeueAllI(&canp->rxqueue, MSG_OK);
    osalEventBroadcastFlagsI(&canp->rxfull_event, CAN_MAILBOX_TO_MASK(2U));
    osalSysUnlockFromISR();
  }
  if ((rf1r & CAN_RF1R_FOVR1) > 0) {
 8003c3c:	06e3      	lsls	r3, r4, #27
 8003c3e:	d50b      	bpl.n	8003c58 <Vector94+0x28>
    /* Overflow events handling.*/
    canp->can->RF1R = CAN_RF1R_FOVR1;
 8003c40:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003c42:	2110      	movs	r1, #16
 8003c44:	6119      	str	r1, [r3, #16]
 8003c46:	2320      	movs	r3, #32
 8003c48:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8003c4c:	480f      	ldr	r0, [pc, #60]	; (8003c8c <Vector94+0x5c>)
 8003c4e:	f7fe fcff 	bl	8002650 <chEvtBroadcastFlagsI>
 8003c52:	2300      	movs	r3, #0
 8003c54:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx1_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 8003c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_rx1_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 8003c5c:	f7fe bb10 	b.w	8002280 <_port_irq_epilogue>
  uint32_t rf1r;

  rf1r = canp->can->RF1R;
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
    /* No more receive events until the queue 0 has been emptied.*/
    canp->can->IER &= ~CAN_IER_FMPIE1;
 8003c60:	695a      	ldr	r2, [r3, #20]
 8003c62:	f022 0210 	bic.w	r2, r2, #16
 8003c66:	615a      	str	r2, [r3, #20]
 8003c68:	2320      	movs	r3, #32
 8003c6a:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8003c6e:	f105 0010 	add.w	r0, r5, #16
 8003c72:	f000 f905 	bl	8003e80 <chThdDequeueAllI.constprop.36>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8003c76:	f105 0018 	add.w	r0, r5, #24
 8003c7a:	2102      	movs	r1, #2
 8003c7c:	f7fe fce8 	bl	8002650 <chEvtBroadcastFlagsI>
 8003c80:	2300      	movs	r3, #0
 8003c82:	f383 8811 	msr	BASEPRI, r3
 8003c86:	e7d9      	b.n	8003c3c <Vector94+0xc>
 8003c88:	20000800 	.word	0x20000800
 8003c8c:	20000820 	.word	0x20000820

08003c90 <Vector90>:
/*
 * @brief   CAN1 RX0 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX0_HANDLER) {
 8003c90:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
static void can_lld_rx0_handler(CANDriver *canp) {
  uint32_t rf0r;

  rf0r = canp->can->RF0R;
 8003c92:	4d15      	ldr	r5, [pc, #84]	; (8003ce8 <Vector90+0x58>)
 8003c94:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003c96:	68dc      	ldr	r4, [r3, #12]
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
 8003c98:	07a2      	lsls	r2, r4, #30
 8003c9a:	d111      	bne.n	8003cc0 <Vector90+0x30>
    osalSysLockFromISR();
    osalThreadDequeueAllI(&canp->rxqueue, MSG_OK);
    osalEventBroadcastFlagsI(&canp->rxfull_event, CAN_MAILBOX_TO_MASK(1U));
    osalSysUnlockFromISR();
  }
  if ((rf0r & CAN_RF0R_FOVR0) > 0) {
 8003c9c:	06e3      	lsls	r3, r4, #27
 8003c9e:	d50b      	bpl.n	8003cb8 <Vector90+0x28>
    /* Overflow events handling.*/
    canp->can->RF0R = CAN_RF0R_FOVR0;
 8003ca0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003ca2:	2110      	movs	r1, #16
 8003ca4:	60d9      	str	r1, [r3, #12]
 8003ca6:	2320      	movs	r3, #32
 8003ca8:	f383 8811 	msr	BASEPRI, r3
 8003cac:	480f      	ldr	r0, [pc, #60]	; (8003cec <Vector90+0x5c>)
 8003cae:	f7fe fccf 	bl	8002650 <chEvtBroadcastFlagsI>
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx0_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 8003cb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_rx0_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 8003cbc:	f7fe bae0 	b.w	8002280 <_port_irq_epilogue>
  uint32_t rf0r;

  rf0r = canp->can->RF0R;
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
    /* No more receive events until the queue 0 has been emptied.*/
    canp->can->IER &= ~CAN_IER_FMPIE0;
 8003cc0:	695a      	ldr	r2, [r3, #20]
 8003cc2:	f022 0202 	bic.w	r2, r2, #2
 8003cc6:	615a      	str	r2, [r3, #20]
 8003cc8:	2320      	movs	r3, #32
 8003cca:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8003cce:	f105 0010 	add.w	r0, r5, #16
 8003cd2:	f000 f8d5 	bl	8003e80 <chThdDequeueAllI.constprop.36>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8003cd6:	f105 0018 	add.w	r0, r5, #24
 8003cda:	2101      	movs	r1, #1
 8003cdc:	f7fe fcb8 	bl	8002650 <chEvtBroadcastFlagsI>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f383 8811 	msr	BASEPRI, r3
 8003ce6:	e7d9      	b.n	8003c9c <Vector90+0xc>
 8003ce8:	20000800 	.word	0x20000800
 8003cec:	20000820 	.word	0x20000820

08003cf0 <Vector8C>:
static void can_lld_tx_handler(CANDriver *canp) {
  uint32_t tsr;
  eventflags_t flags;

  /* Clearing IRQ sources.*/
  tsr = canp->can->TSR;
 8003cf0:	4b18      	ldr	r3, [pc, #96]	; (8003d54 <Vector8C+0x64>)
 8003cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf4:	6893      	ldr	r3, [r2, #8]
/**
 * @brief   CAN1 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_TX_HANDLER) {
 8003cf6:	b510      	push	{r4, lr}

  /* Flags to be signaled through the TX event source.*/
  flags = 0U;

  /* Checking mailbox 0.*/
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
 8003cf8:	f013 0401 	ands.w	r4, r3, #1
  uint32_t tsr;
  eventflags_t flags;

  /* Clearing IRQ sources.*/
  tsr = canp->can->TSR;
  canp->can->TSR = tsr;
 8003cfc:	6093      	str	r3, [r2, #8]

  /* Flags to be signaled through the TX event source.*/
  flags = 0U;

  /* Checking mailbox 0.*/
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
 8003cfe:	d005      	beq.n	8003d0c <Vector8C+0x1c>
    if ((tsr & (CAN_TSR_ALST0 | CAN_TSR_TERR0)) != 0U) {
      flags |= CAN_MAILBOX_TO_MASK(1U) << 16U;
    }
    else {
      flags |= CAN_MAILBOX_TO_MASK(1U);
 8003d00:	f013 0f0c 	tst.w	r3, #12
 8003d04:	bf14      	ite	ne
 8003d06:	f44f 3480 	movne.w	r4, #65536	; 0x10000
 8003d0a:	2401      	moveq	r4, #1
    }
  }

  /* Checking mailbox 1.*/
  if ((tsr & CAN_TSR_RQCP1) != 0U) {
 8003d0c:	05d9      	lsls	r1, r3, #23
 8003d0e:	d506      	bpl.n	8003d1e <Vector8C+0x2e>
    if ((tsr & (CAN_TSR_ALST1 | CAN_TSR_TERR1)) != 0U) {
 8003d10:	f413 6f40 	tst.w	r3, #3072	; 0xc00
      flags |= CAN_MAILBOX_TO_MASK(2U) << 16U;
 8003d14:	bf14      	ite	ne
 8003d16:	f444 3400 	orrne.w	r4, r4, #131072	; 0x20000
    }
    else {
      flags |= CAN_MAILBOX_TO_MASK(2U);
 8003d1a:	f044 0402 	orreq.w	r4, r4, #2
    }
  }

  /* Checking mailbox 2.*/
  if ((tsr & CAN_TSR_RQCP2) != 0U) {
 8003d1e:	03da      	lsls	r2, r3, #15
 8003d20:	d506      	bpl.n	8003d30 <Vector8C+0x40>
    if ((tsr & (CAN_TSR_ALST2 | CAN_TSR_TERR2)) != 0U) {
 8003d22:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
      flags |= CAN_MAILBOX_TO_MASK(3U) << 16U;
 8003d26:	bf14      	ite	ne
 8003d28:	f444 2480 	orrne.w	r4, r4, #262144	; 0x40000
    }
    else {
      flags |= CAN_MAILBOX_TO_MASK(3U);
 8003d2c:	f044 0404 	orreq.w	r4, r4, #4
 8003d30:	2320      	movs	r3, #32
 8003d32:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8003d36:	4808      	ldr	r0, [pc, #32]	; (8003d58 <Vector8C+0x68>)
 8003d38:	f000 f8a2 	bl	8003e80 <chThdDequeueAllI.constprop.36>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8003d3c:	4621      	mov	r1, r4
 8003d3e:	4807      	ldr	r0, [pc, #28]	; (8003d5c <Vector8C+0x6c>)
 8003d40:	f7fe fc86 	bl	8002650 <chEvtBroadcastFlagsI>
 8003d44:	2300      	movs	r3, #0
 8003d46:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_tx_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 8003d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_tx_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 8003d4e:	f7fe ba97 	b.w	8002280 <_port_irq_epilogue>
 8003d52:	bf00      	nop
 8003d54:	20000800 	.word	0x20000800
 8003d58:	20000808 	.word	0x20000808
 8003d5c:	2000081c 	.word	0x2000081c

08003d60 <Vector134>:
/**
 * @brief   ADC4 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_ADC4_HANDLER) {
 8003d60:	b508      	push	{r3, lr}
  uint32_t isr;

  OSAL_IRQ_PROLOGUE();

  isr  = ADC4->ISR;
 8003d62:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <Vector134+0x18>)
  ADC4->ISR = isr;

  adc_lld_serve_interrupt(&ADCD4, isr);
 8003d64:	4805      	ldr	r0, [pc, #20]	; (8003d7c <Vector134+0x1c>)
OSAL_IRQ_HANDLER(STM32_ADC4_HANDLER) {
  uint32_t isr;

  OSAL_IRQ_PROLOGUE();

  isr  = ADC4->ISR;
 8003d66:	6819      	ldr	r1, [r3, #0]
  ADC4->ISR = isr;
 8003d68:	6019      	str	r1, [r3, #0]

  adc_lld_serve_interrupt(&ADCD4, isr);
 8003d6a:	f7fe fcb1 	bl	80026d0 <adc_lld_serve_interrupt.lto_priv.55>

  OSAL_IRQ_EPILOGUE();
}
 8003d6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  isr  = ADC4->ISR;
  ADC4->ISR = isr;

  adc_lld_serve_interrupt(&ADCD4, isr);

  OSAL_IRQ_EPILOGUE();
 8003d72:	f7fe ba85 	b.w	8002280 <_port_irq_epilogue>
 8003d76:	bf00      	nop
 8003d78:	50000500 	.word	0x50000500
 8003d7c:	20000c94 	.word	0x20000c94

08003d80 <VectorFC>:
/**
 * @brief   ADC3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_ADC3_HANDLER) {
 8003d80:	b508      	push	{r3, lr}
  uint32_t isr;

  OSAL_IRQ_PROLOGUE();

  isr  = ADC3->ISR;
 8003d82:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <VectorFC+0x18>)
  ADC3->ISR = isr;

  adc_lld_serve_interrupt(&ADCD3, isr);
 8003d84:	4805      	ldr	r0, [pc, #20]	; (8003d9c <VectorFC+0x1c>)
OSAL_IRQ_HANDLER(STM32_ADC3_HANDLER) {
  uint32_t isr;

  OSAL_IRQ_PROLOGUE();

  isr  = ADC3->ISR;
 8003d86:	6819      	ldr	r1, [r3, #0]
  ADC3->ISR = isr;
 8003d88:	6019      	str	r1, [r3, #0]

  adc_lld_serve_interrupt(&ADCD3, isr);
 8003d8a:	f7fe fca1 	bl	80026d0 <adc_lld_serve_interrupt.lto_priv.55>

  OSAL_IRQ_EPILOGUE();
}
 8003d8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  isr  = ADC3->ISR;
  ADC3->ISR = isr;

  adc_lld_serve_interrupt(&ADCD3, isr);

  OSAL_IRQ_EPILOGUE();
 8003d92:	f7fe ba75 	b.w	8002280 <_port_irq_epilogue>
 8003d96:	bf00      	nop
 8003d98:	50000400 	.word	0x50000400
 8003d9c:	20000c5c 	.word	0x20000c5c

08003da0 <Vector88>:
/**
 * @brief   ADC1/ADC2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_ADC1_HANDLER) {
 8003da0:	b508      	push	{r3, lr}
  ADC2->ISR = isr;

  adc_lld_serve_interrupt(&ADCD1, isr);
#else /* !STM32_ADC_DUAL_MODE */
#if STM32_ADC_USE_ADC1
  isr  = ADC1->ISR;
 8003da2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  ADC1->ISR = isr;

  adc_lld_serve_interrupt(&ADCD1, isr);
 8003da6:	4807      	ldr	r0, [pc, #28]	; (8003dc4 <Vector88+0x24>)
  ADC2->ISR = isr;

  adc_lld_serve_interrupt(&ADCD1, isr);
#else /* !STM32_ADC_DUAL_MODE */
#if STM32_ADC_USE_ADC1
  isr  = ADC1->ISR;
 8003da8:	6819      	ldr	r1, [r3, #0]
  ADC1->ISR = isr;
 8003daa:	6019      	str	r1, [r3, #0]

  adc_lld_serve_interrupt(&ADCD1, isr);
 8003dac:	f7fe fc90 	bl	80026d0 <adc_lld_serve_interrupt.lto_priv.55>
#endif
#if STM32_ADC_USE_ADC2
  isr  = ADC2->ISR;
 8003db0:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <Vector88+0x28>)
  ADC2->ISR = isr;

  adc_lld_serve_interrupt(&ADCD2, isr);
 8003db2:	4806      	ldr	r0, [pc, #24]	; (8003dcc <Vector88+0x2c>)
  ADC1->ISR = isr;

  adc_lld_serve_interrupt(&ADCD1, isr);
#endif
#if STM32_ADC_USE_ADC2
  isr  = ADC2->ISR;
 8003db4:	6819      	ldr	r1, [r3, #0]
  ADC2->ISR = isr;
 8003db6:	6019      	str	r1, [r3, #0]

  adc_lld_serve_interrupt(&ADCD2, isr);
 8003db8:	f7fe fc8a 	bl	80026d0 <adc_lld_serve_interrupt.lto_priv.55>
#endif
#endif /* !STM32_ADC_DUAL_MODE */

  OSAL_IRQ_EPILOGUE();
}
 8003dbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  adc_lld_serve_interrupt(&ADCD2, isr);
#endif
#endif /* !STM32_ADC_DUAL_MODE */

  OSAL_IRQ_EPILOGUE();
 8003dc0:	f7fe ba5e 	b.w	8002280 <_port_irq_epilogue>
 8003dc4:	20000bec 	.word	0x20000bec
 8003dc8:	50000100 	.word	0x50000100
 8003dcc:	20000c24 	.word	0x20000c24

08003dd0 <usb_packet_write_from_buffer.lto_priv.44>:
 * @notapi
 */
static void usb_packet_write_from_buffer(usbep_t ep,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8003dd0:	4b14      	ldr	r3, [pc, #80]	; (8003e24 <usb_packet_write_from_buffer.lto_priv.44+0x54>)
 8003dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003dd8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003ddc:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    buf += 16;
    pmap += 8;
  }
#endif /* STM32_USB_USE_FAST_COPY */

  while (i > 0) {
 8003de0:	2a00      	cmp	r2, #0
 */
static void usb_packet_write_from_buffer(usbep_t ep,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8003de2:	6803      	ldr	r3, [r0, #0]
  if (EPR_EP_TYPE_IS_ISO(epr) && (epr & EPR_DTOG_TX))
    udp->TXCOUNT1 = (stm32_usb_pma_t)n;
  else
    udp->TXCOUNT0 = (stm32_usb_pma_t)n;
#else
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8003de4:	6042      	str	r2, [r0, #4]
 */
static void usb_packet_write_from_buffer(usbep_t ep,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8003de6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003dea:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003dee:	ea4f 0343 	mov.w	r3, r3, lsl #1
    buf += 16;
    pmap += 8;
  }
#endif /* STM32_USB_USE_FAST_COPY */

  while (i > 0) {
 8003df2:	dd16      	ble.n	8003e22 <usb_packet_write_from_buffer.lto_priv.44+0x52>
 *
 * @notapi
 */
static void usb_packet_write_from_buffer(usbep_t ep,
                                         const uint8_t *buf,
                                         size_t n) {
 8003df4:	b410      	push	{r4}
 8003df6:	1e54      	subs	r4, r2, #1
 8003df8:	0864      	lsrs	r4, r4, #1
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8003e00:	3102      	adds	r1, #2
 8003e02:	e000      	b.n	8003e06 <usb_packet_write_from_buffer.lto_priv.44+0x36>
 8003e04:	3304      	adds	r3, #4
#endif /* STM32_USB_USE_FAST_COPY */

  while (i > 0) {
    uint32_t w;

    w  = *buf++;
 8003e06:	f811 2c02 	ldrb.w	r2, [r1, #-2]
    w |= *buf++ << 8;
 8003e0a:	f811 0c01 	ldrb.w	r0, [r1, #-1]
    buf += 16;
    pmap += 8;
  }
#endif /* STM32_USB_USE_FAST_COPY */

  while (i > 0) {
 8003e0e:	42a3      	cmp	r3, r4
    uint32_t w;

    w  = *buf++;
    w |= *buf++ << 8;
 8003e10:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    *pmap++ = (stm32_usb_pma_t)w;
 8003e14:	f843 2c04 	str.w	r2, [r3, #-4]
 8003e18:	f101 0102 	add.w	r1, r1, #2
    buf += 16;
    pmap += 8;
  }
#endif /* STM32_USB_USE_FAST_COPY */

  while (i > 0) {
 8003e1c:	d1f2      	bne.n	8003e04 <usb_packet_write_from_buffer.lto_priv.44+0x34>
    w  = *buf++;
    w |= *buf++ << 8;
    *pmap++ = (stm32_usb_pma_t)w;
    i -= 2;
  }
}
 8003e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	40005c00 	.word	0x40005c00
	...

08003e30 <adc_lld_stop_conversion>:
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8003e30:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8003e32:	6a82      	ldr	r2, [r0, #40]	; 0x28
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {
 8003e34:	b430      	push	{r4, r5}

  dmaStreamDisable(adcp->dmastp);
 8003e36:	684c      	ldr	r4, [r1, #4]
 8003e38:	680d      	ldr	r5, [r1, #0]
 8003e3a:	6820      	ldr	r0, [r4, #0]
 8003e3c:	f020 000f 	bic.w	r0, r0, #15
 8003e40:	6020      	str	r0, [r4, #0]
 8003e42:	7c09      	ldrb	r1, [r1, #16]
 8003e44:	230f      	movs	r3, #15
 8003e46:	408b      	lsls	r3, r1
 8003e48:	606b      	str	r3, [r5, #4]
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 */
static void adc_lld_stop_adc(ADCDriver *adcp) {

  if (adcp->adcm->CR & ADC_CR_ADSTART) {
 8003e4a:	6893      	ldr	r3, [r2, #8]
 8003e4c:	0759      	lsls	r1, r3, #29
 8003e4e:	d506      	bpl.n	8003e5e <adc_lld_stop_conversion+0x2e>
    adcp->adcm->CR |= ADC_CR_ADSTP;
 8003e50:	6893      	ldr	r3, [r2, #8]
 8003e52:	f043 0310 	orr.w	r3, r3, #16
 8003e56:	6093      	str	r3, [r2, #8]
    while (adcp->adcm->CR & ADC_CR_ADSTP)
 8003e58:	6893      	ldr	r3, [r2, #8]
 8003e5a:	06db      	lsls	r3, r3, #27
 8003e5c:	d4fc      	bmi.n	8003e58 <adc_lld_stop_conversion+0x28>
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
  adc_lld_stop_adc(adcp);
}
 8003e5e:	bc30      	pop	{r4, r5}
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
	...

08003e70 <chTMStartMeasurementX.constprop.40>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8003e70:	4b01      	ldr	r3, [pc, #4]	; (8003e78 <chTMStartMeasurementX.constprop.40+0x8>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8003e74:	6083      	str	r3, [r0, #8]
 8003e76:	4770      	bx	lr
 8003e78:	e0001000 	.word	0xe0001000
 8003e7c:	00000000 	.word	0x00000000

08003e80 <chThdDequeueAllI.constprop.36>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8003e80:	b538      	push	{r3, r4, r5, lr}
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8003e82:	6803      	ldr	r3, [r0, #0]

  while (queue_notempty(tqp)) {
 8003e84:	4283      	cmp	r3, r0
 8003e86:	d00b      	beq.n	8003ea0 <chThdDequeueAllI.constprop.36+0x20>
 8003e88:	4604      	mov	r4, r0

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8003e8a:	2500      	movs	r5, #0
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	6022      	str	r2, [r4, #0]
  (void) chSchReadyI(tp);
 8003e90:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 8003e92:	6054      	str	r4, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8003e94:	625d      	str	r5, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8003e96:	f7fe fbc3 	bl	8002620 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8003e9a:	6823      	ldr	r3, [r4, #0]
 8003e9c:	42a3      	cmp	r3, r4
 8003e9e:	d1f5      	bne.n	8003e8c <chThdDequeueAllI.constprop.36+0xc>
 8003ea0:	bd38      	pop	{r3, r4, r5, pc}
 8003ea2:	bf00      	nop
	...

08003eb0 <usbStartReceiveI.constprop.19>:
 * @param[in] n         transaction size. It is recommended a multiple of
 *                      the packet size because the excess is discarded.
 *
 * @iclass
 */
void usbStartReceiveI(USBDriver *usbp, usbep_t ep,
 8003eb0:	b470      	push	{r4, r5, r6}
  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 8003eb2:	68c5      	ldr	r5, [r0, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8003eb4:	8944      	ldrh	r4, [r0, #10]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 8003eb6:	69ab      	ldr	r3, [r5, #24]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8003eb8:	f044 0401 	orr.w	r4, r4, #1
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
  /*lint -restore*/
  osp->rxbuf  = buf;
  osp->rxsize = n;
  osp->rxcnt  = 0;
 8003ebc:	2600      	movs	r6, #0
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8003ebe:	8144      	strh	r4, [r0, #10]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
  /*lint -restore*/
  osp->rxbuf  = buf;
 8003ec0:	6099      	str	r1, [r3, #8]
  osp->rxsize = n;
  osp->rxcnt  = 0;
 8003ec2:	e883 0044 	stmia.w	r3, {r2, r6}
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  /* Transfer initialization.*/
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
 8003ec6:	b1a2      	cbz	r2, 8003ef2 <usbStartReceiveI.constprop.19+0x42>
    osp->rxpkts = 1;
  else
    osp->rxpkts = (uint16_t)((osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 8003ec8:	8a69      	ldrh	r1, [r5, #18]
 8003eca:	1e48      	subs	r0, r1, #1
 8003ecc:	4402      	add	r2, r0
 8003ece:	fbb2 f2f1 	udiv	r2, r2, r1
 8003ed2:	819a      	strh	r2, [r3, #12]
                             usbp->epc[ep]->out_maxsize);

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 8003ed4:	4a08      	ldr	r2, [pc, #32]	; (8003ef8 <usbStartReceiveI.constprop.19+0x48>)
 8003ed6:	6813      	ldr	r3, [r2, #0]
 8003ed8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003ee4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eec:	6013      	str	r3, [r2, #0]
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
}
 8003eee:	bc70      	pop	{r4, r5, r6}
 8003ef0:	4770      	bx	lr
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  /* Transfer initialization.*/
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
    osp->rxpkts = 1;
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	819a      	strh	r2, [r3, #12]
 8003ef6:	e7ed      	b.n	8003ed4 <usbStartReceiveI.constprop.19+0x24>
 8003ef8:	40005c00 	.word	0x40005c00
 8003efc:	00000000 	.word	0x00000000

08003f00 <usbStartTransmitI.constprop.17>:
  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 8003f00:	68c3      	ldr	r3, [r0, #12]
 * @param[in] buf       buffer where to fetch the data to be transmitted
 * @param[in] n         transaction size
 *
 * @iclass
 */
void usbStartTransmitI(USBDriver *usbp, usbep_t ep,
 8003f02:	b570      	push	{r4, r5, r6, lr}
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  /* Transfer initialization.*/
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
 8003f04:	8a1c      	ldrh	r4, [r3, #16]
  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 8003f06:	695b      	ldr	r3, [r3, #20]
 * @param[in] buf       buffer where to fetch the data to be transmitted
 * @param[in] n         transaction size
 *
 * @iclass
 */
void usbStartTransmitI(USBDriver *usbp, usbep_t ep,
 8003f08:	4616      	mov	r6, r2
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8003f0a:	8902      	ldrh	r2, [r0, #8]
 8003f0c:	42b4      	cmp	r4, r6
 8003f0e:	bf28      	it	cs
 8003f10:	4634      	movcs	r4, r6
 8003f12:	f042 0201 	orr.w	r2, r2, #1
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
  /*lint -restore*/
  isp->txbuf  = buf;
  isp->txsize = n;
  isp->txcnt  = 0;
 8003f16:	2500      	movs	r5, #0
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8003f18:	8102      	strh	r2, [r0, #8]
    n = (size_t)usbp->epc[ep]->in_maxsize;

  isp->txlast = n;
  usb_packet_write_from_buffer(ep, isp->txbuf, n);
 8003f1a:	4622      	mov	r2, r4
  /* Transfer initialization.*/
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  isp->txlast = n;
 8003f1c:	60dc      	str	r4, [r3, #12]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
  /*lint -restore*/
  isp->txbuf  = buf;
 8003f1e:	6099      	str	r1, [r3, #8]
  isp->txsize = n;
 8003f20:	601e      	str	r6, [r3, #0]
  isp->txcnt  = 0;
 8003f22:	605d      	str	r5, [r3, #4]
  usb_packet_write_from_buffer(ep, isp->txbuf, n);
 8003f24:	4628      	mov	r0, r5
 8003f26:	f7ff ff53 	bl	8003dd0 <usb_packet_write_from_buffer.lto_priv.44>

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 8003f2a:	4a07      	ldr	r2, [pc, #28]	; (8003f48 <usbStartTransmitI.constprop.17+0x48>)
 8003f2c:	6813      	ldr	r3, [r2, #0]
 8003f2e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8003f32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f36:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8003f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	bd70      	pop	{r4, r5, r6, pc}
 8003f46:	bf00      	nop
 8003f48:	40005c00 	.word	0x40005c00
 8003f4c:	00000000 	.word	0x00000000

08003f50 <i2c_lld_setup_rx_transfer.constprop.7>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_setup_rx_transfer(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 8003f50:	4a0f      	ldr	r2, [pc, #60]	; (8003f90 <i2c_lld_setup_rx_transfer.constprop.7+0x40>)
  uint32_t reload;
  size_t n;

  /* The unit can transfer 255 bytes maximum in a single operation.*/
  n = i2c_lld_get_rxbytes(i2cp);
 8003f52:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_setup_rx_transfer(I2CDriver *i2cp) {
 8003f58:	b430      	push	{r4, r5}
  uint32_t reload;
  size_t n;

  /* The unit can transfer 255 bytes maximum in a single operation.*/
  n = i2c_lld_get_rxbytes(i2cp);
  if (n > 255U) {
 8003f5a:	2bff      	cmp	r3, #255	; 0xff
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_setup_rx_transfer(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 8003f5c:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8003f5e:	bf98      	it	ls
 8003f60:	0419      	lslls	r1, r3, #16
    reload = 0U;
  }

  /* Configures the CR2 registers with both the calculated and static
     settings.*/
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 8003f62:	6853      	ldr	r3, [r2, #4]
 8003f64:	686a      	ldr	r2, [r5, #4]
 8003f66:	689c      	ldr	r4, [r3, #8]
 8003f68:	f022 73ff 	bic.w	r3, r2, #33423360	; 0x1fe0000
 8003f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f70:	f444 6280 	orr.w	r2, r4, #1024	; 0x400
  if (n > 255U) {
    n = 255U;
    reload = I2C_CR2_RELOAD;
  }
  else {
    reload = 0U;
 8003f74:	bf94      	ite	ls
 8003f76:	2000      	movls	r0, #0

  /* The unit can transfer 255 bytes maximum in a single operation.*/
  n = i2c_lld_get_rxbytes(i2cp);
  if (n > 255U) {
    n = 255U;
    reload = I2C_CR2_RELOAD;
 8003f78:	f04f 7080 	movhi.w	r0, #16777216	; 0x1000000
 8003f7c:	ea43 0302 	orr.w	r3, r3, r2
  uint32_t reload;
  size_t n;

  /* The unit can transfer 255 bytes maximum in a single operation.*/
  n = i2c_lld_get_rxbytes(i2cp);
  if (n > 255U) {
 8003f80:	bf88      	it	hi
 8003f82:	f44f 017f 	movhi.w	r1, #16711680	; 0xff0000
 8003f86:	4303      	orrs	r3, r0
  }

  /* Configures the CR2 registers with both the calculated and static
     settings.*/
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
            I2C_CR2_RD_WRN | (n << 16U) | reload;
 8003f88:	430b      	orrs	r3, r1
    reload = 0U;
  }

  /* Configures the CR2 registers with both the calculated and static
     settings.*/
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 8003f8a:	606b      	str	r3, [r5, #4]
            I2C_CR2_RD_WRN | (n << 16U) | reload;
}
 8003f8c:	bc30      	pop	{r4, r5}
 8003f8e:	4770      	bx	lr
 8003f90:	20000cf8 	.word	0x20000cf8
	...

08003fa0 <zero_status>:
	...

08003fb0 <active_status>:
	...

08003fc0 <ram_areas>:
 8003fc0:	080041a8 20000d2c 20000d2c 20000d2c     .A..,.. ,.. ,.. 
 8003fd0:	080041a8 00000000 00000000 00000000     .A..............
 8003fe0:	080041a8 00000000 00000000 00000000     .A..............
 8003ff0:	080041a8 00000000 00000000 00000000     .A..............
 8004000:	080041a8 10000000 10000000 10000000     .A..............
 8004010:	080041a8 00000000 00000000 00000000     .A..............
 8004020:	080041a8 00000000 00000000 00000000     .A..............
 8004030:	080041a8 00000000 00000000 00000000     .A..............

08004040 <halted_status>:
 8004040:	00000001 00000000 00000000 00000000     ................

08004050 <vmt>:
 8004050:	080020c1 080021e1 08002141 08002251     . ...!..A!..Q"..
 8004060:	08002131 08002241 080020b1 080021d1     1!..A"... ...!..

08004070 <_stm32_dma_streams>:
 8004070:	40020000 40020008 00000001 00000000     ...@...@........
 8004080:	000b0000 40020000 4002001c 00000002     .......@...@....
 8004090:	00000000 000c0104 40020000 40020030     ...........@0..@
 80040a0:	00000004 00000000 000d0208 40020000     ...............@
 80040b0:	40020044 00000008 00000000 000e030c     D..@............
 80040c0:	40020000 40020058 00000010 00000000     ...@X..@........
 80040d0:	000f0410 40020000 4002006c 00000020     .......@l..@ ...
 80040e0:	00000000 00100514 40020000 40020080     ...........@...@
 80040f0:	00000040 00000000 00110618 40020400     @..............@
 8004100:	40020408 00000080 00000000 00380700     ...@..........8.
 8004110:	40020400 4002041c 00000100 00000000     ...@...@........
 8004120:	00390804 40020400 40020430 00000200     ..9....@0..@....
 8004130:	00000000 003a0908 40020400 40020444     ......:....@D..@
 8004140:	00000400 00000000 003b0a0c 40020400     ..........;....@
 8004150:	40020458 00000800 00000000 003c0b10     X..@..........<.

08004160 <ch_debug>:
 8004160:	6e69616d 18431600 08480404 1814100c     main..C...H.....
 8004170:	1e1d1c00 00002000 00000000 00000000     ..... ..........

08004180 <ep0config>:
 8004180:	00000000 08001bc1 08001af1 08001a51     ............Q...
 8004190:	00400040 20000bb8 20000bb8 00000001     @.@.... ... ....
 80041a0:	20000bc8                                ... 
